<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Away0x's Blog]]></title>
  <link href="http://away0x.github.io/atom.xml" rel="self"/>
  <link href="http://away0x.github.io/"/>
  <updated>2022-05-20T23:11:20+08:00</updated>
  <id>http://away0x.github.io/</id>
  <author>
    <name><![CDATA[TongWu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust - Macro, Unsafe]]></title>
    <link href="http://away0x.github.io/blog/2021/10/14/rust-macro-unsafe/"/>
    <updated>2021-10-14T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/14/rust-macro-unsafe</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Pattern Match]]></title>
    <link href="http://away0x.github.io/blog/2021/10/13/rust-pattern-match/"/>
    <updated>2021-10-13T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/13/rust-pattern-match</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Concurrency]]></title>
    <link href="http://away0x.github.io/blog/2021/10/12/rust-concurrency/"/>
    <updated>2021-10-12T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/12/rust-concurrency</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Smart Pointers]]></title>
    <link href="http://away0x.github.io/blog/2021/10/11/rust-smart-pointers/"/>
    <updated>2021-10-11T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/11/rust-smart-pointers</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Closure, Function Pointer, Iterator]]></title>
    <link href="http://away0x.github.io/blog/2021/10/10/rust-closure-function-iterator/"/>
    <updated>2021-10-10T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/10/rust-closure-function-iterator</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Test]]></title>
    <link href="http://away0x.github.io/blog/2021/10/09/rust-test/"/>
    <updated>2021-10-09T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/09/rust-test</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Lifetime]]></title>
    <link href="http://away0x.github.io/blog/2021/10/08/rust-lifetime/"/>
    <updated>2021-10-08T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/08/rust-lifetime</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Generic, Trait]]></title>
    <link href="http://away0x.github.io/blog/2021/10/07/rust-generic-trait/"/>
    <updated>2021-10-07T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/07/rust-generic-trait</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Error Handling]]></title>
    <link href="http://away0x.github.io/blog/2021/10/06/rust-error-handling/"/>
    <updated>2021-10-06T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/06/rust-error-handling</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#ErrorHandling">Error Handling</a></li>
<li><a href="#thiserror">thiserror</a></li>
<li><a href="#anyhow">anyhow</a></li>
</ul>


<h2><h2 id="ErrorHandling">Error Handling</h2></h2>

<ul>
<li>大部分情况下，Rust 在编译阶段就会提示错误</li>
<li>错误分类

<ul>
<li>可恢复 (例如文件未找到，可再次尝试)</li>
<li>不可恢复 (bug, 例如访问的索引超出范围)</li>
</ul>
</li>
<li>Rust 没有类似异常的机制

<ul>
<li>可恢复错误: <code>Result&lt;T, E&gt;</code></li>
<li>不可恢复: <code>panic! 宏</code></li>
</ul>
</li>
<li>在定义一个可能失败的函数时，优先考虑返回 Result, 否则就 <code>panic!</code></li>
</ul>


<h3>不可恢复的错误与 panic!</h3>

<ul>
<li>当 <code>panic!</code> 宏执行时:

<ul>
<li>程序会打印错误信息</li>
<li>展开 (unwind)、清理调用栈 (stack)</li>
<li>退出程序</li>
</ul>
</li>
</ul>


<h4>为应对 panic，展开或中止 (abort) 调用栈</h4>

<ul>
<li>默认情况下，当 panic 发生

<ul>
<li>程序展开调用栈 (这个工作量是很大的)

<ul>
<li>Rust 沿着调用栈往回走</li>
<li>清理每个遇到的函数中的数据</li>
</ul>
</li>
<li>或立即中止调用栈

<ul>
<li>不进行清理，直接停止程序</li>
<li>内存需要稍后由操作系统进行清理</li>
</ul>
</li>
</ul>
</li>
<li>想让二进制文件更小，可以设置从 &ldquo;展开&rdquo; 改为 &ldquo;中止&rdquo;

<ul>
<li><code>Cargo.toml</code> 中适当的 <code>profile</code> 部分设置 <code>panic = "abort"</code></li>
</ul>
</li>
</ul>


<h4>查看 panic! 产生的回溯信息</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span><span class="nv">RUST_BACJTRACE</span><span class="o">=</span><span class="m">1</span> <span class="o">&amp;&amp;</span> cargo run
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;trigger panic&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>可恢复的错误与 Result</h3>

<h4>Result Enum</h4>

<ul>
<li>和 Option Enum 一样，Result 和其变体也是由 prelude 带入作用域的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 定义</span>
</span><span class='line'><span class="k">enum</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Err</span><span class="p">(</span><span class="n">E</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// T: 操作成功情况下, 返回 Ok 变体里的数据的类型</span>
</span><span class='line'><span class="c1">// E: 操作失败情况下，返回 Err 变体里的数据的类型</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 使用 match 处理 Result</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f</span> <span class="o">=</span> <span class="k">match</span> <span class="n">f</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">Err</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">match</span> <span class="n">error</span><span class="p">.</span><span class="n">kind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 创建文件</span>
</span><span class='line'>            <span class="n">ErrorKind</span><span class="o">::</span><span class="n">NotFound</span> <span class="o">=&gt;</span> <span class="k">match</span> <span class="n">File</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">Ok</span><span class="p">(</span><span class="n">fc</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">fc</span><span class="p">,</span>
</span><span class='line'>                <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Error creating file: {:?}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">),</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="c1">// 其他错误类型</span>
</span><span class='line'>            <span class="n">other_error</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Error opening the file: {:?}&quot;</span><span class="p">,</span> <span class="n">other_error</span><span class="p">),</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 使用 Result 闭包</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">).</span><span class="n">unwrap_or_else</span><span class="p">(</span><span class="o">|</span><span class="n">error</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span><span class="p">.</span><span class="n">kind</span><span class="p">()</span> <span class="o">==</span> <span class="n">ErrorKind</span><span class="o">::</span><span class="n">NotFound</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">File</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">).</span><span class="n">unwrap_or_else</span><span class="p">(</span><span class="o">|</span><span class="n">error</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Error creating file: {:?}&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Error opening the file: {:?}&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>unwrap</h4>

<ul>
<li>unwrap: match 表达式的一个快捷方法

<ul>
<li>如果 Result 结果是 Ok, 返回 Ok 里面的值</li>
<li>如果 Result 结果是 Err，调用 <code>panic!</code> 宏</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f</span> <span class="o">=</span> <span class="k">match</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">Err</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Error opening the file: {:?}&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// unwrap 等同于以上代码</span>
</span><span class='line'>    <span class="c1">// 返回 Err 时，panic</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>expect</h4>

<ul>
<li>expect: 和 unwrap 类似，但是可以指定错误信息</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">f</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Error opening the file&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>传播错误与 ? 运算符</h4>

<ul>
<li><code>? 运算符</code> 只能应用于 Result 或者 Option 或者实现了 Try Trait 的类型</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 发生错误了，将错误交给调用方处理</span>
</span><span class='line'><span class="k">fn</span> <span class="n">read_username_from_file</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">f</span> <span class="o">=</span> <span class="k">match</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">return</span> <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">f</span><span class="p">.</span><span class="n">read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">ok</span><span class="p">(</span><span class="n">s</span><span class="p">),</span>
</span><span class='line'>        <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用 `?` 运算符简化上面的传播错误代码</span>
</span><span class='line'><span class="k">fn</span> <span class="n">read_username_from_file2</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// let mut f = match File::open(&quot;hello.txt&quot;) {</span>
</span><span class='line'>    <span class="c1">//     Ok(file) =&gt; file,</span>
</span><span class='line'>    <span class="c1">//     Err(e) =&gt; return Err(e)</span>
</span><span class='line'>    <span class="c1">// };</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">f</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span> <span class="c1">// 得到 Err 的话, 会直接 return Err, 等于上面的代码</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="n">f</span><span class="p">.</span><span class="n">read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用链式调用继续简化代码</span>
</span><span class='line'><span class="k">fn</span> <span class="n">read_username_from_file3</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 当某个 ? 操作符的地方得到 Err 了，会直接 return Err</span>
</span><span class='line'>    <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>? 运算符与 from 函数</h5>

<ul>
<li>Trait <code>std::convert::From</code> 上的 from 函数

<ul>
<li>用于错误之间的转换</li>
</ul>
</li>
<li>被 <code>?</code> 所应用的错误，会隐式的被 from 函数处理

<ul>
<li>它所接收的错误类型会被转化为当前函数返回类型所定义的错误类型</li>
</ul>
</li>
<li>用于: 针对不同错误原因，返回同一种错误类型

<ul>
<li>前提: 需要错误类型实现了转化为所返回的错误类型的 from 函数</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">convert</span><span class="o">::</span><span class="n">From</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">From</span><span class="o">&lt;</span><span class="n">Error1</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Error2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">from</span><span class="p">(</span><span class="n">_</span><span class="o">:</span> <span class="n">Error1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Error2</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>? 运算符与 main 函数</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Box&lt;dyn Error&gt;: 是 trait 对象，可简单理解为代表任何可能的错误类型</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">dyn</span> <span class="n">std</span><span class="o">::</span><span class="n">error</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">f</span> <span class="o">=</span> <span class="n">File</span><span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>自定义错误</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 不实现 Error trait 的错误</span>
</span><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">CustomError</span><span class="p">(</span><span class="n">String</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="n">CustomError</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">path</span> <span class="o">=</span> <span class="s">&quot;test.txt&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">content</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">read_to_string</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map_err</span><span class="p">(</span><span class="o">|</span><span class="n">err</span><span class="o">|</span> <span class="n">CustomError</span><span class="p">(</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Error reading `{}`: {}&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">err</span><span class="p">)))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;file content: {}&quot;</span><span class="p">,</span> <span class="n">content</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Error: CustomError(&quot;Error reading `test.txt`: No such file or directory (os error 2)&quot;)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 实现 Error trait 的错误</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">error</span><span class="o">::</span><span class="n">Error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">SuperError</span><span class="p">;</span>
</span><span class='line'><span class="k">impl</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="n">Display</span> <span class="k">for</span> <span class="n">SuperError</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="n">Formatter</span><span class="o">&lt;</span><span class="nl">&#39;_</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="nb">Result</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;SuperError&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">std</span><span class="o">::</span><span class="n">error</span><span class="o">::</span><span class="n">Error</span> <span class="k">for</span> <span class="n">SuperError</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">CustomError</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">err</span><span class="o">:</span> <span class="n">SuperError</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="n">Display</span> <span class="k">for</span> <span class="n">CustomError</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fmt</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="n">Formatter</span><span class="o">&lt;</span><span class="nl">&#39;_</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="nb">Result</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">write</span><span class="o">!</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;CustomError&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">std</span><span class="o">::</span><span class="n">error</span><span class="o">::</span><span class="n">Error</span> <span class="k">for</span> <span class="n">CustomError</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 可用于实现错误追溯</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">source</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="p">(</span><span class="n">dyn</span> <span class="n">std</span><span class="o">::</span><span class="n">error</span><span class="o">::</span><span class="n">Error</span> <span class="o">+</span> <span class="k">&#39;static</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">new_custom_error</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="n">CustomError</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Err</span><span class="p">(</span><span class="n">CustomError</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">err</span><span class="o">:</span> <span class="n">SuperError</span><span class="p">,</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">dyn</span> <span class="n">std</span><span class="o">::</span><span class="n">error</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// new_custom_error()?;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">match</span> <span class="n">new_custom_error</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Error: {}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Caused by: {}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">source</span><span class="p">().</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">_</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Ok&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h2 id="thiserror">thiserror</h2></h2>

<blockquote><p>第三方库</p></blockquote>

<ul>
<li>为 <code>std::error::Error</code> 提供了方便的宏</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Debug, thiserror::Error)]</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[error(transparent)]</span>
</span><span class='line'>    <span class="n">VarError</span><span class="p">(</span><span class="cp">#[from]</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="o">::</span><span class="n">VarError</span><span class="p">),</span> <span class="c1">// 捕获 env::VarError 异常</span>
</span><span class='line'>    <span class="cp">#[error(transparent)]</span>
</span><span class='line'>    <span class="n">IoError</span><span class="p">(</span><span class="cp">#[from]</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// std::env::var(&quot;不存在的环境变量&quot;)?; // 发生 std::env::VarError 异常</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">read_to_string</span><span class="p">(</span><span class="s">&quot;不存在的路径&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span> <span class="c1">// 发生 std::io::Error 异常</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Error: VarError(NotPresent)</span>
</span><span class='line'>    <span class="c1">// Error: IoError(Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; })</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h2 id="anyhow">anyhow</h2></h2>

<blockquote><p>第三方库</p></blockquote>

<ul>
<li>提供了 <code>anyhow::Error</code></li>
<li>它的 Context trait 可以用来添加描述。除此之外，它还保留了原始 error ，因此我们会得到指向错误根源的 error</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Context trait 用来添加错误描述</span>
</span><span class='line'><span class="c1">// Result 会自动转换异常类型</span>
</span><span class='line'><span class="kn">use</span> <span class="n">anyhow</span><span class="o">::</span><span class="p">{</span><span class="n">Context</span><span class="p">,</span> <span class="nb">Result</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">path</span> <span class="o">=</span> <span class="s">&quot;test.txt&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">content</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">fs</span><span class="o">::</span><span class="n">read_to_string</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">with_context</span><span class="p">(</span><span class="o">||</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;could not read file `{}`&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;file content: {}&quot;</span><span class="p">,</span> <span class="n">content</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error: could not read file `test.txt`</span>
</span><span class='line'><span class="c1">// Caused by:</span>
</span><span class='line'><span class="c1">//     No such file or directory (os error 2)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Vector, String, HashMap]]></title>
    <link href="http://away0x.github.io/blog/2021/10/05/rust-vector-string-hashmap/"/>
    <updated>2021-10-05T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/05/rust-vector-string-hashmap</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#Vector">Vector</a></li>
<li><a href="#String">String</a></li>
<li><a href="#HashMap">HashMap</a></li>
</ul>


<blockquote><p>这些类型都是存储在 Heap 中的, 动态大小</p></blockquote>

<h2><h2 id="Vector">Vector</h2></h2>

<ul>
<li>类型: <code>Vec&lt;T&gt;</code>

<ul>
<li>由标准库提供</li>
<li>可存储多个值</li>
<li>只能存储相同类型的数据</li>
<li>值在内存中连续存放</li>
</ul>
</li>
<li>当 Vector 离开作用域后，它就被清理了，它的所有元素也被清理了</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 创建</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">v1</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> <span class="c1">// Vec&lt;i32&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 更新</span>
</span><span class='line'>    <span class="n">v1</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获取</span>
</span><span class='line'>    <span class="n">v2</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// 通过索引获取</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">v2</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Some</span><span class="p">(</span><span class="n">one</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">one</span><span class="p">),</span>
</span><span class='line'>        <span class="nb">None</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;none&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 遍历</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">v2</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">v3</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">v3</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 修改 v3 里面的每项元素</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 引用与借用对 Vector 的影响</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 作用域内同时发生了可变借用和不可变借用，违反了引用借用规则</span>
</span><span class='line'><span class="c1">//    因为 Vector 在内存中是连续摆放的，所以再往 v 中添加元素的时候，内存中可能没有这么大的连续内存块了，</span>
</span><span class='line'><span class="c1">//    所以 push 可能会导致内存重新分配(原来的内存释放)，这样的话，之前的引用 first 还是指向原来的内存地址，就会出现问题</span>
</span><span class='line'><span class="c1">//    所以通过引用借用规则，就可以避免掉这类 Bug</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">v</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">first</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// 发生了一次不可变的借用</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span> <span class="c1">// 发生了一次可变的借用 (该行会报错)</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;The first element is {}&quot;</span><span class="p">,</span> <span class="n">first</span><span class="p">);</span> <span class="c1">// 发生了一次不可变的借用</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Vector + Enum</span>
</span><span class='line'><span class="c1">// Vector 只能存储相同类型的数据</span>
</span><span class='line'><span class="c1">// 这里使用附加数据的 Enum 创建 Vector，从而使 Vector 可存储多种数据</span>
</span><span class='line'><span class="k">enum</span> <span class="n">SpreadsheetCell</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Int</span><span class="p">(</span><span class="kt">i32</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Float</span><span class="p">(</span><span class="kt">f64</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">row</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span>
</span><span class='line'>        <span class="n">SpreadsheetCell</span><span class="o">::</span><span class="nb">Int</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>
</span><span class='line'>        <span class="n">SpreadsheetCell</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)),</span>
</span><span class='line'>        <span class="n">SpreadsheetCell</span><span class="o">::</span><span class="nb">Float</span><span class="p">(</span><span class="mf">10.12</span><span class="p">),</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h2 id="String">String</h2></h2>

<ul>
<li><strong>字符串切片 <code>&amp;str</code></strong>

<ul>
<li>Rust 的核心语言层面，只有一个字符串类型: 字符串切片 <strong>str</strong> (或 <strong><code>&amp;str</code></strong>)</li>
<li>字符串切片: 对存储在其他地方、UTF-8 编码的字符串的引用

<ul>
<li>字符串字面值: 存储在二进制文件中，也是字符串切片</li>
</ul>
</li>
</ul>
</li>
<li><strong>String 类型</strong>

<ul>
<li>来自标准库而不是核心语言</li>
<li>其可增长、可修改、可获得所有权</li>
<li>UTF-8 编码</li>
</ul>
</li>
<li>Rust 标准库提供了很多字符串类型:

<ul>
<li><code>&amp;str</code>, <code>String</code>, <code>&amp;[u8]</code>, <code>[&amp;u8;N]</code>, <code>[Vec&lt;u8&gt;]</code>, <code>&amp;u8</code>, <code>OsStr</code>, <code>OsString</code>, <code>Path</code>, <code>PathBuf</code>, <code>CStr</code>, <code>CString</code>, <code>&amp;' static str</code></li>
</ul>
</li>
</ul>


<h3>创建 String</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 创建</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&quot;init content&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">();</span> <span class="c1">// to_string 方法可用于实现了 Display Trait 的类型</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;init content&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更新 String</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 添加</span>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// push_str: 把一个字符串切片附加到 String</span>
</span><span class='line'><span class="n">s1</span><span class="p">.</span><span class="n">push_str</span><span class="p">(</span><span class="s">&quot;123&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;456&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">s1</span><span class="p">.</span><span class="n">push_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s4</span><span class="p">);</span>
</span><span class='line'><span class="c1">// push: 把单个字符附加到 String</span>
</span><span class='line'><span class="n">s2</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="sc">&#39;l&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// +: 拼接字符串</span>
</span><span class='line'><span class="c1">//   实际上是使用了类似 fn add(self, s: &amp;str) -&gt; String {...} 的这个方法</span>
</span><span class='line'><span class="c1">//   s1 + &amp;s2，其实是把 s1 和 s2 的引用相加到一起，所以 s1 的所有权转移到 add 方法里了，下面拼接之后的打印 s1 会报错</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello &quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s1</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">;</span> <span class="c1">// s1 失去了所有权; s2 由于传递的是引用，保留了所有权</span>
</span><span class='line'>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span> <span class="c1">// 报错 (s1 的所有权转移，s1 这里不可使用了)</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s2</span><span class="p">);</span> <span class="c1">// 可打印</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s3</span><span class="p">);</span> <span class="c1">// 可打印</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 问题: s1 + &amp;s2，这里是 String + &amp;String 类型，但是 add 函数签名要求是 &amp;str，为何可运行？</span>
</span><span class='line'><span class="c1">//      这是因为标准库中这个 add 方法使用了泛型，只能把 &amp;str 添加到 String</span>
</span><span class='line'><span class="c1">//      所以编译器在这里产生了解引用强制转换 (deref coercion)，把 &amp;String 转换为了 &amp;str 类型</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// format!: 拼接字符串</span>
</span><span class='line'><span class="c1">//          format! 则不会获取任何参数的所有权</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;aa&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;bb&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;cc&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">s4</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}-{}-{}&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">s3</span><span class="p">);</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span> <span class="c1">// 可打印</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s2</span><span class="p">);</span> <span class="c1">// 可打印</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s3</span><span class="p">);</span> <span class="c1">// 可打印</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 上面的例子如果用 + 来实现就得 (使用 + 运算符会导致 s1 的所有权转移)</span>
</span><span class='line'><span class="c1">// let s4 = s1 + &quot;-&quot; + &amp;s2 + &quot;-&quot; + &amp;s3;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>访问 String</h3>

<ul>
<li>不支持索引语法访问

<ul>
<li>字符串其实是对 <code>Vec&lt;u8&gt;</code> 的包装，通过索引获取到的是字节，通常没有意义，且容易引发 Bug，所以 Rust 直接拒绝了这种行为</li>
<li>索引操作应该是消耗一个常量时间(<code>O(1)</code>)，但是 String 的索引操作无法保证这种时间

<ul>
<li>因为需要遍历所有内容，来确定有多少个合法字符</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 访问</span>
</span><span class='line'><span class="c1">// Rust 的 String 不支持索引语法访问</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">s1</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// 报错</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// len: 返回 String 所占用的字节数</span>
</span><span class='line'><span class="kd">let</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">Strnig</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hola&quot;</span><span class="p">).</span><span class="n">len</span><span class="p">();</span>  <span class="c1">// 4 (使用 utf8 编码, hola 占用了 4 个字节)</span>
</span><span class='line'><span class="kd">let</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;字节数&quot;</span><span class="p">).</span><span class="n">len</span><span class="p">();</span> <span class="c1">// 9 (汉字每个字占用了 3 个字节)</span>
</span><span class='line'><span class="c1">// 由于字符串实际上是个 byte Vector 即 Vec&lt;u8&gt; 类型的包装，所以通过索引只能索引到 unicode 标量值，例如: &quot;208&quot;、&quot;151&quot; 这样的 code</span>
</span><span class='line'><span class="c1">// 为了避免得到这类无意义的数据，Rust 直接拒绝了这样通过索引操作字符串的行为</span>
</span></code></pre></td></tr></table></div></figure>


<h4>字节(Bytes)、标量值(Scalar Values)、字形簇(Grapheme Clusters)</h4>

<ul>
<li>Rust 有三种看待字符串的方式:

<ul>
<li>字节</li>
<li>标量值</li>
<li>字形簇 (最接近所谓的 &ldquo;字母&rdquo;)</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;नमस्ते&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 字节</span>
</span><span class='line'><span class="k">for</span> <span class="n">b</span> <span class="k">in</span> <span class="n">s</span><span class="p">.</span><span class="n">bytes</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// 224 164 168 224 164 174 224 ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 标量值</span>
</span><span class='line'><span class="k">for</span> <span class="n">b</span> <span class="k">in</span> <span class="n">s</span><span class="p">.</span><span class="n">chars</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// chars 方法会将其分开并返回六个 char 类型的值</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// 六个奇奇怪怪的字符</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 字形簇</span>
</span><span class='line'><span class="c1">// 标准库没有提供从字符串中获取字形簇的功能</span>
</span></code></pre></td></tr></table></div></figure>


<h3>切割 String</h3>

<ul>
<li>可以使用 <code>[]</code> 和一个范围来创建字符串的切片

<ul>
<li>必须谨慎使用</li>
<li>如果切割时跨越了字符边界，程序运行时就会 panic</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;字符串&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s1</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mi">3</span><span class="p">];</span> <span class="c1">// s2 为 s1 的前是那个字节，汉字占 3 个字节，所以这里切出的是一个完整的汉字</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s2</span><span class="p">);</span> <span class="c1">// 字</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">s3</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s1</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mi">4</span><span class="p">];</span> <span class="c1">// 前 4 个字节不能切出完整的汉字</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s3</span><span class="p">);</span> <span class="c1">// 报错 必须按照字符串的边界切割才行)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>遍历 String</h3>

<ul>
<li>遍历标量值: <code>chars()</code> 方法</li>
<li>遍历字节: <code>bytes()</code> 方法</li>
<li>遍历字形簇: 很复杂，标准库未提供，需要找第三方库</li>
</ul>


<h2><h2 id="HashMap">HashMap</h2></h2>

<ul>
<li>类型: <code>HashMap&lt;K, V&gt;</code></li>
<li>HashMap 不在 Prelude 中，需要自己导入，且不像 Vector 有内置宏来创建</li>
<li>数据存储在 heap 上</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashMap</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 创建: new</span>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">scores</span><span class="o">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="kt">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 添加数据: insert</span>
</span><span class='line'><span class="n">scores</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;Blue&quot;</span><span class="p">),</span> <span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 使用 collect 方法创建 HashMap</span>
</span><span class='line'><span class="c1">// collect 方法可以把数据整合成很多种集合类型，也包括 hashmap，所以返回值需要显式指明类型</span>
</span><span class='line'><span class="kd">let</span> <span class="n">teams</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;Blue&quot;</span><span class="p">),</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;Yellow&quot;</span><span class="p">)];</span>
</span><span class='line'><span class="kd">let</span> <span class="n">intial_scores</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// iter 返回遍历器，zip 创建 Tuple</span>
</span><span class='line'><span class="c1">// 需要指明 collect 创建类型为 HashMap，里面的 key value，编译器会自动推到出来，所以可以省略</span>
</span><span class='line'><span class="kd">let</span> <span class="n">scores</span><span class="o">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">teams</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="n">intial_scores</span><span class="p">.</span><span class="n">iter</span><span class="p">()).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">scores</span><span class="p">);</span> <span class="c1">// { &quot;Blue&quot;: 10, &quot;Yellow&quot;: 50 }</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 访问 get(key: &amp;K) =&gt; Option&lt;&amp;V&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'><span class="n">map</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;k&quot;</span><span class="p">),</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;v&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">one</span> <span class="o">=</span> <span class="n">map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;k&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">match</span> <span class="n">one</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Some</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">None</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;not exist&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 遍历</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}: {}&quot;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 更新</span>
</span><span class='line'><span class="n">map</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;k&quot;</span><span class="p">),</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;v&quot;</span><span class="p">));</span> <span class="c1">// 如已存在 k，则会覆盖</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 只在 key 不对应任何值的情况下，才插入 v</span>
</span><span class='line'><span class="c1">// entry: 检查是否存在指定的 key</span>
</span><span class='line'><span class="n">map</span><span class="p">.</span><span class="n">entry</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;k&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">or_insert</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;v2&quot;</span><span class="p">));</span> <span class="c1">// 不存在再插入, or_insert 返回的是 value 的可变引用</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 基于现有值来更新</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;hello world wonderful world&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="k">in</span> <span class="n">text</span><span class="p">.</span><span class="n">split_whitespace</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">count</span> <span class="o">=</span> <span class="n">map</span><span class="p">.</span><span class="n">entry</span><span class="p">(</span><span class="n">word</span><span class="p">).</span><span class="n">or_insert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 返回 value 的可变引用</span>
</span><span class='line'>        <span class="o">*</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 修改 value</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:#?}&quot;</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span> <span class="c1">// {&quot;hello&quot;: 1, &quot;world&quot;: 2, &quot;wonderful&quot;: 1} // world 单词出现 2 次，其他单词出现 1 次</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HashMap 和所有权</h3>

<ul>
<li>对于实现了 Copy trait 的类型(例如 i32)，值会被复制到 HashMap 中</li>
<li>对于拥有所有权的值(例如 String), 值会被移动，所有权会转移给 HashMap</li>
<li>如果将值的引用插入到 HashMap，值本身不会移动

<ul>
<li>在 HashMap 有效的期间，被引用的值必须保持有效</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">k</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;k&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;v&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'><span class="n">map</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span> <span class="c1">// k, v 所有权转移给了 map</span>
</span><span class='line'>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}, {}&quot;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span> <span class="c1">// 报错，k v 不可使用了</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Package, Crate, Module, Path]]></title>
    <link href="http://away0x.github.io/blog/2021/10/04/rust-package-crate-module-path/"/>
    <updated>2021-10-04T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/04/rust-package-crate-module-path</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#CratePackage">Crate &amp; Package</a></li>
<li><a href="#Module">Module</a></li>
<li><p><a href="#Path">Path</a></p></li>
<li><p>Rust 的模块系统</p>

<ul>
<li>Package: Cargo 的特性，让你构建、测试、共享 crate</li>
<li>Crate: 一个模块树，它可以产生一个 library 或可执行文件</li>
<li>Module、use 关键字: 让你控制代码的组织、作用域、私有路径</li>
<li>Path: 为 struct、function、或 module 等项命名的方式</li>
</ul>
</li>
<li><a href="https://github.com/Away0x/rust-demo/blob/main/libconfig/src/conf/mod.rs">例子</a></li>
</ul>


<h2><h2 id="CratePackage">Crate &amp; Package</h2></h2>

<ul>
<li>Create 的类型

<ul>
<li>binary</li>
<li>library</li>
</ul>
</li>
<li>Crate Root

<ul>
<li>是源代码文件</li>
<li>Rust 编译器从这里开始(入口文件)，组成你的 Crate 的根 Module</li>
</ul>
</li>
<li>Package

<ul>
<li>一个 Package 包含一个 <code>Cargo.toml</code>，它描述了如何构建这些 Crates</li>
<li>只能包含 0-1 个 library crate</li>
<li>可以包含任意数量的 binary crate</li>
<li>但必须至少包含一个 crate (library 或 binary)</li>
</ul>
</li>
</ul>


<h3>Cargo 的惯例 (约定大于配置)</h3>

<ul>
<li><code>src/main.rs</code>

<ul>
<li>binary crate 的 crate root</li>
<li>crate 的名与 package 名相同</li>
</ul>
</li>
<li><code>src/lib.rs</code>

<ul>
<li>package 包含一个 library crate</li>
<li>library crate 的 crate root</li>
<li>crate 的名与 package 名相同</li>
</ul>
</li>
<li>Cargo 把 crate root 文件交给 rustc 来构建 library 或 binary</li>
<li>一个 Package 可以同时包含 <code>src/main.rs</code> 和 <code>src/lib.rs</code>

<ul>
<li>同时有时，表示该 Package 有一个 binary crate 和一个 libary crate</li>
<li>crate 名称与 package 名相同</li>
</ul>
</li>
<li>一个 Package 可以有多个 binary crate

<ul>
<li>可以把这些文件放在 <code>src/bin</code> 目录</li>
<li>每个文件是单独的 binary crate</li>
</ul>
</li>
</ul>


<h4>惯例总结</h4>

<ul>
<li><code>tests</code>: 集成测试

<ul>
<li>单元测试一般就写在各自的文件里面就行</li>
</ul>
</li>
<li><code>beanches</code>: 性能测试</li>
<li><code>examples</code>:示例</li>
<li><code>src/lib.rs</code>: 库文件</li>
<li><code>src/main.rs</code>: 主二进制文件 (<code>cargo run</code> 会执行该文件)</li>
<li><code>src/bin</code>: 多个二进制文件 (如 <code>src/bin/demo.rs</code> 执行命令为 <code>cargo run --bin demo</code>)</li>
</ul>


<h3>Crate 的作用</h3>

<ul>
<li>Crate 可以将相关的功能组合到一个作用域内，便于在项目间进行共享

<ul>
<li>防止冲突</li>
</ul>
</li>
</ul>


<h3>使用外部 Package</h3>

<ol>
<li><code>Cargo.toml</code> 添加依赖的 package

<ul>
<li>cargo 会从 <code>crates.io</code> 上下载依赖项</li>
<li>下载完后可使用 <code>use</code> 将特定条目引入作用域</li>
</ul>
</li>
<li>标准库 (std) 也被当作外部包，但是不需要下载即可使用</li>
</ol>


<h3>发布 crate</h3>

<h4>release profile</h4>

<ul>
<li>是预定义的，可自定义(可使用不同的配置，对代码编译拥有更多的控制)</li>
<li>每个 profile 的配置都独立于其他的 profile</li>
<li>Cargo 主要的两个 profile

<ul>
<li>dev profile: 适用于开发，<code>cargo build</code></li>
<li>release profile: 适用于发布，<code>cargo build --release</code></li>
</ul>
</li>
<li>对于每个 profile, cargo 都提供了<a href="https://doc.rust-lang.org/cargo/">默认的配置</a>

<ul>
<li>可以在 <code>Cargo.toml</code> 里添加 <code>[profile.xxx]</code>，在里面覆盖默认配置的子集</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='toml'><span class='line'><span class="c1"># Cargo.toml (自定义 profile)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cargo build 时 opt-level = 0</span>
</span><span class='line'><span class="p">[</span><span class="n">profile</span><span class="p">.</span><span class="n">dev</span><span class="p">]</span>
</span><span class='line'><span class="n">opt-level</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># 配置编译器的优化程度 (0~3)，值越高编译时间越慢</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cargo build --release 时 opt-level = 1</span>
</span><span class='line'><span class="p">[</span><span class="n">profile</span><span class="p">.</span><span class="n">release</span><span class="p">]</span>
</span><span class='line'><span class="n">opt-level</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cargo Workspaces</h3>

<blockquote><p>帮助管理多个相互关联且需要协同发布开发的 crate</p></blockquote>

<ul>
<li>Workspaces 是一套共享同一个 <code>Cargo.lock</code> 和输出文件夹的包</li>
<li>可在 <code>Cargo.toml</code> 里配置 <code>[workspace]</code> 指定工作空间的 <code>members</code></li>
<li>workspace 下的 <code>Cargo.lock</code> 只有一个，在 workspace 的顶层目录

<ul>
<li>保证了 workspace 内所有 crate 使用的依赖的版本都相同</li>
<li>workspace 内所有 crate 相互兼容</li>
</ul>
</li>
<li><a href="https://github.com/Away0x/rust-demo/blob/main/workspace/README.md">例子</a></li>
</ul>


<h3>使用自定义命令拓展 cargo</h3>

<ul>
<li>cargo 被设计成可以使用子命令来扩展</li>
<li>例: 如果 <code>$PATH</code> 中某个二进制是 <code>cargo-something</code>，你可以像子命令一样运行

<ul>
<li><code>cargo something</code></li>
</ul>
</li>
<li>类似这样的自定义命令可以通过 <code>cargo --list</code> 列出</li>
<li>优点: 可使用 <code>cargo install</code> 来安装扩展，像内置工具一样来运行</li>
</ul>


<h2><h2 id="Module">Module</h2></h2>

<blockquote><p>Module 用来控制作用域和私有性</p></blockquote>

<ul>
<li>Module

<ul>
<li>在一个 crate 内，将代码进行分组</li>
<li>增加可读性，易于复用</li>
<li>可控制项目 (item) 的私有性: public、private

<ul>
<li><strong>默认都是私有的，需要公开可加 <code>pub</code> 关键字</strong></li>
</ul>
</li>
<li>使用 <code>mod</code> 关键字创建 Module, Module 可以嵌套</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">front_of_house</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">hosting</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">add_to_waitlist</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">seat_at_table</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">serving</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">take_order</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">serve_order</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">take_payment</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>将模块内容移动到其他文件</h2>

<ul>
<li>模块定义时，如果模块名后面时 <code>;</code>，而不是代码块

<ul>
<li>Rust 会从与模块同名的文件中加载内容</li>
<li>模块树的结构不会变化</li>
</ul>
</li>
<li>随着模块逐渐变大，该技术可以让你把模块的内容移动到其他文件中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// main.rs</span>
</span><span class='line'><span class="c1">// 会去同级目录的 aaa.rs 加载文件</span>
</span><span class='line'><span class="kn">mod</span> <span class="n">aaa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">aaa</span><span class="o">::</span><span class="n">bbb</span><span class="o">::</span><span class="n">func</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// aaa.rs</span>
</span><span class='line'><span class="c1">// 会去 aaa/bbb.rs 里面加载内容</span>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">bbb</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// aaa/bbb.rs</span>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">func</span><span class="p">()</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h2 id="Path">Path</h2></h2>

<blockquote><p>为了在 Rust 的模块中找到某个条目，需要使用路径</p></blockquote>

<ul>
<li>Path 有两种形式

<ol>
<li>绝对路径: 从 crate root 开始，使用 crate 名或字面值 crate</li>
<li>相对路径: 从当前模块开始，使用 <strong>self</strong>, <strong>super</strong> 或当前模块的标识符

<ul>
<li>super: 类似文件系统中的 <code>..</code>，进入模块系统的上层目录</li>
</ul>
</li>
</ol>
</li>
<li>Path 至少由一个标识符组成，标识符之间使用 <code>::</code> 连接</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// lib.rs</span>
</span><span class='line'><span class="kn">mod</span> <span class="n">front_of_house</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">hosting</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">add_to_waitlist</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">eat_at_restaurant</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 绝对路径: 使用字面值 crate</span>
</span><span class='line'>    <span class="n">crate</span><span class="o">::</span><span class="n">front_of_house</span><span class="o">::</span><span class="n">hosting</span><span class="o">::</span><span class="n">add_to_waitlist</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 相对路径</span>
</span><span class='line'>    <span class="n">front_of_house</span><span class="o">::</span><span class="n">hosting</span><span class="o">::</span><span class="n">add_to_waitlist</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// lib.rs</span>
</span><span class='line'><span class="k">fn</span> <span class="n">a</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">mod</span> <span class="n">b</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="o">::</span><span class="n">a</span><span class="p">();</span>
</span><span class='line'>        <span class="n">crate</span><span class="o">::</span><span class="n">a</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>use 关键字</h3>

<ul>
<li>可以使用 use 关键字将 Path 引入到作用域内

<ul>
<li>仍遵循私有性规则</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// lib.rs</span>
</span><span class='line'><span class="kn">mod</span> <span class="n">front_of_house</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">hosting</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">add_to_waitlist</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 引入当前作用域</span>
</span><span class='line'><span class="kn">use</span> <span class="n">crate</span><span class="o">::</span><span class="n">front_of_house</span><span class="o">::</span><span class="n">hosting</span><span class="p">;</span> <span class="c1">// 绝对路径</span>
</span><span class='line'><span class="c1">// 由于 mod 都在同一级，所以直接相对路径 use front_of_house::hosting; 也是可以的</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">eat_at_restaurant</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hosting</span><span class="o">::</span><span class="n">add_to_waitlist</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>pub use (重新导出)</h4>

<ul>
<li>使用 use 将路径(名称)导入到作用域内后，该名称在此作用域内是<strong>私有</strong>的，加上 pub 即可使外部可访问</li>
<li>内部模块嵌套太深不方便外部使用时，也可以通过 <code>pub use</code> 重新导出，方便外部调用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 外部可以访问到 func 了</span>
</span><span class='line'><span class="k">pub</span> <span class="kn">use</span> <span class="n">a</span><span class="o">::</span><span class="n">aa</span><span class="o">::</span><span class="n">func</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>嵌套 use</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="p">{</span>
</span><span class='line'>    <span class="n">cmp</span><span class="o">::</span><span class="nb">Ordering</span><span class="p">,</span>
</span><span class='line'>    <span class="n">io</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">self</span><span class="p">,</span> <span class="c1">// 引入 std::io</span>
</span><span class='line'>    <span class="n">Write</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>use *</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 将 io 下所有公共条目都引入到作用域</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::*</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Path 例子</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">allow</span><span class="p">(</span><span class="n">unused</span><span class="p">)]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 路径的第一种用法: 模块路径</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">a</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">pub</span> <span class="kn">mod</span> <span class="n">b</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">pub</span> <span class="kn">mod</span> <span class="n">c</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">pub</span> <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// a &gt; b &gt; c</span>
</span><span class='line'>                    <span class="n">super</span><span class="o">::</span><span class="n">super</span><span class="o">::</span><span class="n">foo</span><span class="p">();</span>       <span class="c1">// call a&#39;s foo function</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">::</span><span class="n">super</span><span class="o">::</span><span class="n">super</span><span class="o">::</span><span class="n">foo</span><span class="p">();</span> <span class="c1">// call a&#39;s foo function</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">a</span><span class="o">::</span><span class="n">b</span><span class="o">::</span><span class="n">c</span><span class="o">::</span><span class="n">foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 路径的第二种用法: 方法调用</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">S</span><span class="p">;</span>
</span><span class='line'>    <span class="k">impl</span> <span class="n">S</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">f</span><span class="p">()</span> <span class="p">{</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;s&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">trait</span> <span class="n">T1</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">f</span><span class="p">()</span> <span class="p">{</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;T1 f&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">impl</span> <span class="n">T1</span> <span class="k">for</span> <span class="n">S</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">trait</span> <span class="n">T2</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">f</span><span class="p">()</span> <span class="p">{</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;T2 f&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">impl</span> <span class="n">T2</span> <span class="k">for</span> <span class="n">S</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">S</span><span class="o">::</span><span class="n">f</span><span class="p">();</span> <span class="c1">// Calls the inherent impl, print &quot;s&quot;</span>
</span><span class='line'>    <span class="c1">// 完全限定无歧义调用</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">S</span> <span class="k">as</span> <span class="n">T1</span><span class="o">&gt;::</span><span class="n">f</span><span class="p">();</span> <span class="c1">// Calls the T1 trait function, print &quot;T1 f&quot;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">S</span> <span class="k">as</span> <span class="n">T2</span><span class="o">&gt;::</span><span class="n">f</span><span class="p">();</span> <span class="c1">// Calls the T2 trait function, print &quot;T2 f&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 路径的第三种用法: 泛型函数 - turbofish 操作符 (泛型函数中使用 ::)</span>
</span><span class='line'>    <span class="c1">// 调用 collect 时需要指定类型，于是使用 :: 指定类型后再调用</span>
</span><span class='line'>    <span class="p">(</span><span class="mf">0.</span><span class="p">.</span><span class="mi">10</span><span class="p">).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Vec</span><span class="o">::&lt;</span><span class="kt">u8</span><span class="o">&gt;::</span><span class="n">with_capacity</span><span class="p">(</span><span class="mi">1024</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Slice, Struct, Enum]]></title>
    <link href="http://away0x.github.io/blog/2021/10/03/rust-slice-struct-enum/"/>
    <updated>2021-10-03T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/03/rust-slice-struct-enum</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#Slice">Slice</a></li>
<li><a href="#Struct">Struct</a></li>
<li><a href="#Enum">Enum</a></li>
</ul>


<h2><h2 id="Slice">Slice</h2></h2>

<ul>
<li>切片 Slice 是不持有所有权的数据类型</li>
</ul>


<h3>字符串切片</h3>

<ul>
<li>字符串切片: 指向字符串中一部分内容的引用

<ul>
<li>形式: <code>[开始索引..结束索引]</code>

<ul>
<li>开始索引: 切片起始位置的索引值</li>
<li>结束索引: 切片终止位置的下一个索引值</li>
</ul>
</li>
<li>字符串切片的范围索引必须发生在有效的 UTF-8 字符边界内</li>
<li>如果尝试从一个多字节的字符中创建字符串切片，程序会报错并退出</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">hello</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mi">5</span><span class="p">];</span>        <span class="c1">// 也可以写成 &amp;s[..5]</span>
</span><span class='line'><span class="kd">let</span> <span class="n">world</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="mf">6.</span><span class="p">.</span><span class="mi">11</span><span class="p">];</span>       <span class="c1">// 也可以写成 &amp;s[6..]</span>
</span><span class='line'><span class="kd">let</span> <span class="n">hello_world</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mi">11</span><span class="p">];</span> <span class="c1">// 也可以写成 &amp;s[0..s.len()] &amp;s[..]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>字符串字面值 <code>&amp;str</code> 是切片

<ul>
<li>其是被直接存储在二进制程序中的</li>
<li><code>&amp;str</code> 是不可变引用，所以字符串字面值也是不可变的</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;hello world&quot;</span><span class="p">;</span> <span class="c1">// &amp;str 字符串切片类型</span>
</span><span class='line'><span class="c1">// s 是指向二进制程序特定位置的切片</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他类型的切片</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">let</span> <span class="n">slice</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="mf">1.</span><span class="p">.</span><span class="mi">3</span><span class="p">];</span> <span class="c1">// 类型为 &amp;[i32]</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h2 id="Struct">Struct</h2></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// struct 又自身所有数据的所有权，只要 struct 实例是有效的，那么里面的字段数据也是有效的</span>
</span><span class='line'><span class="c1">// struct 里面的字段也可以放引用，但是需要使用生命周期 (生命周期可以保证只要 struct 实例有效，那么里面的引用也是有效的)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">username</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="c1">// 持有所有权</span>
</span><span class='line'>    <span class="n">email</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span>    <span class="c1">// 持有所有权</span>
</span><span class='line'>    <span class="n">age</span><span class="o">:</span> <span class="kt">i32</span><span class="p">,</span>         <span class="c1">// 标量类型</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 一旦 struct 的实例是可变的，那么实例中所有的字段都是可变的</span>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">email</span><span class="o">:</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;a@qq.com&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">username</span><span class="o">:</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;wt&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">age</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span><span class="p">);</span>
</span><span class='line'><span class="n">user</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;b@qq.com&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 字段名与变量名相同使，可初始化简写</span>
</span><span class='line'><span class="k">fn</span> <span class="n">build_user</span><span class="p">(</span><span class="n">email</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">username</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">User</span> <span class="p">{</span> <span class="n">email</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">age</span><span class="o">:</span> <span class="mi">16</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 基于某个 struct 实例，创建新的 struct</span>
</span><span class='line'><span class="kd">let</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">User</span> <span class="p">{</span> <span class="n">email</span><span class="o">:</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;c@qq.com&quot;</span><span class="p">),</span> <span class="p">..</span><span class="n">user1</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Point3d</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">i32</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="kt">i32</span><span class="p">,</span>
</span><span class='line'>    <span class="n">z</span><span class="o">:</span> <span class="kt">i32</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">default</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Point3d</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Point3d</span> <span class="p">{</span> <span class="n">x</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Point3d</span> <span class="p">{</span> <span class="n">x</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="p">..</span><span class="n">default</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'><span class="kd">let</span> <span class="n">point</span> <span class="o">=</span> <span class="n">Point3d</span> <span class="p">{</span> <span class="n">z</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="p">..</span><span class="n">origin</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tuple Struct</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Color</span><span class="p">(</span><span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="p">(</span><span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">black</span> <span class="o">=</span> <span class="n">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Color, Point 是不同的类型</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 常用于包装一些基本数据类型，去扩展它的功能 (NewType 模式)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Score</span><span class="p">(</span><span class="kt">u32</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">Score</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">pass</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="mi">0</span> <span class="o">&gt;=</span> <span class="mi">60</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">Score</span><span class="p">(</span><span class="mi">59</span><span class="p">);</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">pass</span><span class="p">(),</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Unit-Like Struct</h3>

<ul>
<li>适用于需要在某个类型上实现某个 trait，但是在里面又没有想要存储的数据</li>
<li>可以看作是占位类型，其实例就是其自身。不管创建多少实例，编译器都会优化成同一个，其也不会占用内存空间，是一个零大小类型</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Unit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">unit1</span> <span class="o">=</span> <span class="n">Unit</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">unit2</span> <span class="o">=</span> <span class="n">Unit</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Recursive Enum</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Recursive</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Data</span><span class="o">:</span> <span class="kt">i32</span><span class="p">,</span>
</span><span class='line'>    <span class="n">rec</span><span class="o">:</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">Recursive</span><span class="o">&gt;</span><span class="p">,</span> <span class="c1">// 需要用 Box 包装</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Print Struct</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="n">b</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">let</span> <span class="n">u</span> <span class="o">=</span> <span class="n">User</span> <span class="p">{</span> <span class="n">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:#?}&quot;</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span> <span class="c1">// 比 {:?} 更漂亮些</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Struct Method</h3>

<ul>
<li>C/C++ 调用方法: <code>obj-&gt;something()</code> 和 <code>(*obj).something()</code></li>
<li>Rust 没有 <code>-&gt;</code> 运算符, Rust 会自动引用或者解引用</li>
<li>在调用方法时，Rust 根据情况会自动添加 <code>&amp;</code>、<code>&amp;mut</code>、或 <code>*</code>，以便 Object 可以匹配方法的签名

<ul>
<li><code>p1.distance(&amp;p2)</code> 效果等价于 <code>(&amp;p1).distance(&amp;p2)</code></li>
</ul>
</li>
<li>每个 struct 可以有多个 impl 块</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">username</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">email</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 实例方法</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">say</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">st</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{} say: {}&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="n">st</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 静态方法 (关联函数)</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">dosomething</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">u</span> <span class="o">=</span> <span class="n">User</span> <span class="p">{</span> <span class="n">username</span><span class="o">:</span> <span class="s">&quot;wt&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span> <span class="n">email</span><span class="o">:</span> <span class="s">&quot;a@a.com&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">say</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span> <span class="c1">// wt say: hello</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 调用关联函数</span>
</span><span class='line'>    <span class="n">User</span><span class="o">::</span><span class="n">dosomething</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h2 id="Enum">Enum</h2></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">IpAddrKind</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">V4</span><span class="p">,</span>
</span><span class='line'>    <span class="n">V6</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">four</span> <span class="o">=</span> <span class="n">IpAddrKind</span><span class="o">::</span><span class="n">V4</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">six</span> <span class="o">=</span> <span class="n">IpAddrKind</span><span class="o">::</span><span class="n">V6</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">route</span><span class="p">(</span><span class="n">four</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">route</span><span class="p">(</span><span class="n">ip_kind</span><span class="o">:</span> <span class="n">IpAddrKind</span><span class="p">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 数据附加到枚举到变体中</span>
</span><span class='line'><span class="c1">// - 优点:</span>
</span><span class='line'><span class="c1">//   - 不需要额外使用 struct 存储数据</span>
</span><span class='line'><span class="c1">//   - 每个变体可以拥有不同的类型以及关联的数据</span>
</span><span class='line'><span class="k">enum</span> <span class="n">IpAddrKind</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">V4</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span> <span class="kt">u8</span><span class="p">,</span> <span class="kt">u8</span><span class="p">,</span> <span class="kt">u8</span><span class="p">),</span> <span class="c1">// 可嵌入任意类型的数据，String、struct ...</span>
</span><span class='line'>    <span class="n">V6</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">home</span> <span class="o">=</span> <span class="n">IpAddrKind</span><span class="o">::</span><span class="n">V4</span><span class="p">(</span><span class="mi">127</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">loopback</span> <span class="o">=</span> <span class="n">IpAddrKind</span><span class="o">::</span><span class="n">V6</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;::1&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Message</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Quite</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Move</span> <span class="p">{</span> <span class="n">x</span><span class="o">:</span> <span class="kt">i32</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="kt">i32</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">Write</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ChangeColor</span><span class="p">(</span><span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enum method</span>
</span><span class='line'><span class="k">impl</span> <span class="n">Message</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">call</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">q</span> <span class="o">=</span> <span class="n">Message</span><span class="o">::</span><span class="n">Quit</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Message</span><span class="o">::</span><span class="n">Move</span> <span class="p">{</span> <span class="n">x</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="mi">24</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">w</span> <span class="o">=</span> <span class="n">Message</span><span class="o">::</span><span class="n">Write</span><span class="p">(</span><span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Message</span><span class="o">::</span><span class="n">ChangeColor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">c</span><span class="p">.</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Option Enum</h3>

<ul>
<li>定义于标准库中，在 Prelude(预导入模块)中</li>
<li>描述了: 某个值可能存在(某种类型)或不存在的情况</li>
<li>Rust 没有 Null，有类似 Null 概念的枚举 <code>Option&lt;T&gt;</code>

<ul>
<li>其包含在 Prelude 中可以直接使用</li>
<li><code>Option&lt;T&gt;</code>、<code>Some&lt;T&gt;</code>、<code>None</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 标准库中的定义</span>
</span><span class='line'><span class="k">enum</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Some</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">None</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">some_num</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">some_str</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">absent_num</span><span class="o">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nb">None</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Union</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">union</span> <span class="n">U</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">u</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="n">v</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Ownership, Borrowing]]></title>
    <link href="http://away0x.github.io/blog/2021/10/02/rust-ownership-borrowing/"/>
    <updated>2021-10-02T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/02/rust-ownership-borrowing</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#Ownership">Ownership</a></li>
<li><a href="#Borrowing">Borrowing</a></li>
</ul>


<h2><h2 id="Ownership">Ownership</h2></h2>

<blockquote><p>所有权是 Rust 最独特的特性，它让 Rust 无需 GC 就可以保证内存安全</p></blockquote>

<ul>
<li>所有程序在运行时都必须管理它们使用计算机内存的方式

<ul>
<li>有些语言有垃圾收集机制，在程序运行时，它们会不断的寻找不再使用的内存</li>
<li>而有些语言中，程序员必须显式地分配和释放内存</li>
<li>Rust 则时通过所有权系统来管理，其中包含一组编译器在编译时检查的规则, 当程序运行时，所有权特性不会减慢程序的运行速度 (因为 Rust 把内存管理相关的工作都提前到了编译时)</li>
</ul>
</li>
</ul>


<h3>Stack vs Heap</h3>

<p>在 Rust 这样的系统级编程语言来说，一个值是在 stack 上还是在 heap 上对语言的行为和你为什么要做某些决定是由很大的影响的</p>

<ul>
<li>Stack 会按值的接收顺序来存储，按相反的顺序将它们移除 (后进先出, LIFO)

<ul>
<li>添加数据(压入栈)，移除数据(弹出栈)</li>
<li><strong>所有存储在 Stack 上的数据必须拥有已知的固定的大小</strong></li>
</ul>
</li>
<li>编译时大小未知的数据或运行时大小可能发生改变的数据必须放在 heap 上</li>
</ul>


<h4>存储数据</h4>

<ul>
<li>Heap 对内存的组织性差一些

<ul>
<li>当把数据放入 heap 时，会请求一定数量的空间</li>
<li>操作系统在 heap 里找到一块足够大的空间，把它标记在用，并返沪一个指针，也就是这个空间的地址 (这个过程叫做在 heap 上进行<strong>分配</strong>)</li>
</ul>
</li>
<li>把值压到 stack 上不叫分配</li>
<li>因为指针是已知固定大小, 可以把指针存放在 stack 上

<ul>
<li>但如果想要实际数据，必须使用指针来定位</li>
</ul>
</li>
<li>把数据压到 stack 上要比 heap 上分配快得多 (因为操作系统不需要寻找用来存储新数据的空间，那个位置永远都在 stack 的顶端)</li>
<li>在 heap 上分配空间需要更多的工作 (操作系统首先需要找到一个足够大的空间来存放数据，然后要做好记录方便下次分配)</li>
</ul>


<h4>访问数据</h4>

<ul>
<li>访问 heap 中的数据要比访问 stack 中的数据慢，因为需要通过指针才能找到 heap 中的数据

<ul>
<li>对于现代处理器来说，由于缓存的缘故，如果指令在内存中跳转的次数越少，那么速度就越快</li>
</ul>
</li>
<li>如果数据存放的距离比较近，那么处理器的处理速度就会更快一些 (stack 上)</li>
<li>如果数据之间的距离比较远，那么处理速度就会慢一些 (heap 上)

<ul>
<li>在 heap 上分配大量的空间也是需要时间的</li>
</ul>
</li>
</ul>


<h4>函数调用</h4>

<p>当代码调用函数时，值被传入函数(也包括指向 heap 的指针). 函数本地的变量被压到 stack 上. 当函数结束后，这些值会从 stack 上弹出</p>

<h3>所有权解决的问题</h3>

<blockquote><p>管理 heap 数据是所有权存在的原因</p></blockquote>

<ol>
<li>跟踪代码的哪些部分正在使用 heap 的哪些数据</li>
<li>最小化 heap 上的重复数据量</li>
<li>清理 heap 上未使用的数据以避免空间不足</li>
</ol>


<h3>所有权规则 (保证单一所有权)</h3>

<ul>
<li>每个值都有一个变量，这个变量是该值的所有者</li>
<li>每个值同时只能有一个所有者 (Move 语义)</li>
<li>当所有者超出作用域 (scope) 时，该值将被删除</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// s 不可用</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;s&quot;</span><span class="p">;</span> <span class="c1">// s 可用</span>
</span><span class='line'>    <span class="c1">// s 可用</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// s 作用域结束，s 不可用</span>
</span></code></pre></td></tr></table></div></figure>


<h4>从 String 类型了解所有权</h4>

<ul>
<li>String 比那些标量类型更复杂</li>
<li>字符串字面值: 程序里手写的那些字符串值，它们是不可变的 (<code>&amp;str</code> 类型)</li>
<li>Rust 还有第二种字符串类型: String

<ul>
<li>在 heap 上分配，能够存储在编译时未知数量的文本</li>
</ul>
</li>
<li>String 类型的值是可以修改的，而字符串字面值却不能修改

<ul>
<li>这是因为它们处理内存的方式不同</li>
<li>字符串字面值，在编译时就知道它的内容，其文本内容直接被硬编码到最终的可执行文件里 (速度快，高效是因为其不可变)</li>
<li>String 类型，为了支持可变性，需要在 heap 上分配内存来保存编译时未知的大小内容

<ol>
<li>操作系统必须在运行时来请求数据 (通过调用 <code>String::from</code> 实现)</li>
<li>当用完 String 后，需要使用某种方式将内存返回给操作系统

<ul>
<li>在拥有 GC 的语言中，GC 会跟踪并清理不再使用的内存</li>
<li>没有 GC 就需要我们去识别内存何时不再使用，并调用代码将它返回

<ul>
<li>如忘了，就会浪费内存</li>
<li>如提前做了，变量就会非法</li>
<li>如果做了两次，也是 bug，必须一次分配对应一次释放</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>Rust 采用了不同的内存管理方式: 对于某个值来说，当拥有它的变量走出作用域范围时，内存会立即自动的交还给操作系统

<ul>
<li>离开作用域时，Rust 会调用该变量的 drop 方法，释放内存</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;s&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">s</span><span class="p">.</span><span class="n">push_str</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// s 离开作用域，调用 drop 函数释放内存，之后将不可用</span>
</span></code></pre></td></tr></table></div></figure>


<h4>变量和数据交互的方式: Move</h4>

<ul>
<li>多个变量可以与同一个数据使用一种独特的方式来交互</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 整数是已知固定大小的简单的值，这两个 5 被压到 stack 中</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// 复制了一个 5，压入栈</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// String 类型由三部分组成:</span>
</span><span class='line'><span class="c1">// 1. 指向存放字符串内容的内存的指针</span>
</span><span class='line'><span class="c1">// 2. 长度 len (存放字符串内容所需的字节数)</span>
</span><span class='line'><span class="c1">// 3. 容量 capacity (String 从操作系统总共获得内存的总字节数)</span>
</span><span class='line'><span class="c1">// 上面这些内容放在 stack 中</span>
</span><span class='line'><span class="c1">// 存放字符串内容的部分在 heap 上</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;s&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s1</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 其他语言的做法</span>
</span><span class='line'><span class="c1">// 当把 s1 赋值给 s2 时，String 在 stack 中存储的东西就被复制了一份给 s2 了</span>
</span><span class='line'><span class="c1">// 但是 heap 的内容不复制，所以 s1 s2 的指针所指向的 heap 内存是一样的</span>
</span><span class='line'><span class="c1">// 当变量离开作用域时，Rust 会自动调用 drop 函数，并将变量使用的 heap 内存释放</span>
</span><span class='line'><span class="c1">// **当 s1 s2 离开作用域时，它们都会尝试释放相同的内存**</span>
</span><span class='line'><span class="c1">//  - 这会引起二次释放的 bug (double free)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>所以为了避免以上其他语言会发生的问题，保证内存安全:

<ul>
<li>Rust 没有尝试复制被分配的内存</li>
<li>s1 赋值给 s2 时，Rust 让 s1 失效

<ul>
<li>当 s1 离开作用域时，Rust 不需要释放任何东西了 (不会发生其他语言的那种二次释放的 bug 了)</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;s&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s1</span><span class="p">;</span> <span class="c1">// s1 失效了，move 给了 s2</span>
</span><span class='line'>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span> <span class="c1">// s1 不可用, 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>一般将复制指针、长度、容量视为浅拷贝，但由于 Rust 让 s1 失效了，所以使用 Move 来称呼这个行为</li>
</ul>


<h4>变量和数据交互的方式: Clone</h4>

<ul>
<li>如果真的想对 heap 上的数据进行深拷贝，而不仅仅是拷贝 stack 上的数据，可以使用 <strong>clone</strong> 方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;s&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s1</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{} {}&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">);</span> <span class="c1">// ok</span>
</span></code></pre></td></tr></table></div></figure>


<h4>变量和数据交互的方式: Copy</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 已知大小的数据会存放在 stack 中，它们这样的操作是 copy 行为，会将 stack 上的数据 copy 一份</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// 复制了一个 5，压入栈</span>
</span><span class='line'>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{} {}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span> <span class="c1">// ok</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Copy trait: 可以用于像整数这样完全存放在 stack 上面的类型</li>
<li>如果一个类型实现了 Copy trait，那么旧的变量在赋值后仍然可用</li>
<li>如果一个类型或者该类型的一部分实现了 Drop trait，那么 Rust 不允许让它再去实现 Copy trait 了</li>
</ul>


<h5>一些拥有 Copy trait 的类型</h5>

<ul>
<li>任何简单标量的组合类型都是可 Copy 的</li>
<li>任何需要分配内存或者某种资源的都不是可 Copy 的</li>
<li>一些拥有 Copy trait 的类型

<ul>
<li>所有的整数类型，例如 u32</li>
<li>所有的浮点类型，例如 f64</li>
<li>bool</li>
<li>char</li>
<li>Tuple，如果其拥有的所有字段都是可 Copy 的

<ul>
<li><code>(i32, i32)</code> 是 Copy</li>
<li><code>(i32, String)</code> 不是 Copy</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>所有权与函数</h4>

<ul>
<li>在语义上，将值传递给函数和把值赋值给变量是类似的

<ul>
<li>将值传递给函数将发生移动或复制</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">take_ownership</span><span class="p">(</span><span class="n">s</span><span class="p">);</span> <span class="c1">// s move 到了函数中</span>
</span><span class='line'>    <span class="c1">// s 不可用</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">make_copy</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="c1">// x copy 到了函数中</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;x: {}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span> <span class="c1">// x 还是可用</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">make_ownership</span><span class="p">(</span><span class="n">some_str</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">some_str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">make_copy</span><span class="p">(</span><span class="n">some_num</span><span class="o">:</span> <span class="kt">i32</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">some_num</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数在返回值的过程中同样也会发生所有权的转移</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">gives_ownership</span><span class="p">();</span> <span class="c1">// 函数里面的返回值 move 给了 s1</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">takes_and_gives_back</span><span class="p">(</span><span class="n">s2</span><span class="p">);</span> <span class="c1">// s2 move 进了函数，又 move 给了 s3</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">gives_ownership</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">some_str</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">some_str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">takes_and_gives_back</span><span class="p">(</span><span class="n">a</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>一个变量的所有权总是遵循同样的模式

<ul>
<li>把一个值赋给其他变量时就会发生移动</li>
<li>当一个包含 heap 数据的变量离开作用域时，它的值就会被 drop 函数清理，除非数据的所有权移动到另一个变量上</li>
</ul>
</li>
</ul>


<h2><h2 id="Borrowing">Borrowing</h2></h2>

<ul>
<li><code>&amp;</code> 符号表示引用，允许你引用某些值而不取得其所有权</li>
<li>引用作为函数参数的行为叫做借用

<ul>
<li>和变量一样，引用默认是不可变的</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">calc_len</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s1</span><span class="p">);</span> <span class="c1">// 将 s1 的引用传入了函数，没有发生所有权的转移</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}, {}&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span> <span class="c1">// 由于 s1 所有权没有转移，所以其在该作用域内还是存活的</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">calc_len</span><span class="p">(</span><span class="n">s</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">usize</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// s.push_str(&quot;ss&quot;) // 报错，引用默认是不可变的</span>
</span><span class='line'>    <span class="n">s</span><span class="p">.</span><span class="n">len</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">calc_len</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">s1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">calc_len</span><span class="p">(</span><span class="n">s</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">usize</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">s</span><span class="p">.</span><span class="n">push_str</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">);</span> <span class="c1">// 借用到的是可变引用，可以修改</span>
</span><span class='line'>    <span class="n">s</span><span class="p">.</span><span class="n">len</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>可变引用:</h3>

<ul>
<li><strong>限制1: 在特定作用域内，对某一块数据，只能有一个可变的引用</strong>

<ul>
<li>好处: 编译时就可以防止数据竞争</li>
<li>在一个作用域内，仅允许一个活跃的可变引用。所谓活跃，就是真正被使用来修改数据的可变引用，如果只是定义了，却没有使用或者当作只读引用使用，不算活跃</li>
</ul>
</li>
<li>以下三种情况会发生数据竞争 (这些数据竞争的情况，运行时是很难发现的，所以 Rust 在设计上避免了这种情况)

<ol>
<li>两个或多个指针同时访问同一个数据</li>
<li>至少有一个指针用于写入数据</li>
<li>没有使用任何机制来同步对数据的访问</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 可以通过创建新的作用域，来允许非同时的创建多个可变引用</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>限制2: 可变引用（写）和只读引用（读）是互斥的关系，就像并发下数据的读写互斥那样</strong>

<ul>
<li>只有多个不可变的引用是可以的</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">r1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">r2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">;</span> <span class="c1">// 不可以，当前作用域已经有不可变引用了</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="k">mut</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">last</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">last</span><span class="p">();</span> <span class="c1">// 访问不可变引用</span>
</span><span class='line'>  <span class="n">arr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 访问可变引用</span>
</span><span class='line'>  <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;last: {:?}&quot;</span><span class="p">,</span> <span class="n">last</span><span class="p">);</span> <span class="c1">// 访问不可变引用 (报错), 此时之前的可变引用</span>
</span><span class='line'>  <span class="c1">// 该例中可变不可变相互纠缠, 相互交叉, 破坏了互斥原则, 所以报错</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 修改为下</span>
</span><span class='line'><span class="c1">// 不可变和可变引用的界限分明了, 编译通过</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="k">mut</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">last</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">last</span><span class="p">();</span> <span class="c1">// 访问不可变引用</span>
</span><span class='line'>  <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;last: {:?}&quot;</span><span class="p">,</span> <span class="n">last</span><span class="p">);</span> <span class="c1">// 访问不可变引用, print &quot;last: Some(3)&quot;</span>
</span><span class='line'>  <span class="c1">// 不可变引用访问结束, 此时再访问可变引用, 就不冲突了</span>
</span><span class='line'>  <span class="n">arr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 访问可变引用</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">data</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">data1</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span> <span class="c1">// 访问了 data 的不可变引用</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;data[0]: {:p}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="mi">100</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 如果继续添加元素，堆上的数据预留的空间不够了，就会重新分配一片足够大的内存，</span>
</span><span class='line'>        <span class="c1">// 把之前的值拷过来，然后释放旧的内存。</span>
</span><span class='line'>        <span class="c1">// 这样就会让 data1 中保存的 &amp;data[0] 引用失效，导致内存安全问题</span>
</span><span class='line'>        <span class="n">data</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// 访问了 data 的可变引用</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;data[0]: {:p}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;boxed: {:p}&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data1</span><span class="p">);</span> <span class="c1">// 访问了 data 的不可变引用 (和可变引用互斥了, 报错)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>悬垂引用 Dangling References</h3>

<blockquote><p>一个指针引用了内存中的某个地址，而这块内存可能已经释放并分配给其他人使用了</p></blockquote>

<ul>
<li>Rust 里，编译器可以保证引用永远都不是悬空引用

<ul>
<li>如果引用了某些数据，编译器将保证在引用离开作用域之前数据不会离开作用域</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">dangle</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">s</span> <span class="c1">// 报错, 离开作用域 s 被销毁了，s 的引用会指向一个已经被释放的空间，所以编译器不允许返回 &amp;s</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>引用的规则总结</h3>

<ul>
<li>在任何给定的时刻，只能满足以下条件之一

<ol>
<li>一个可变的引用</li>
<li>任意数量不可变的引用</li>
</ol>
</li>
<li>引用必须一直有效</li>
<li>引用和指针的主要区别

<ol>
<li>引用不可为空</li>
<li>拥有生命周期</li>
<li>受借用检查器保护不会发生悬垂指针等问题</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust - Install, Basic]]></title>
    <link href="http://away0x.github.io/blog/2021/10/01/rust-install-basic/"/>
    <updated>2021-10-01T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/01/rust-install-basic</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#install">Install</a></li>
<li><a href="#basic">Basic</a></li>
</ul>


<h2><h2 id="install">Install</h2></h2>

<blockquote><p>如安装困难, 可参考 <a href="https://rsproxy.cn/">https://rsproxy.cn/</a> 配置 proxy</p></blockquote>

<h3>rustup</h3>

<blockquote><p>Rust 安装和管理工具</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 安装 rustup</span>
</span><span class='line'>curl --proto <span class="s1">&#39;=https&#39;</span> --tlsv1.2 https://sh.rustup.rs -sSf <span class="p">|</span> sh
</span><span class='line'><span class="c"># 验证是否安装成功</span>
</span><span class='line'>rustc --version
</span><span class='line'><span class="c"># 更新 rust 版本</span>
</span><span class='line'>rustup update
</span><span class='line'><span class="c"># 更新 rustup</span>
</span><span class='line'>rustup self update
</span><span class='line'><span class="c"># 卸载 rust</span>
</span><span class='line'>rustup self uninstall
</span><span class='line'><span class="c"># 打开本地 rust 文档</span>
</span><span class='line'>rustup doc
</span></code></pre></td></tr></table></div></figure>


<h3>cargo</h3>

<blockquote><p>Rust 的 package 管理工具</p></blockquote>

<ul>
<li><a href="https://doc.rust-lang.org/cargo/index.html">Cargo book</a></li>
<li><a href="https://crates.io/">crates.io</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cargo --version
</span><span class='line'><span class="c"># 创建项目</span>
</span><span class='line'><span class="c"># --lib 库项目</span>
</span><span class='line'><span class="c"># --vcs=git 指定版本控制工具</span>
</span><span class='line'>cargo new demo
</span><span class='line'><span class="c"># 编译, --release 发布时编译</span>
</span><span class='line'>cargo build
</span><span class='line'><span class="c"># 清除 cargo 构建文件</span>
</span><span class='line'>cargo clean
</span><span class='line'><span class="c"># 检查代码 (不生成可执行文件)</span>
</span><span class='line'>cargo check
</span><span class='line'><span class="c"># 编译并运行</span>
</span><span class='line'>cargo run
</span><span class='line'><span class="c"># 安装二进制文件</span>
</span><span class='line'>cargo install &lt;crate-name&gt; <span class="c"># 会安装到 ～/.cargo/bin</span>
</span><span class='line'>cargo install --force &lt;crate-name&gt; <span class="c"># 重新安装</span>
</span><span class='line'><span class="c"># 生成文档并打开</span>
</span><span class='line'>cargo doc --open
</span><span class='line'><span class="c"># 发布 crate</span>
</span><span class='line'>cargo publish
</span><span class='line'>cargo yank <span class="c"># 撤回版本</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cargo 常用的第三方插件, 需要 cargo install 这些插件才可运行</span>
</span><span class='line'><span class="c"># 自动修复 warning</span>
</span><span class='line'>cargo fix
</span><span class='line'><span class="c"># 添加项目依赖</span>
</span><span class='line'>cargo add
</span><span class='line'><span class="c"># 审核项目依赖是否有漏洞风险</span>
</span><span class='line'>cargo audit
</span><span class='line'><span class="c"># lint 工具</span>
</span><span class='line'>cargo clippy
</span><span class='line'><span class="c"># 格式化代码</span>
</span><span class='line'>cargo fmt
</span><span class='line'><span class="c"># 可展开宏代码, 方便调试</span>
</span><span class='line'>cargo expand
</span></code></pre></td></tr></table></div></figure>


<h2><h2 id="basic">Basic</h2></h2>

<ul>
<li>Rust 语言学习的难点

<ol>
<li>所有权机制</li>
<li>借用和生命周期</li>
<li>类型系统与 trait</li>
<li>突破抽象范式</li>
<li>Unsafe Rust</li>
</ol>
</li>
<li>Rust 语言的内存安全方案针对的是 C 语言的不足

<ol>
<li>禁止对空指针和悬垂指针进行解引用</li>
<li>读取未初始化的内存</li>
<li>缓冲区溢出</li>
<li>非法释放已经释放或未分配的指针</li>
</ol>
</li>
<li>Rust 可安全且无缝地沟通 C 语言

<ol>
<li>通过 C-ABI 零成本和 C 语言打交道</li>
<li>划分了 Safe Rust 和 Unsafe RUst</li>
</ol>
</li>
<li>函数和变量名使用 snake case 命名规范</li>
<li>trait、struct 使用 camel case 命名规范</li>
</ul>


<h3>注释</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 单行注释</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">    多行注释</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c-Doc">//! 这是一个模块级别的文档注释</span>
</span><span class='line'>
</span><span class='line'><span class="c-Doc">/// 这是一个函数的文档注释 (可使用 markdown 语法)</span>
</span><span class='line'><span class="c-Doc">/// 可以使用 cargo doc --open 生成文档</span>
</span><span class='line'><span class="c-Doc">/// </span>
</span><span class='line'><span class="c-Doc">/// # Examples</span>
</span><span class='line'><span class="c-Doc">/// ```</span>
</span><span class='line'><span class="c-Doc">/// // 编写一些示例 (运行 cargo test 的时候，会把示例的代码作为测试来运行)</span>
</span><span class='line'><span class="c-Doc">/// let arg = 5;</span>
</span><span class='line'><span class="c-Doc">/// let answer = add_one(arg);</span>
</span><span class='line'><span class="c-Doc">/// assert_eq!(6, answer);</span>
</span><span class='line'><span class="c-Doc">/// ```</span>
</span><span class='line'><span class="c-Doc">/// </span>
</span><span class='line'><span class="c-Doc">/// # Panics</span>
</span><span class='line'><span class="c-Doc">/// 说明函数可能发生 panic 的场景</span>
</span><span class='line'><span class="c-Doc">/// </span>
</span><span class='line'><span class="c-Doc">/// # Errors</span>
</span><span class='line'><span class="c-Doc">/// 如果函数返回 Result，描述可能的错误种类，以及可导致错误的条件</span>
</span><span class='line'><span class="c-Doc">/// </span>
</span><span class='line'><span class="c-Doc">/// # Safety</span>
</span><span class='line'><span class="c-Doc">/// 如果函数处于 unsafe 调用，就应该解释 unsafe 的原因，以及调用者确保的使用前提</span>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">add_one</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="kt">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">i32</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Print</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// print!、println!、eprint!、eprintln!</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{0}, this is {1}. {1}, this is {0}&quot;</span><span class="p">,</span> <span class="s">&quot;Alice&quot;</span><span class="p">,</span> <span class="s">&quot;Bob&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{a} {b} {c}&quot;</span><span class="p">,</span> <span class="n">a</span><span class="o">=</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Variable</h3>

<ul>
<li>使用 let 声明变量，默认情况下变量是 Immutable 的</li>
<li>声明变量时，加上 mut，就可是变量可变</li>
<li>Shadowing

<ul>
<li>可以使用相同的名字声明新的变量，新的变量会 shadow 之前声明的同名变量</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span><span class="o">:</span> <span class="kt">u32</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// 在栈上分配一个类型为 u32 的变量, 变量名为 x</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="c1">// Error: cannot assign twice to immutable variable</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="c1">// OK</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="s">&quot;y&quot;</span><span class="p">;</span> <span class="c1">// 类型错误</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// shadow</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;x&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 解构</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="k">mut</span> <span class="n">a</span><span class="p">,</span> <span class="k">mut</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">Point</span> <span class="p">{</span> <span class="n">x</span><span class="o">:</span> <span class="k">ref</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">ref</span> <span class="n">b</span> <span class="p">}</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Constant</h3>

<ul>
<li>常量在绑定值后也是不可变的，但是它和不可变的变量有很多区别:

<ol>
<li>不可以使用 mut, 常量永远都是不可变的</li>
<li>声明常量使用 const 关键字，类型必须得被标注</li>
<li>常量可以在任何作用域内声明，包括全局作用域</li>
<li>常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行是才能计算出的值</li>
</ol>
</li>
<li>程序运行期间，常量在其声明的作用域内一直有效</li>
<li>命名规范: 使用全大写字母，单词之间用下划线分隔</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kr">const</span> <span class="n">MAX_POINTS</span><span class="o">:</span> <span class="kt">u32</span> <span class="o">=</span> <span class="mi">100_1000</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Static Variable</h3>

<ul>
<li>与常量的区别

<ol>
<li>静态变量有固定的内存地址, 使用它的值总会访问同样的数据</li>
<li>常量允许使用它们的时候对数据进行复制</li>
<li>静态变量: 可以是可变的, 访问和修改静态可变变量是不安全的 (unsafe)</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 全局变量</span>
</span><span class='line'><span class="c1">// 声明时必须初始化，且初始化必须为编译期可确定的常量</span>
</span><span class='line'><span class="c1">// 全局变量读写时需要用 unsafe 修饰</span>
</span><span class='line'><span class="k">static</span> <span class="n">GLOBAL</span><span class="o">:</span> <span class="kt">i32</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 生命周期(&#39;static)为整个程序运行期间</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 使用静态变量时, 由于一些限制, 可以使用 lazy_static 工具</span>
</span><span class='line'><span class="c1">// https://github.com/rust-lang-nursery/lazy-static.rs</span>
</span><span class='line'><span class="k">static</span> <span class="n">MAP</span><span class="o">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span> <span class="c1">// 无法编译通过, 需要用 lazy_static</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">lazy_static</span><span class="o">::</span><span class="n">lazy_static</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::</span><span class="n">HashMap</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">sync</span><span class="o">::</span><span class="p">{</span><span class="n">Arc</span><span class="p">,</span> <span class="n">Mutex</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">lazy_static</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">ref</span> <span class="n">HASHMAP</span><span class="o">:</span> <span class="n">Arc</span><span class="o">&lt;</span><span class="n">Mutex</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="kt">u32</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">&#39;static</span> <span class="kt">str</span><span class="o">&gt;&gt;&gt;</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">m</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>        <span class="n">m</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">m</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">m</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;baz&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Arc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Mutex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">m</span><span class="p">))</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="n">HASHMAP</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">map</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;waz&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;map: {:?}&quot;</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Types</h3>

<ul>
<li>Rust 是静态编译语言，在编译时必须知道所有变量的类型

<ul>
<li>基于使用的值，编译器通常能够推断出它的具体类型</li>
<li>但如果可能的类型比较多(例如把 String 转为整数的 parse 方法)，就必须添加类型标注，否则编译会报错</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">guess</span><span class="o">:</span> <span class="kt">u32</span> <span class="o">=</span> <span class="s">&quot;42&quot;</span><span class="p">.</span><span class="n">parse</span><span class="p">().</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;Not a number&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>标量类型</h4>

<ul>
<li>一个标量类型代表一个单个的值</li>
</ul>


<h5>整数类型</h5>

<ul>
<li>整数类型没有小数部分

<ul>
<li>例如 u32 就是一个无符号的整数类型，占据 32 位的空间</li>
</ul>
</li>
<li>无符号整数类型以 u 开头</li>
<li>有符号整数类型以 i 开头</li>
</ul>


<table>
<thead>
<tr>
<th> Length </th>
<th> Signed </th>
<th> Unsigned </th>
</tr>
</thead>
<tbody>
<tr>
<td> 8-bit </td>
<td> i8 </td>
<td> u8 </td>
</tr>
<tr>
<td> 16-bit </td>
<td> i16 </td>
<td> u16 </td>
</tr>
<tr>
<td> 32-bit </td>
<td> i32 </td>
<td> u32 </td>
</tr>
<tr>
<td> 64-bit </td>
<td> i64 </td>
<td> u64 </td>
</tr>
<tr>
<td> 128-bit </td>
<td> i128 </td>
<td> u128 </td>
</tr>
<tr>
<td> arch </td>
<td> isize </td>
<td> usize </td>
</tr>
</tbody>
</table>


<ul>
<li>isize 和 usize 类型的位数由程序运行的计算机的架构决定

<ul>
<li>64 位计算机，那就是 64 位的</li>
</ul>
</li>
<li>使用 isize/usize 的主要场景是对某种集合进行索引操作</li>
</ul>


<h6>整数字面值</h6>

<ul>
<li>除了 byte 类型外，所有的数值字面值都允许使用类型后缀

<ul>
<li>例如: <code>57u8</code></li>
</ul>
</li>
<li>整数的默认类型就是 <strong>i32</strong></li>
</ul>


<table>
<thead>
<tr>
<th> Number Literals </th>
<th> Example </th>
</tr>
</thead>
<tbody>
<tr>
<td> Decimal </td>
<td> <code>98_222</code> </td>
</tr>
<tr>
<td> Hex </td>
<td> <code>0xff</code> </td>
</tr>
<tr>
<td> Octal </td>
<td> <code>0077</code> </td>
</tr>
<tr>
<td> Binary </td>
<td> <code>0b1111_0000</code> </td>
</tr>
<tr>
<td> Byte(u8 only) </td>
<td> <code>b'A'</code> </td>
</tr>
</tbody>
</table>


<h6>整数溢出</h6>

<ul>
<li>u8 范围是 0-255，如把 u8 变量的值设置为 256，那么:

<ol>
<li>调试模式下编译: Rust 会检查整数溢出，如发生, 程序运行时会 panic</li>
<li>release 模式下编译: Rust 不会检查可能导致 panic 的整数溢出，如溢出发生，会执行 &ldquo;环绕操作&rdquo;

<ul>
<li>256 变成 0，257 变成 1 &hellip;</li>
<li>但程序不会 panic</li>
</ul>
</li>
</ol>
</li>
</ul>


<h5>浮点类型</h5>

<ul>
<li><strong>f32</strong>: 32 位，单精度</li>
<li><strong>f64</strong>: 64 位，双精度</li>
<li>f64 是默认类型，因为现代 CPU 上 f64 和 f32 速度差不多，而且精度更高</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span> <span class="c1">// f64</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span><span class="o">:</span> <span class="kt">f32</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">;</span> <span class="c1">// f32</span>
</span></code></pre></td></tr></table></div></figure>


<h6>数值操作</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">3.2</span> <span class="o">-</span> <span class="mf">2.1</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">30</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">e</span> <span class="o">=</span> <span class="mi">54</span> <span class="o">%</span> <span class="mi">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>字符类型 char</h5>

<ul>
<li>Rust 语言中 char 类型被用来描述语言中最基础的单个字符</li>
<li>字符类型的字面值使用单引号</li>
<li>占用 4 字节大小</li>
<li>是 Unicode 标量值，可以表示比 ASCII 多得多的字符内容: 拼音、中日韩文、零长度空白字符、emoji 表情&hellip;

<ul>
<li>Unicode 中并没字符的概念，所以直觉上认为的字符也许和 Rust 中的概念并不相符</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span><span class="o">:</span> <span class="n">char</span> <span class="o">=</span> <span class="sc">&#39;『&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">z</span> <span class="o">=</span> <span class="err">&#39;😄&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">char</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">tao</span> <span class="o">=</span> <span class="sc">&#39;道&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">tao_u32</span> <span class="o">=</span> <span class="n">tao</span> <span class="k">as</span> <span class="kt">u32</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">36947</span><span class="p">,</span> <span class="n">tao_u32</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;U+{:x}&quot;</span><span class="p">,</span> <span class="n">tao_u32</span><span class="p">);</span> <span class="c1">// U+9053</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">tao</span><span class="p">.</span><span class="n">escape_unicode</span><span class="p">());</span> <span class="c1">// \u{9053}</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">char</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="mi">65</span><span class="p">),</span> <span class="sc">&#39;A&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">char</span><span class="o">::</span><span class="n">from_u32</span><span class="p">(</span><span class="mh">0x9053</span><span class="p">),</span> <span class="nb">Some</span><span class="p">(</span><span class="sc">&#39;道&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">char</span><span class="o">::</span><span class="n">from_u32</span><span class="p">(</span><span class="mi">36947</span><span class="p">),</span> <span class="nb">Some</span><span class="p">(</span><span class="sc">&#39;道&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">char</span><span class="o">::</span><span class="n">from_u32</span><span class="p">(</span><span class="mi">129010101</span><span class="p">),</span> <span class="nb">None</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>布尔类型</h5>

<ul>
<li>true/false</li>
<li>可转换为数字类型，反之不可</li>
</ul>


<h4>复合类型</h4>

<ul>
<li>复合类型可以将多个值放在一个类型里</li>
<li>Rust 提供了两种基础的复合类型: 元组(Tuple)、数组</li>
</ul>


<h5>Tuple</h5>

<ul>
<li>可以将多个类型的多个值放在一个类型里面，每个位置的类型不必相同</li>
<li>长度是固定的，一旦声明就无法更改 (不同长度的元组是不同类型)</li>
<li>其是 Rust 中唯一可异构的序列</li>
<li>单元类型的唯一实例等价于空元组</li>
<li>当元组只有一个元素的时候，要在元素末尾加逗号分隔，这是为了方便和括号操作符区分开来</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">tup</span><span class="o">:</span> <span class="p">(</span><span class="kt">i32</span><span class="p">,</span> <span class="kt">f64</span><span class="p">,</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mf">6.4</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{} {} {}&quot;</span><span class="p">,</span> <span class="n">tup</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">tup</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="n">tup</span><span class="p">.</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 使用模式匹配结构 tuple</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="n">tup</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Empty Tuple (Unit 类型)</span>
</span><span class='line'><span class="kd">let</span> <span class="n">empty</span><span class="o">:</span> <span class="p">()</span> <span class="o">=</span> <span class="p">();</span> <span class="c1">// 空元组占用 0 内存空间</span>
</span></code></pre></td></tr></table></div></figure>


<h5>数组</h5>

<ul>
<li>可以将多个类型的多个值放在一个类型里面，每个位置的类型必须相同</li>
<li>长度是固定的，一旦声明就无法更改

<ul>
<li><code>[T;2]</code> 和 <code>[T;3]</code> 是不同的类型</li>
</ul>
</li>
<li>如想让数据存放在 stack 上而不是 heap 上，或者想保证有固定数量的元素，这时使用数组更有好处

<ul>
<li>数组是在 stack 上分配的单个块的内存</li>
</ul>
</li>
<li>数组没有 Vector 灵活</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 数组的类型 [类型; 长度]</span>
</span><span class='line'><span class="kd">let</span> <span class="n">b</span><span class="o">:</span> <span class="p">[</span><span class="kt">u32</span><span class="p">;</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果数组中每个元素值都相同可以这样声明</span>
</span><span class='line'><span class="kd">let</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">;</span> <span class="mi">5</span><span class="p">];</span> <span class="c1">// 相当于 let c = [3, 3, 3, 3, 3];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 访问数组元素</span>
</span><span class='line'><span class="c1">// - 如果索引超出数组范围，编译会报错</span>
</span><span class='line'><span class="c1">// - 如果索引是动态的，那么编译会通过，运行时会报错</span>
</span><span class='line'><span class="kd">let</span> <span class="n">d</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>指针类型</h4>

<ul>
<li>Rust 包含了三种指针类型

<ol>
<li>原始指针: <code>*const T</code>, <code>*mut T</code>

<ul>
<li>等价与 C 语言的指针，他可以为空，一般用于 Unsafe Rust 中</li>
</ul>
</li>
<li>NonNull 指针，他是 Rust 语言建议的 <code>*mut T</code> 指针的替代指针

<ul>
<li>NonNull 指针是非空指针，并且遵循生命周期类型协变规则</li>
</ul>
</li>
<li>函数指针 <code>fn</code>，指向代码的指针，非数据，可以使用它直接调用函数</li>
</ol>
</li>
</ul>


<h4>智能指针</h4>

<table>
<thead>
<tr>
<th> 类型名 </th>
<th> 简介 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>Box&lt;T&gt;</code> </td>
<td> 指向类型 T 的、具有所有权的指针，有权释放内存 </td>
</tr>
<tr>
<td> <code>&amp;T</code> </td>
<td> 指向类型 T 的借用指针、也称为引用，无权释放内存，无权写数据 </td>
</tr>
<tr>
<td> <code>&amp;mut T</code> </td>
<td> 指向类型 T 的 mut 型借用指针，无权释放内存，有权写数据 </td>
</tr>
<tr>
<td> <code>*const T</code> </td>
<td> 指向类型 T 的只读裸指针，没有生命周期信息，无权写数据 </td>
</tr>
<tr>
<td> <code>*mut T</code> </td>
<td> 指向类型 T 的可读写裸指针，没有生命周期信息，有权写数据 </td>
</tr>
<tr>
<td> <code>Rc&lt;T&gt;</code> </td>
<td> 指向类型 T 的引用计数指针，共享所有权，线程不安全 </td>
</tr>
<tr>
<td> <code>Arc&lt;T&gt;</code> </td>
<td> 指向类型 T 的原子引用计数指针，共享所有权，线程安全 </td>
</tr>
<tr>
<td> <code>Cow&lt;'a, T&gt;</code> </td>
<td> Clone-on-write, 写时复制指针。可能是借用指针，也可能是具有所有权的指针 </td>
</tr>
</tbody>
</table>


<h4>Never 类型</h4>

<ul>
<li>名为 <code>!</code> 的特殊类型, 没有任何值, 在不返回值的函数中充当返回类型

<ul>
<li>不返回值的函数也被称为发散函数 (diverging function)</li>
<li>never 可强转为任何其他类型</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">guess</span><span class="o">:</span> <span class="kt">u32</span> <span class="o">=</span> <span class="k">match</span> <span class="n">guess</span><span class="p">.</span><span class="n">trim</span><span class="p">().</span><span class="n">parse</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">num</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// continue 返回 never 类型, never 可强转为任何其他类型,</span>
</span><span class='line'>    <span class="c1">// 所以该分支可以使用 continue 作为 u32 类型</span>
</span><span class='line'>    <span class="nb">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">continue</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">bar</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="o">!</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">loop</span> <span class="p">{}</span> <span class="c1">// 此处永远没有返回值, 所以类型为 never</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">unwrap</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">match</span> <span class="bp">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Some</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">val</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// panic 是 never, 所以可以作为 T 使用</span>
</span><span class='line'>            <span class="nb">None</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;called `Option::unwrap()` on a `None` value&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>特定类型</h4>

<blockquote><p>指专门有特殊用途的类型</p></blockquote>

<ol>
<li><code>PhantomData&lt;T&gt;</code>, 幻影类型

<ul>
<li>一般用于 Unsafe Rust 的安全抽象</li>
</ul>
</li>
<li><code>Pin&lt;T&gt;</code>, 固定类型

<ul>
<li>为了支持异步开发而特意引入，防止被引用的值发生移动的类型</li>
</ul>
</li>
</ol>


<h4>泛型</h4>

<ul>
<li><code>::&lt;T&gt;</code> turbofish 操作符: 用于给泛型函数指定类型, 对于编译器可推断的类型，是可以省略的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">foo</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">),</span> <span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// rust 如果类型推断失败，则需要手工指定类型</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>     <span class="c1">// 等价于 foo::&lt;i32&gt;(1);</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">);</span> <span class="c1">// 等价于 foo::&lt;&amp;&#39;static str&gt;(&quot;abc&quot;);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>类型转换</h4>

<ul>
<li>Rust 不提供原生类型之间的隐式转换，得使用 <code>as</code> 关键字显式转换</li>
<li>相似类型的转换:

<ul>
<li><code>as</code></li>
<li><code>T.into()</code>: 变量需要显式标注类型</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">v1</span><span class="o">:</span> <span class="kt">i8</span> <span class="o">=</span> <span class="mi">41</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">v2</span><span class="o">:</span> <span class="kt">i16</span> <span class="o">=</span> <span class="n">v1</span> <span class="k">as</span> <span class="kt">i16</span><span class="p">;</span> <span class="c1">// 也可 v1.into()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">i</span> <span class="k">as</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">i32</span> <span class="k">as</span> <span class="o">*</span><span class="k">mut</span> <span class="kt">i32</span><span class="p">;</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>类型别名</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">type</span> <span class="n">Age</span> <span class="o">=</span> <span class="kt">u32</span><span class="p">;</span>
</span><span class='line'><span class="k">type</span> <span class="n">Double</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Function</h3>

<h4>表达式</h4>

<ul>
<li>函数体由一系列语句组成，可选的由一个表达式结束</li>
<li><strong>Rust 是一个基于表达式的语言</strong>

<ul>
<li>语句是执行一些动作的指令</li>
<li>表达式会计算产生一个值</li>
</ul>
</li>
<li>语句没有返回值，所以不可以使用 let 将一个语句赋值给一个变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="c1">// 语句</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">6</span><span class="p">);</span> <span class="c1">// 报错</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+</span> <span class="mi">3</span> <span class="c1">// 表达式产生的值 (不加分号, 加分号产生的值位 unit type)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 分号表达式返回值永远为自身的单元 (Unit) 类型: `()`</span>
</span><span class='line'><span class="c1">// 分号表达式只有在块表达式最后一行才会进行求值，其他时候只作为连接符存在</span>
</span><span class='line'><span class="c1">// 块表达式只对其最后一行表达式进行求值</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// -&gt; ()</span>
</span><span class='line'>    <span class="p">;</span> <span class="c1">// 作为连接符</span>
</span><span class='line'>    <span class="p">;</span> <span class="c1">// 作为连接符</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">();</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">std</span><span class="o">:</span><span class="n">vec</span><span class="o">::</span><span class="n">Vec</span><span class="p">;</span> <span class="c1">// 以 ; 结尾，所以该块返回 () 类型</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">();</span>   <span class="c1">// -&gt; ()</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="p">{;};</span> <span class="c1">// 块表达式最后一个分号返回 Unit，与 &amp; 结合产生 &amp;() 类型，该行最后一个分号是连接符</span>
</span><span class='line'>        <span class="p">;</span>
</span><span class='line'>        <span class="p">;</span> <span class="c1">// 作为 main 函数的返回值 ()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 想获取 &amp;() 类型，不能通过 `&amp;;` 产生，因为不符合求值规则，这里的分号是作为连接符存在的</span>
</span><span class='line'><span class="c1">// 得通过 `&amp;{;}` 分号作为块表达式的结尾才会使分号能够求值，产生 &amp;() 类型</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 声明函数 (函数的定义也是语句)</span>
</span><span class='line'><span class="k">fn</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">fn</span> <span class="n">test2</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="kt">i32</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="kt">i32</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="n">test2</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回值是函数体里最后一个表达式的值</span>
</span><span class='line'><span class="c1">// 如想提前返回，可以使用 return 关键字，指定一个值</span>
</span><span class='line'><span class="k">fn</span> <span class="n">test3</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="kt">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">i32</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+</span> <span class="mi">5</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">test3</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span> <span class="c1">// 11</span>
</span></code></pre></td></tr></table></div></figure>


<h4>语句</h4>

<ul>
<li>声明语句

<ul>
<li>例如 <code>use std::io;</code> 就是一个声明语句</li>
</ul>
</li>
<li>表达式语句 (用来求值的语句)

<ul>
<li>块中最后一行不加分号的表达式, 其会用于求值并返回</li>
<li>除了基本声明语句外，其余基本都是表达式，<strong>流程控制也是表达式</strong>

<ul>
<li>自变量，路径，数组结构体枚举函数闭包， 方法调用，字段访问操作符&hellip;都是表达式</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">plus_one</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="kt">u32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">u32</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span> <span class="c1">// 不加分号，求值并返回 (如果加了分号，返回的是 Unit Type)</span>
</span><span class='line'>    <span class="c1">// 也可使用 return 进行显示返回, 使用 return 时，末尾加不加分号都会返回表达式的值</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Control Flow</h3>

<h4>if else</h4>

<ul>
<li>if 是表达式，会产生值，if 条件必须得是 bool 类型</li>
<li>如果程序中使用了多于一个的 else if，那么最好使用 match 来重构</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;number is divisible by 4&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;number is divisible by 3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;number is not divisible by 4 or 3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// if 是表达式</span>
</span><span class='line'><span class="kd">let</span> <span class="n">condition</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">number</span> <span class="o">=</span> <span class="k">if</span> <span class="n">condition</span> <span class="p">{</span> <span class="mi">5</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="mi">6</span> <span class="p">};</span> <span class="c1">// 每个分支产生的值，类型必须一致</span>
</span></code></pre></td></tr></table></div></figure>


<h4>loop</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;again!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span> <span class="n">counter</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 作为表达式结果</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;The result is: {}&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span> <span class="c1">// The result is: 20</span>
</span></code></pre></td></tr></table></div></figure>


<h4>while</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="n">number</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>
</span><span class='line'>    <span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>for</h4>

<blockquote><p>for 可以用于任何实现了 IntoIterator trait 的数据结构</p></blockquote>

<p>在执行过程中，IntoIterator 会生成一个迭代器，for 循环不断从迭代器中取值，直到迭代器返回 None 为止。因而，for 循环实际上只是一个语法糖，编译器会将其展开使用 loop 循环对迭代器进行循环访问，直至返回 None</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="n">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;the value is: {}&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">v</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">v</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">enumerate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;index: {}, value: {}&quot;</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>for 搭配 range 使用</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="p">(</span><span class="mf">1.</span><span class="p">.</span><span class="mi">4</span><span class="p">).</span><span class="n">rev</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// rev 倒序循环</span>
</span><span class='line'><span class="c1">// 依次输出 3 2 1</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Function]]></title>
    <link href="http://away0x.github.io/blog/2018/10/07/ruby-function/"/>
    <updated>2018-10-07T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/07/ruby-function</id>
    <content type="html"><![CDATA[<!-- more -->


<p>方法是由对象定义的与该对象相关的操作。在 ruby 中，对象的所有操作都被封装成方法</p>

<ul>
<li><a href="#call">调用</a></li>
<li><a href="#category">分类</a></li>
<li><a href="#define">定义</a></li>
<li><a href="#sr">send &amp; respond_to?</a></li>
</ul>


<h1><h2 id="call">调用</h2></h1>

<ul>
<li>ruby 中，调用方法被称为 &ldquo;向对象发送消息 (message)"，调用结果就是 "对象接收 (receive) 了消息&rdquo;</li>
<li>调用方法时，<code>()</code> 是可以省略的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 1. 简单的方法调用</span>
</span><span class='line'><span class="err">对象</span><span class="o">.</span><span class="err">方法名</span><span class="p">(</span><span class="err">参数</span><span class="mi">1</span><span class="p">,</span> <span class="err">参数</span><span class="mi">2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2. 带块的方法调用 (do ~ end 可替换为 { ~ })</span>
</span><span class='line'><span class="c1">#    - do ~ end 时，可以省略参数列表的 ()；{ ~ } 时，只在无参时才可省略</span>
</span><span class='line'><span class="err">对象</span><span class="o">.</span><span class="err">方法名</span><span class="p">(</span><span class="err">参数</span><span class="mi">1</span><span class="p">,</span> <span class="err">参数</span><span class="mi">2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="err">变量</span><span class="mi">1</span><span class="p">,</span> <span class="err">变量</span><span class="mi">2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.|</span>
</span><span class='line'>    <span class="err">块内容</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3. 运算符形式的方法调用</span>
</span><span class='line'><span class="c1">#    - ruby 中有些方法看起来很像运算符，四则运算等二元运算符，负号等一元运算符</span>
</span><span class='line'><span class="c1">#    - 指定数组、散列的元素下标的 [] 等，实际上都是方法</span>
</span><span class='line'><span class="n">obj</span> <span class="o">+</span> <span class="n">arg1</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=~</span> <span class="n">arg1</span>
</span><span class='line'><span class="o">-</span><span class="n">obj</span>
</span><span class='line'><span class="o">!</span><span class="n">obj</span>
</span><span class='line'><span class="n">obj</span><span class="o">[</span><span class="n">arg1</span><span class="o">]</span>
</span><span class='line'><span class="n">obj</span><span class="o">[</span><span class="n">arg1</span><span class="o">]</span> <span class="o">=</span> <span class="n">arg2</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="category">分类</h2></h1>

<ul>
<li>帮助文档中方法的标记

<ol>
<li>实例方法: <code>Array#each</code></li>
<li>类方法: <code>Array.new</code> 或 <code>Array::new</code></li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 1. 实例方法</span>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2. 类方法</span>
</span><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3. 函数式方法 (没有接收者的)</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="nb">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="define">定义</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="err">方法名</span><span class="p">(</span><span class="err">参数</span><span class="mi">1</span><span class="p">,</span> <span class="err">参数</span><span class="mi">2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 1. 参数默认值 (需放参数列表末尾)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># code ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 2. 返回值 (可以省略 return，方法体内部最后一个表达式的结果即为返回值)</span>
</span><span class='line'><span class="c1"># 无指定返回值的函数默认返回 nil</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">123</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func2</span><span class="p">()</span>
</span><span class='line'>    <span class="mi">123</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span>
</span><span class='line'>        <span class="n">a</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">b</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">max</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># 10</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 3. 定义带块的方法</span>
</span><span class='line'><span class="k">def</span> <span class="nf">myloop</span>
</span><span class='line'>    <span class="k">while</span> <span class="kp">true</span>
</span><span class='line'>        <span class="k">yield</span>  <span class="c1"># 定义块</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 调用方法时通过块传进来的处理会在 yield 定义的地方执行</span>
</span><span class='line'><span class="c1"># yield 可携带参数</span>
</span><span class='line'><span class="n">myloop</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;num is </span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">break</span> <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">*=</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 4. 参数个数不确定的方法</span>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">arg</span><span class="p">,</span> <span class="n">args</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>        <span class="c1"># [1, []]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># [1, [2, 3]]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">foo2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1"># [1, [2, 3, 4], 5]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">foo2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>           <span class="c1"># [1, [], 2]</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 5. 关键字参数 (可指定默认值)</span>
</span><span class='line'><span class="k">def</span> <span class="err">方法名</span><span class="p">(</span><span class="err">参数</span><span class="mi">1</span><span class="p">:</span> <span class="err">参数</span><span class="mi">1</span><span class="err">的值</span><span class="p">,</span> <span class="err">参数</span><span class="mi">2</span><span class="p">:</span> <span class="err">参数</span><span class="mi">2</span><span class="err">的值</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">area</span><span class="p">(</span><span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">xy</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span><span class='line'>    <span class="n">yz</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="n">z</span>
</span><span class='line'>    <span class="n">zx</span> <span class="o">=</span> <span class="n">z</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>    <span class="p">(</span><span class="n">xy</span> <span class="o">+</span> <span class="n">yz</span> <span class="o">+</span> <span class="n">zx</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">area</span><span class="p">(</span><span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span> <span class="c1"># 52</span>
</span><span class='line'><span class="nb">p</span> <span class="n">area</span><span class="p">(</span><span class="ss">z</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># 52 (参数顺序可变)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">area</span><span class="p">(</span><span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>       <span class="c1"># 12 (省略 y)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不需指定默认值时</span>
</span><span class='line'><span class="k">def</span> <span class="nf">volume</span><span class="p">(</span><span class="ss">x</span><span class="p">:,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">z</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">volume</span><span class="p">(</span><span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span> <span class="c1"># 24</span>
</span><span class='line'><span class="nb">p</span> <span class="n">volume</span><span class="p">(</span><span class="ss">y</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span> <span class="c1"># ArgumentError</span>
</span><span class='line'><span class="n">volume</span><span class="p">(</span><span class="ss">foo</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>       <span class="c1"># unknow keyword</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 搜集关键字参数</span>
</span><span class='line'><span class="k">def</span> <span class="nf">meth</span><span class="p">(</span><span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="o">**</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">args</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">meth</span><span class="p">(</span><span class="ss">z</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>       <span class="c1"># [2, 3, 4, {}]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">meth</span><span class="p">(</span><span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">v</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">w</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># [2, 0, 3, {:v=&gt;4, :2=&gt;5}]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 关键字参数与普通参数搭配使用</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 用散列传递参数</span>
</span><span class='line'><span class="k">def</span> <span class="nf">area</span><span class="p">(</span><span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">args1</span> <span class="o">=</span> <span class="p">{</span><span class="ss">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">area</span><span class="p">(</span><span class="n">args1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 6. 把数组分解成参数</span>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>    <span class="c1"># 6</span>
</span><span class='line'>
</span><span class='line'><span class="n">args1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="n">args1</span><span class="p">)</span>  <span class="c1"># 6</span>
</span><span class='line'>
</span><span class='line'><span class="n">args2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">(</span><span class="o">*</span><span class="n">args2</span><span class="p">)</span>     <span class="c1"># 6</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 7. 把散列作为参数传递</span>
</span><span class='line'><span class="c1">#    - 散列作为参数传递给方法时，可省略 {}</span>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="n">arg</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">({</span><span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">})</span> <span class="c1"># {&quot;a&quot;=&gt;1, &quot;b&quot;=&gt;2}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">)</span>   <span class="c1"># {&quot;a&quot;=&gt;1, &quot;b&quot;=&gt;2}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">foo</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>       <span class="c1"># {:a=&gt;1, :b=&gt;2}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#    - 当作为最后一个参数传递时，也可使用这样的写法</span>
</span><span class='line'><span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">bar</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">})</span>  <span class="c1"># [100, {&quot;a&quot;=&gt;1, &quot;b&quot;=&gt;2}]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">bar</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">)</span>    <span class="c1"># [100, {&quot;a&quot;=&gt;1, &quot;b&quot;=&gt;2}]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">bar</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>        <span class="c1"># [100, {:a=&gt;1, :b=&gt;2}]</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="sr">send &amp; respond_to?</h2></h1>

<p>ruby 中所有实例都有该方法，可用于检测当前实例有无该方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:length</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Control Flow]]></title>
    <link href="http://away0x.github.io/blog/2018/10/06/ruby-control/"/>
    <updated>2018-10-06T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/06/ruby-control</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#if">if</a></li>
<li><a href="#unless">unless</a></li>
<li><a href="#case">case</a></li>
<li><a href="#times">times</a></li>
<li><a href="#for">for</a></li>
<li><a href="#while">while</a></li>
<li><a href="#until">until</a></li>
<li><a href="#each">each</a></li>
<li><a href="#loop">loop</a></li>
<li><a href="#break">break</a></li>
<li><a href="#next">next</a></li>
<li><a href="#redo">redo</a></li>
</ul>


<h1><h2 id="if">if</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 可以省略 then</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">expr</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">expr2</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">else</span> <span class="n">expr2</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if 表达式 (ruby 的 if 有返回值)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;a &gt; b&quot;</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="unless">unless</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># unless 和 if 相反，条件为假时执行</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="n">expr</span>
</span><span class='line'>    <span class="err">条件</span><span class="mi">1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="err">条件</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 与上等价</span>
</span><span class='line'><span class="k">if</span> <span class="n">expr</span>
</span><span class='line'>    <span class="err">条件</span><span class="mi">2</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="err">条件</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># unless 也有返回值，因此也可写成表达式形式</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">unless</span> <span class="n">defined?</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="case">case</h2></h1>

<ul>
<li>case 语句在判断与 when 指定的值是否相等时，实际上是用 <code>===</code> 来判断的

<ul>
<li><code>===</code> 作用详见运算符笔记</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 可以省略 then</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="err">比较对象</span>
</span><span class='line'><span class="k">when</span> <span class="err">值</span><span class="mi">1</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">code</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="err">值</span><span class="mi">2</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">code</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">code</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>由于 case 内部是 <code>===</code> 所以不止可比较简单类型</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">a</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/hello/</span>
</span><span class='line'>    <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'><span class="k">when</span> <span class="nb">Array</span>
</span><span class='line'>    <span class="o">[]</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="s1">&#39;ok&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="times">times</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># do ~ end</span>
</span><span class='line'><span class="mi">7</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;lalala&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># { ~ }</span>
</span><span class='line'><span class="mi">7</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;lalala&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 获取 index</span>
</span><span class='line'><span class="mi">7</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;第 </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> 次的循环&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="for">for</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># do 可省略</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">for</span> <span class="nb">name</span> <span class="k">in</span> <span class="n">names</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="while">while&lt;/h2</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># do 可省略</span>
</span><span class='line'>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="until">until</h2></h1>

<ul>
<li>until 是不满足条件才执行循环处理，满足则退出，和 while 相反</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># do 可省略</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">until</span> <span class="n">sum</span> <span class="o">&gt;=</span> <span class="mi">50</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="each">each</h2></h1>

<ul>
<li>可将对象集合中的对象逐个取出，类似 for&hellip;in</li>
<li>ruby 内部 for 实际是用 each 实现的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># do ~ end 可换成 { ~ }</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="loop">loop</h2></h1>

<ul>
<li>没用终止的循环，不断执行</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;lalala&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="break">break</h2></h1>

<p>终止程序，跳出循环</p>

<h1><h2 id="next">next</h2></h1>

<p>跳到下一次循环</p>

<h1><h2 id="redo">redo</h2></h1>

<p>在相同的条件下重复刚才的处理</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Variable, Operator]]></title>
    <link href="http://away0x.github.io/blog/2018/10/05/ruby-variable-operator/"/>
    <updated>2018-10-05T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/05/ruby-variable-operator</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#variable">Variable</a></li>
<li><a href="#operator">Operator</a></li>
</ul>


<h1><h2 id="variable">Variable</h2></h1>

<p>Ruby 中有六种类型的变量</p>

<ol>
<li><strong>局部变量</strong> (local variable)

<ul>
<li>以英文小写字母或 <code>_</code> 开头</li>
</ul>
</li>
<li><strong>全局变量</strong> (global variable)

<ul>
<li>以 <code>$</code> 开头</li>
<li>作用域在整个程序中，即使运用在不同文件里</li>
</ul>
</li>
<li><strong>实例变量</strong> (instance variable)

<ul>
<li>以 <code>@</code> 开头</li>
</ul>
</li>
<li><strong>类变量</strong> (class variable)

<ul>
<li>以 <code>@@</code> 开头</li>
</ul>
</li>
<li><strong>伪变量</strong> (pseudo variable)

<ul>
<li>伪变量是 ruby 预先定义好的代表某特定值的特殊变量，因此即使在程序中给伪变量赋值，它的值也不会改变</li>
<li><code>nil、true、false、self</code> 等都是伪变量</li>
<li>它们表面上虽然看着像变量，但实际行为又与变量有差别，因此称为伪变量</li>
</ul>
</li>
<li><strong>预定义变量</strong></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">object_id</span> <span class="c1"># 70235952968400</span>
</span><span class='line'><span class="c1"># 内容变了，内存地址不变</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&quot;hello2&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">object_id</span> <span class="c1"># 70238952968400</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 重新赋值，重新开辟内存</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">object_id</span> <span class="c1"># 70238952968400</span>
</span></code></pre></td></tr></table></div></figure>


<p>全局变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># a.rb</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$x</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 定义了一个全局变量</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1"># 定义了属于自身的局部变量</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;b&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="vg">$x</span>  <span class="c1"># 全局变量 $x 在 b.rb 中被修改了</span>
</span><span class='line'><span class="nb">p</span> <span class="n">x</span>   <span class="c1"># 0，a.rb 的 x 和 b.rb 的 x 不是同一个，所以不会被修改</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># b.rb</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$x</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># 修改了全局变量</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>   <span class="c1"># 定义了属于自身的局部变量</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常量</h2>

<ul>
<li>常量以大写英文字母开头</li>
<li>ruby 的运行版本 (RUBY_VERSION)、运行平台 (RUBY_PLATFORM)、命令行参数数组 (ARGV) 等，都是 ruby 预定义好的常量</li>
<li>已赋值的常量重赋值会报警告</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">TEST</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="no">TEST</span> <span class="o">=</span> <span class="mi">2</span>  <span class="c1"># 报警告</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="operator">Operator</h2></h1>

<h2>算数运算符</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">+</span> <span class="o">-</span> <span class="o">*</span> <span class="o">/</span> <span class="sx">% **</span>
</span><span class='line'>
</span><span class='line'><span class="sx"># </span><span class="o">**</span> <span class="err">是指数运算</span>
</span></code></pre></td></tr></table></div></figure>


<h2>赋值运算符</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span>
</span><span class='line'><span class="o">+=</span> <span class="o">-=</span> <span class="o">*=</span> <span class="sr">/= %= **=</span>
</span><span class='line'><span class="sr">&amp;&amp;= ||= ^= &amp;= |= &lt;&lt;= &gt;&gt;=</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># ruby 无 ++ --</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 并行赋值</span>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 交换变量值</span>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 获取数组的值</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">ary</span>
</span><span class='line'><span class="nb">p</span> <span class="n">a</span> <span class="c1"># 1</span>
</span><span class='line'><span class="nb">p</span> <span class="n">b</span> <span class="c1"># 2</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="p">,</span> <span class="o">=</span> <span class="n">ary</span>
</span><span class='line'><span class="nb">p</span> <span class="n">c</span> <span class="c1"># 1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>逻辑运算符</h2>

<ul>
<li>表达式执行顺序从左到右</li>
<li>如逻辑表达式的真假已经可以确定，则不会再判断剩余的表达式 (短路)</li>
<li>最后一个表达式的值为整体逻辑表达式的值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">||</span> <span class="ow">or</span>
</span><span class='line'><span class="o">&amp;&amp;</span> <span class="ow">and</span>
</span><span class='line'><span class="o">!</span> <span class="ow">not</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 变量默认值</span>
</span><span class='line'>
</span><span class='line'><span class="n">item</span> <span class="o">=</span> <span class="n">item</span> <span class="o">||</span> <span class="mi">1</span>  <span class="c1"># 在 item 为 false 或 nil 时，才赋值 1</span>
</span><span class='line'>
</span><span class='line'><span class="n">item</span> <span class="o">||=</span> <span class="mi">1</span>  <span class="c1"># 效果同上</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 安全运算符 (ruby2.3.0+ 支持)</span>
</span><span class='line'>
</span><span class='line'><span class="n">item</span> <span class="o">=</span> <span class="n">ary</span> <span class="o">&amp;&amp;</span> <span class="n">ary</span><span class="o">.</span><span class="n">first</span>  <span class="c1"># ary 安全才使用 ary.first</span>
</span><span class='line'>
</span><span class='line'><span class="n">item</span> <span class="o">=</span> <span class="n">ary</span><span class="o">&amp;.</span><span class="n">first</span>  <span class="c1"># 效果同上 (ary 为 nil 时，表达式返回 nil)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>比较运算符</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">==</span> <span class="o">!=</span> <span class="o">&gt;</span> <span class="o">&lt;</span> <span class="o">&gt;=</span> <span class="o">&lt;=</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;=&gt;</span>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">联合比较运算符 &lt;=&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">如果第一个操作数等于第二个操作数则返回 0</span>
</span><span class='line'><span class="cm">如果第一个操作数大于第二个操作数则返回 1</span>
</span><span class='line'><span class="cm">如果第一个操作数小于第二个操作数则返回 -1</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果接收器和参数具有相同的类型和相等的值，则返回 true</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">eql?</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 1 == 1.0 返回 true，但是 1.eql?(1.0) 返回 false</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果接收器和参数具有相同的对象 id，则返回 true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">equal?</span>
</span><span class='line'>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">如果 aObj 是 bObj 的副本，那么 aObj == bObj 返回 true</span>
</span><span class='line'><span class="cm">a.equal?bObj 返回 false</span>
</span><span class='line'><span class="cm">但是 a.equal?aObj 返回 true</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">===</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 1. 用于测试 case 语句的 when 子句内的相等</span>
</span><span class='line'><span class="c1"># 2. **左侧**是数值或字符串时，=== 与 == 的意义是一样的</span>
</span><span class='line'><span class="c1"># 3. === 还可和 =~ 一样来判断正则是否匹配</span>
</span><span class='line'><span class="c1">#    - p (/zz/ === &quot;xyzzy&quot;)  # true</span>
</span><span class='line'><span class="c1"># 4. 或者判断右边的对象是否属于左边的类</span>
</span><span class='line'><span class="c1">#    - p ((1..3) === 2)  # true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>条件运算符</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="p">?</span> <span class="n">a</span> <span class="p">:</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<h2>范围运算符</h2>

<ul>
<li>用于表示数值范围，返回一个 Range 对象</li>
<li><code>X..Y</code> (范围是 X 到 Y)</li>
<li><code>X...Y</code> (范围是 X 到 Y 的前一个元素)</li>
<li>对 Range 对象使用 to_a 方法，会返回范围中从开始到结束的值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 生成 1~10 的范围对象</span>
</span><span class='line'><span class="no">Range</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 简化定义</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>  <span class="c1"># [5, 6, 7, 8, 9, 10]</span>
</span><span class='line'><span class="nb">p</span> <span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="c1"># [5, 6, 7, 8, 9]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;f&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>  <span class="c1"># [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span>
</span><span class='line'><span class="nb">p</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="s2">&quot;f&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>  <span class="c1"># [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 在 Range 对象内部，可以调用 succ 方法根据</span>
</span></code></pre></td></tr></table></div></figure>


<h2>位运算</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span> <span class="o">|</span> <span class="o">^</span> <span class="o">~</span> <span class="o">&lt;&lt;</span> <span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>defined? 运算符</h2>

<ul>
<li><code>defined?</code> 是一个特殊的运算符，以方法调用的形式来判断传递的表达式是否已定义</li>
<li>它返回表达式的描述字符串，如果表达式未定义则返回 nil</li>
</ul>


<h2>点运算符与双冒号运算符</h2>

<ul>
<li>可通过在方法名称前加上类或模块名称和 <code>.</code> 来调用类或模块中的方法</li>
<li>可以使用类或模块名称和两个冒号 <code>::</code> 来引用类或模块中的常量

<ul>
<li>如果 <code>::</code> 前的表达式为类或模块名称，则返回该类或模块内对应的常量值</li>
<li>如果 <code>::</code> 前未没有前缀表达式，则返回主 Object 类中对应的常量值</li>
</ul>
</li>
</ul>


<h2>运算符重载</h2>

<p>不能重载的运算符: <code>:: &amp;&amp; || .. ... ?: not = and or</code></p>

<h3>重载二元运算符</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Point</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inspect</span>  <span class="c1"># 用 p 方法显示 (x, y)</span>
</span><span class='line'>        <span class="s2">&quot;(</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>  <span class="c1"># x, y 分别进行加法运算</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">-</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>  <span class="c1"># x, y 分别进行减法运算</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">point0</span> <span class="o">=</span> <span class="no">Point</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="n">point1</span> <span class="o">=</span> <span class="no">Point</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">point0</span>          <span class="c1"># (3, 6)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">point1</span>          <span class="c1"># (1, 8)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">point0</span> <span class="o">+</span> <span class="n">point1</span> <span class="c1"># (4, 14)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">point0</span> <span class="o">-</span> <span class="n">point1</span> <span class="c1"># (2, -2)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>重载一元运算符</h3>

<ul>
<li>一元运算符: <code>+ - ~ !</code></li>
<li>对应的方法名为: <code>+@ -@ ~@ !@</code></li>
<li>一元运算符都是没有参数的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Point</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inspect</span>  <span class="c1"># 用 p 方法显示 (x, y)</span>
</span><span class='line'>        <span class="s2">&quot;(</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">+@</span>  <span class="c1"># 返回自己的副本</span>
</span><span class='line'>        <span class="nb">dup</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">-@</span>  <span class="c1"># 颠倒 x, y 的正负</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">~</span><span class="err">@</span>  <span class="c1"># 使坐标翻转 90 度</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">-</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">point</span> <span class="o">=</span> <span class="no">Point</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">+</span><span class="n">point</span>  <span class="c1"># (3, 6)</span>
</span><span class='line'><span class="nb">p</span> <span class="o">-</span><span class="n">point</span>  <span class="c1"># (-3, -6)</span>
</span><span class='line'><span class="nb">p</span> <span class="o">~</span><span class="n">point</span>  <span class="c1"># (-6, 3)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>重载下标方法</h3>

<ul>
<li>数组散列中 <code>obj[i]</code> 和 <code>obj[i] = x</code> 这样的方法，称为下标方法</li>
<li>对应的方法名为 <code>[]</code> 和 <code>[]=</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Point</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inspect</span>  <span class="c1"># 用 p 方法显示 (x, y)</span>
</span><span class='line'>        <span class="s2">&quot;(</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">index</span>
</span><span class='line'>        <span class="k">when</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">x</span>
</span><span class='line'>        <span class="k">when</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">y</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;out of range </span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">[]=</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">index</span>
</span><span class='line'>        <span class="k">when</span> <span class="mi">0</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>        <span class="n">wthen</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;out of range </span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">point</span> <span class="o">=</span> <span class="no">Point</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">point</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>      <span class="c1"># 3</span>
</span><span class='line'><span class="nb">p</span> <span class="n">point</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>  <span class="c1"># 2</span>
</span><span class='line'><span class="nb">p</span> <span class="n">point</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>      <span class="c1"># 2</span>
</span><span class='line'><span class="nb">p</span> <span class="n">point</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>      <span class="c1"># 错误 ArgumentError</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Install, Basic]]></title>
    <link href="http://away0x.github.io/blog/2018/10/04/ruby-install-basic/"/>
    <updated>2018-10-04T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/04/ruby-install-basic</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#rubygem">RubyGem</a></li>
<li><a href="#rvm">RVM</a></li>
<li><a href="#rbenv">RBENV</a></li>
<li><a href="#cl">命令行选项</a></li>
<li><a href="#const">预定义变量常量</a></li>
<li><a href="#basic">基础</a></li>
</ul>


<h1><h2 id="rubygem">RubyGem</h2></h1>

<p>RubyGems 是一个统一安装和管理 Ruby 的库、程序的 Ruby 标准工具</p>

<p>在 RubyGems 中， 每个单独的库称为 GEM。通过 RubyGems，我们可以搜索 GEM、显示 GEM 相关的信息、安装 或卸载 GEM、升级旧版本的 GEM，以及查看 GEM 的安装进度一览表，等等</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 显示 GEM 的安装进度一览表</span>
</span><span class='line'>gem list
</span><span class='line'>
</span><span class='line'><span class="c"># 用于搜索 GEM 文件，没有指定选项时，会搜索远程仓库的 GEM 文件</span>
</span><span class='line'>gem search nokogiri
</span><span class='line'>gem search -l nokogiri <span class="c"># 搜索本地已安装的 GEM</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 安装</span>
</span><span class='line'>gem install nokogiri
</span><span class='line'><span class="c"># 安装本地的 GEM 文件时，不是指定 GEM 名，而是指定 GEM 文件名</span>
</span><span class='line'>gem install nokogiri-1.6.6.2.GEM
</span><span class='line'>
</span><span class='line'><span class="c"># 把 GEM 更新为最新版本</span>
</span><span class='line'>gem update nokogiri
</span><span class='line'>
</span><span class='line'><span class="c"># 更新 RubyGems 自身</span>
</span><span class='line'>gem update --system
</span><span class='line'>
</span><span class='line'><span class="c"># 查看某个 gem 的源码</span>
</span><span class='line'>bundle show gem_name <span class="c"># 然后根据 path 打开源码</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>选项 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>build </td>
<td> 根据 gemspec 创建 GEM</td>
</tr>
<tr>
<td>cert </td>
<td> 管理、签署 RubyGems 的许可证时使用</td>
</tr>
<tr>
<td>check </td>
<td> 检查 GEM</td>
</tr>
<tr>
<td>cleanup </td>
<td> 整理已安装的旧版本的 GEM</td>
</tr>
<tr>
<td>contents </td>
<td> 显示已安装的 GEM 的内容</td>
</tr>
<tr>
<td>dependency </td>
<td> 显示已安装的 GEM 的依赖关系</td>
</tr>
<tr>
<td>environment </td>
<td> 显示 RubyGems、Ruby 等相关的环境信息</td>
</tr>
<tr>
<td>fetch </td>
<td> 把 GEM 文件下载到本地目录，但不安装</td>
</tr>
<tr>
<td>generate_index </td>
<td> 创建 GEM 服务器所需的索引文件</td>
</tr>
<tr>
<td>help </td>
<td> 显示 GEM 命令的帮助说明</td>
</tr>
<tr>
<td>install </td>
<td> 安装 GEM 至本地仓库</td>
</tr>
<tr>
<td>list </td>
<td> 显示 GEM 的一览表</td>
</tr>
<tr>
<td>lock </td>
<td> 锁定 GEM 版本，并输出锁定后的 GEM 列表</td>
</tr>
<tr>
<td>mirror </td>
<td> 创建 GEM 仓库的镜像</td>
</tr>
<tr>
<td>open </td>
<td> 用编辑器编辑已安装的 GEM</td>
</tr>
<tr>
<td>outdated </td>
<td> 显示所有需要更新的 GEM 列表</td>
</tr>
<tr>
<td>owner </td>
<td> 管理 GEM 所有者的资料</td>
</tr>
<tr>
<td>pristine </td>
<td> 从 GEM 缓存中获取已安装的 GEM，并将其恢复为初始状态</td>
</tr>
<tr>
<td>push </td>
<td> 向服务器上传 GEM</td>
</tr>
<tr>
<td>query </td>
<td> 搜索本地或者远程仓库的 GEM 信息</td>
</tr>
<tr>
<td>rdoc </td>
<td> 生成已安装的 GEM 的 RDoc 文件</td>
</tr>
<tr>
<td>regenerate_binstubs </td>
<td> 变更用 GEM 安装的命令的 shebang</td>
</tr>
<tr>
<td>search </td>
<td> 显示名字包含指定字符串的 GEM</td>
</tr>
<tr>
<td>server </td>
<td> 启动 HTTP 服务器，用于管理 GEM 的文档及仓库</td>
</tr>
<tr>
<td>sources </td>
<td> 管理搜索 GEM 时所需的 RubyGems 的源以及缓存</td>
</tr>
<tr>
<td>specification </td>
<td> 以 yaml 形式显示 GEM 的详细信息</td>
</tr>
<tr>
<td>stale </td>
<td> 按最后访问的时间顺序显示 GEM 的一览表</td>
</tr>
<tr>
<td>uninstall </td>
<td> 从本地卸载 GEM</td>
</tr>
<tr>
<td>unpack </td>
<td> 在本地目录解压已安装的 GEM</td>
</tr>
<tr>
<td>update </td>
<td> 更新指定的 GEM(或者全部 GEM)</td>
</tr>
<tr>
<td>which </td>
<td> 显示读取 GEM 时引用的类库</td>
</tr>
<tr>
<td>wrappers </td>
<td> regenerate_binstubs 的别名</td>
</tr>
<tr>
<td>yank </td>
<td> 撤回已上传到服务器的 GEM 文件</td>
</tr>
</tbody>
</table>


<h1><h2 id="rvm">RVM</h2></h1>

<ul>
<li>RVM 是一个命令行工具,可以提供一个便捷的多版本 Ruby 环境的管理和切换</li>
<li><a href="http://rvm.io/">安装方法</a></li>
<li><a href="https://ruby-china.org/wiki/rvm-guide">参考</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
</span><span class='line'><span class="se">\c</span>url -sSL https://get.rvm.io <span class="p">|</span> bash -s stable
</span><span class='line'>:<span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 下载命令错误可试试</span>
</span><span class='line'><span class="s1">curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable</span>
</span><span class='line'><span class="s1">&#39;</span>
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="c"># 修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot;</span> &gt; ~/.rvm/user/db
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 列出已知的 Ruby 版本</span>
</span><span class='line'>rvm list known
</span><span class='line'>
</span><span class='line'><span class="c"># 安装一个 Ruby 版本</span>
</span><span class='line'>rvm install 2.2.0 --disable-binary
</span><span class='line'>
</span><span class='line'><span class="c"># 切换 Ruby 版本</span>
</span><span class='line'>rvm use 2.2.0
</span><span class='line'>
</span><span class='line'><span class="c"># 如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</span>
</span><span class='line'>rvm use 2.2.0 --default
</span><span class='line'>
</span><span class='line'><span class="c"># 查询已经安装的ruby</span>
</span><span class='line'>rvm list
</span><span class='line'>
</span><span class='line'><span class="c"># 卸载一个已安装版本</span>
</span><span class='line'>rvm remove 1.8.7
</span></code></pre></td></tr></table></div></figure>


<h2>gemset</h2>

<p>gemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 建立 gemset</span>
</span><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm gemset create rails23
</span><span class='line'>
</span><span class='line'><span class="c"># use 可以用来切换语言或者 gemset (前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。)</span>
</span><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm use 1.8.7@rails23
</span><span class='line'>
</span><span class='line'><span class="c"># 列出当前 Ruby 的 gemset</span>
</span><span class='line'>rvm gemset list
</span><span class='line'>
</span><span class='line'><span class="c"># 清空 gemset 中的 Gem</span>
</span><span class='line'>rvm gemset empty 1.8.7@rails23
</span><span class='line'>
</span><span class='line'><span class="c"># 删除一个 gemset</span>
</span><span class='line'>rvm gemset delete rails2-3
</span><span class='line'>
</span><span class='line'><span class="c"># 项目自动加载 gemset</span>
</span><span class='line'>:<span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 项目目录，建立一个 .rvmrc 文件，内容如下</span>
</span><span class='line'><span class="s1">rvm use 1.9.3@rails313</span>
</span><span class='line'>
</span><span class='line'><span class="s1">这样，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</span>
</span><span class='line'><span class="s1">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="rbenv">RBENV</h2></h1>

<ul>
<li>类似 RVM，二者选其一即可</li>
<li><a href="https://ruby-china.org/wiki/rbenv-guide">参考</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
</span><span class='line'><span class="c"># 用来编译安装 ruby</span>
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class='line'><span class="c"># 用来管理 gemset, 可选, 因为有 bundler 也没什么必要</span>
</span><span class='line'>git clone git://github.com/jamis/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset
</span><span class='line'><span class="c"># 通过 gem 命令安装完 gem 后无需手动输入 rbenv rehash 命令, 推荐</span>
</span><span class='line'>git clone git://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
</span><span class='line'><span class="c"># 通过 rbenv update 命令来更新 rbenv 以及所有插件, 推荐</span>
</span><span class='line'>git clone git://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update
</span><span class='line'><span class="c"># 使用 Ruby China 的镜像安装 Ruby, 国内用户推荐</span>
</span><span class='line'>git clone git://github.com/AndorChen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 安装 ruby</span>
</span><span class='line'>rbenv install --list         <span class="c"># 列出所有 ruby 版本</span>
</span><span class='line'>rbenv install 2.4.0          <span class="c"># 安装 2.4.0</span>
</span><span class='line'>rbenv install jruby-1.7.3    <span class="c"># 安装 jruby-1.7.3</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 列出版本</span>
</span><span class='line'>rbenv versions               <span class="c"># 列出安装的版本</span>
</span><span class='line'>rbenv version                <span class="c"># 列出正在使用的版本</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 设置版本</span>
</span><span class='line'>rbenv global 1.9.3-p392      <span class="c"># 默认使用 1.9.3-p392</span>
</span><span class='line'>rbenv shell 1.9.3-p392       <span class="c"># 当前的 shell 使用 1.9.3-p392, 会设置一个 `RBENV_VERSION` 环境变量</span>
</span><span class='line'>rbenv <span class="nb">local </span>jruby-1.7.3      <span class="c"># 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 其他</span>
</span><span class='line'>rbenv rehash                 <span class="c"># 每当切换 ruby 版本和执行 bundle install 之后必须执行这个命令</span>
</span><span class='line'>rbenv which irb              <span class="c"># 列出 irb 这个命令的完整路径</span>
</span><span class='line'>rbenv whence irb             <span class="c"># 列出包含 irb 这个命令的版本</span>
</span></code></pre></td></tr></table></div></figure>


<h2>gemset</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 创建</span>
</span><span class='line'><span class="c"># 参数 1 是已安装的 ruby 版本，参数 2 是 gemset 的名字</span>
</span><span class='line'>rbenv gemset create 1.9.3-p392 ruby-china
</span><span class='line'>
</span><span class='line'><span class="c"># 查看当前 gemset</span>
</span><span class='line'>rbenv gemset active
</span><span class='line'>
</span><span class='line'><span class="c">## 删除</span>
</span><span class='line'>rbenv gemset delete 1.9.3-p392 ruby-china
</span><span class='line'>
</span><span class='line'><span class="c"># 使用</span>
</span><span class='line'>rbenv gemset init ruby-china
</span><span class='line'>
</span><span class='line'><span class="c"># 列出所有 gemset</span>
</span><span class='line'>rbenv gemset list
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="cl">命令行选项</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="o">-</span><span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>选项 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-0octal </td>
<td> 用八进制指定 IO.gets 等识别的换行符</td>
</tr>
<tr>
<td>-a </td>
<td> 指定为自动分割模式 ( 与 -n 或者 -p 选项一起使用时则将 $F 设为 $_.split($;))</td>
</tr>
<tr>
<td>-c </td>
<td> 只检查脚本的语法</td>
</tr>
<tr>
<td>-Cdirectory </td>
<td> 在脚本执行前，先移动到 directory 目录下</td>
</tr>
<tr>
<td>-d、&ndash;debug </td>
<td> 使用 debug 模式(将 $DEBUG 设为 true)</td>
</tr>
<tr>
<td>-e &lsquo;command&rsquo; </td>
<td> 通过 command 指定一行代码的程序。本选项可指定多个</td>
</tr>
<tr>
<td>-Eex[:in]、&ndash;encoding=ex[:in] </td>
<td> 指定默认的外部编码(ex)以及默认的内部编码(in)</td>
</tr>
<tr>
<td>-Fpattern </td>
<td> 指定 String#split 方法使用的默认分隔符($;)</td>
</tr>
<tr>
<td>-i[extension] </td>
<td> 以替换形式编辑 ARGV 文件(指定 extension 时则会生成备份文件)</td>
</tr>
<tr>
<td>-Idirectory </td>
<td> 指定追加到 $LOAD_PATH 的目录。本选项可指定多个</td>
</tr>
<tr>
<td>-l </td>
<td> 删除 -n 或者 -p 选项中的 $_ 的换行符</td>
</tr>
<tr>
<td>-n </td>
<td> 使脚本整体被'while gets();&hellip; end'包围(将gets()的结果设定到$_中)</td>
</tr>
<tr>
<td>-p </td>
<td> 在 -n 选项的基础上，在每次循环结束时输出 $_</td>
</tr>
<tr>
<td>-rlibrary </td>
<td> 在执行脚本前通过 require 引用 library</td>
</tr>
<tr>
<td>-s </td>
<td> 要使脚本解析标志(flag)的功能有效(&lsquo;ruby -s script -abc'，则 $abc 为 true)</td>
</tr>
<tr>
<td>-S </td>
<td> 从环境变量 PATH 开始搜索可执行的脚本</td>
</tr>
<tr>
<td>-Tlevel </td>
<td> 指定不纯度检查模式</td>
</tr>
<tr>
<td>-U </td>
<td> 将内部编码的默认值(Encoding.default_internal)设为 UTF-8</td>
</tr>
<tr>
<td>-v、&ndash;verbose </td>
<td> 显示版本号，冗长模式设定为有效($VERBOSE 设定为 true)</td>
</tr>
<tr>
<td>-w </td>
<td> 冗长模式设定为有效</td>
</tr>
<tr>
<td>-Wlevel </td>
<td> 指定冗长模式的级别 [0= 不输出警告，1= 只输出重要警告，2= 输出全部警告 (默认值)]</td>
</tr>
<tr>
<td>-xdirectory </td>
<td> 忽略执行脚本中 #!ruby 之前的内容</td>
</tr>
<tr>
<td>&ndash;copyright </td>
<td> 显示版权信息</td>
</tr>
<tr>
<td>&ndash;enable=feature[, &hellip;] </td>
<td> 使 feature 有效</td>
</tr>
<tr>
<td>&ndash;disable=feature[, &hellip;] </td>
<td> 使 feature 无效</td>
</tr>
<tr>
<td>&ndash;external-encoding=encoding </td>
<td> 指定默认的外部编码</td>
</tr>
<tr>
<td>&ndash;internal-encoding=encoding </td>
<td> 指定默认的内部编码</td>
</tr>
<tr>
<td>&ndash;version </td>
<td> 显示版本信息</td>
</tr>
<tr>
<td>&ndash;help </td>
<td> 显示帮助信息</td>
</tr>
</tbody>
</table>


<blockquote><p>上表 &ndash;enable、&ndash;disable 选项可指定的功能名</p></blockquote>

<table>
<thead>
<tr>
<th>功能名 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>gems </td>
<td> RubyGems 是否有效(默认有效)</td>
</tr>
<tr>
<td>rubyopt </td>
<td> 是否引用环境变量 RUBYOPT(默认引用)</td>
</tr>
<tr>
<td>did_you_mean </td>
<td> 是否打开拼写检查功能(默认打开)</td>
</tr>
<tr>
<td>frozen-string-literal </td>
<td> 是否 freeze 所有字符串字面量(默认否)</td>
</tr>
<tr>
<td>all </td>
<td> 上述功能是否全部有效</td>
</tr>
</tbody>
</table>


<h1><h2 id="const">预定义变量常量</h2></h1>

<h2>预定义变量</h2>

<ul>
<li>预定义变量是指 Ruby 预先定义好的变量，全部都是以 $ 开头的变量，因此可以像全局变 量那样引用</li>
</ul>


<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>$! </td>
<td> 最后发生的异常的相关信息</td>
</tr>
<tr>
<td>$&ldquo; </td>
<td> $LOADED_FEATURES 的别名</td>
</tr>
<tr>
<td>$$ </td>
<td> 当前执行中的 Ruby 的进程 ID</td>
</tr>
<tr>
<td>$&amp; </td>
<td> 最后一次模式匹配后得到的字符串</td>
</tr>
<tr>
<td>$&lsquo; </td>
<td> 最后一次模式匹配中匹配部分之后的字符串</td>
</tr>
<tr>
<td>$* </td>
<td> ARGV 的别名</td>
</tr>
<tr>
<td>$+ </td>
<td> 最后一次模式匹配中最后一个 () 对应的字符串</td>
</tr>
<tr>
<td>$, </td>
<td> Array#join 的默认分割字符串(默认为 nil)</td>
</tr>
<tr>
<td>$. </td>
<td> 最后读取的文件的行号</td>
</tr>
<tr>
<td>$/ </td>
<td> 输入数据的分隔符(默认为 &ldquo;\n&rdquo;)</td>
</tr>
<tr>
<td>$0 </td>
<td> $PROGRAM_NAME 的别名</td>
</tr>
<tr>
<td>$1、$2&hellip;&hellip; </td>
<td> 最后一次模式匹配中与 () 匹配的字符串(第 n 个 () 对应 $n)</td>
</tr>
<tr>
<td>$: </td>
<td> $LOAD_PATH 的别名</td>
</tr>
<tr>
<td>$; </td>
<td> String#split 的默认分割字符串(默认为 nil)</td>
</tr>
<tr>
<td>$&lt; </td>
<td> ARGF 的别名</td>
</tr>
<tr>
<td>$> </td>
<td> print、puts、p 等的默认输出位置(默认为 STDOUT)</td>
</tr>
<tr>
<td>$? </td>
<td> 最后执行完毕的子进程的状态</td>
</tr>
<tr>
<td>$@ </td>
<td> 最后发生的异常的相关位置信息</td>
</tr>
<tr>
<td>$\ </td>
<td> 输出数据的分隔符(默认为 nil)</td>
</tr>
<tr>
<td>$_ </td>
<td> gets 方法最后读取的字符串</td>
</tr>
<tr>
<td>$` </td>
<td> 最后一次模式匹配中匹配部分之前的字符串</td>
</tr>
<tr>
<td>$~ </td>
<td> 最后一次模式匹配相关的信息</td>
</tr>
<tr>
<td>$DEBUG </td>
<td> 指定 debug 模式的标识(默认为 nil)</td>
</tr>
<tr>
<td>$FILENAME </td>
<td> ARGF 当前在读取的文件名</td>
</tr>
<tr>
<td>$LOADED_FEATURES </td>
<td> require 读取的类库名一览表</td>
</tr>
<tr>
<td>$LOAD_PATH </td>
<td> 执行 require 读取文件时搜索的目录名数组</td>
</tr>
<tr>
<td>$PROGRAM_NAME </td>
<td> 当前执行中的 Ruby 脚本的别名</td>
</tr>
<tr>
<td>$SAFE </td>
<td> 安全模式等级(默认 0)</td>
</tr>
<tr>
<td>$VERBOSE </td>
<td> 指定冗长模式的标识(默认为 nil)</td>
</tr>
<tr>
<td>$stdin </td>
<td> 标准输入(默认为 STDIN)</td>
</tr>
<tr>
<td>$stdout </td>
<td> 标准输出(默认为 STDOUT)</td>
</tr>
<tr>
<td>$stderr </td>
<td> 标准错误输出(默认为 STDERR)</td>
</tr>
</tbody>
</table>


<h2>预定义常量</h2>

<table>
<thead>
<tr>
<th>常量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>ARGF </td>
<td> 参数，或者从标准输入得到的虚拟文件对象</td>
</tr>
<tr>
<td>ARGV </td>
<td> 命令行参数数组</td>
</tr>
<tr>
<td>DATA </td>
<td> 访问 _ <em>END</em> _ 以后数据的文件对象</td>
</tr>
<tr>
<td>ENV </td>
<td> 环境变量</td>
</tr>
<tr>
<td>RUBY_COPYRIGHT </td>
<td> 版权信息</td>
</tr>
<tr>
<td>RUBY_DESCRIPTION </td>
<td> ruby -v 显示的版本信息</td>
</tr>
<tr>
<td>RUBY_ENGINE </td>
<td> Ruby 的处理引擎</td>
</tr>
<tr>
<td>RUBY_PATCHLEVEL </td>
<td> Ruby 的补丁级别</td>
</tr>
<tr>
<td>RUBY_PLATFORM </td>
<td> 运行环境的信息(OS、CPU)</td>
</tr>
<tr>
<td>RUBY_RELEASE_DATE </td>
<td> Ruby 的发布日期</td>
</tr>
<tr>
<td>RUBY_VERSION </td>
<td> Ruby 的版本</td>
</tr>
<tr>
<td>STDERR </td>
<td> 标准错误输出</td>
</tr>
<tr>
<td>STDIN </td>
<td> 标准输入</td>
</tr>
<tr>
<td>STDOUT </td>
<td> 标准输出</td>
</tr>
</tbody>
</table>


<h2>伪变量</h2>

<ul>
<li>伪变量虽然可以像变量那样引用，但是不能改变其本身的值，对其赋值会产生错误</li>
</ul>


<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>self </td>
<td> 默认的接收者</td>
</tr>
<tr>
<td>nil、true、false </td>
<td> nil、true、false</td>
</tr>
<tr>
<td><code>__FILE__</code> </td>
<td> 执行中的 Ruby 脚本的文件名</td>
</tr>
<tr>
<td><code>__LINE__</code> </td>
<td> 执行中的 Ruby 脚本的行编号</td>
</tr>
<tr>
<td><code>__ENCODING__</code> </td>
<td> 脚本的编码</td>
</tr>
</tbody>
</table>


<h2>环境变量</h2>

<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>RUBYLIB </td>
<td> 追加到预定义变量 $LOAD_PATH 中的目录名(各目录间用 : 分隔)</td>
</tr>
<tr>
<td>RUBYOPT </td>
<td> 启动 Ruby 时的默认选项(RUBYOPT = &ldquo;-U -v&rdquo; 等)</td>
</tr>
<tr>
<td>RUBYPATH </td>
<td> -S 选项指定的、解析器启动时脚本的搜索路径</td>
</tr>
<tr>
<td>PATH </td>
<td> 外部命令的搜索路径</td>
</tr>
<tr>
<td>HOME </td>
<td> DIR.chdir 方法的默认移动位置</td>
</tr>
<tr>
<td>LOGDIR </td>
<td> 没有 HOME 时的 DIR.chdir 方法的默认移动位置</td>
</tr>
<tr>
<td>LC_ALL、LC_CTYPE、LANG </td>
<td> 决定默认编码的本地信息(平台依赖)</td>
</tr>
<tr>
<td>RUBYSHELL、COMSPEC </td>
<td> 执行外部命令时，shell 需要使用的解析器路径(平台依赖)</td>
</tr>
</tbody>
</table>


<h1><h2 id="basic">基础</h2></h1>

<h2>注释</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 单行注释</span>
</span><span class='line'>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">多</span>
</span><span class='line'><span class="cm">行</span>
</span><span class='line'><span class="cm">注</span>
</span><span class='line'><span class="cm">释</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>变量</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="nb">print</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<h2>控制语句</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># then 可省略</span>
</span><span class='line'><span class="k">if</span> <span class="n">expr</span> <span class="k">then</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">elseif</span> <span class="n">expr2</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="kp">true</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 迭代器 times</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>if while 碰到 false 或 nil，认为为假，其余都为真</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;小林&quot;</span><span class="p">,</span> <span class="s2">&quot;林&quot;</span><span class="p">,</span> <span class="s2">&quot;高野&quot;</span><span class="p">,</span> <span class="s2">&quot;森岗&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="nb">name</span> <span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="sr">/林/</span> <span class="o">=~</span> <span class="nb">name</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 小林</span>
</span><span class='line'><span class="c1"># 林</span>
</span></code></pre></td></tr></table></div></figure>


<h2>字符串</h2>

<ul>
<li>单引号不转义 <code>'hello.\n'</code> 输出 <code>hello.\n</code>，且不能插值</li>
<li>双引号会转义 <code>"hello.\n"</code> 输出 <code>hello 并且有换行</code>，可插值 <code>"#{我是变量} aaaa"</code></li>
</ul>


<h2>数值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span>    <span class="c1"># Fixnum 对象</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="mi">14</span> <span class="c1"># Float 对象</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 数学相关函数</span>
</span><span class='line'><span class="no">Math</span><span class="o">.</span><span class="n">sin</span>
</span><span class='line'><span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>symbol</h2>

<ul>
<li>与字符串对象类似，符号也是对象，一般作为名称标签使用，表示方法等的对象的名称</li>
<li>符号能实现的功能，大部分字符串也能实现。但在像散列的键这样只是单纯判断 &ldquo;是否相等&rdquo; 的处理中，使用符号会比字符串更加有效率</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sym</span> <span class="o">=</span> <span class="ss">:foo</span>
</span><span class='line'><span class="n">sym2</span> <span class="o">=</span> <span class="ss">:&quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 符号转字符串</span>
</span><span class='line'><span class="n">sym</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="c1"># 字符串转符号</span>
</span><span class='line'><span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_sym</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对象</h2>

<blockquote><p>ruby 中，一切皆对象。ruby 是强类型的</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 数组</span>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">names</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># &quot;a&quot;</span>
</span><span class='line'><span class="n">names</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;aa&quot;</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">size</span> <span class="c1"># 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># each 方法返回值为 [&quot;aa&quot;, &quot;b&quot;, &quot;c&quot;]</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">item</span> <span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">item</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 散列</span>
</span><span class='line'><span class="c1"># 散列的 key 是符号类型 symbol 或者字符串 在这种只是单纯判断相等的情况下，比字符串性能更好</span>
</span><span class='line'><span class="n">sym</span> <span class="o">=</span> <span class="ss">:foo</span>
</span><span class='line'><span class="n">sym</span><span class="o">.</span><span class="n">to_s</span>     <span class="c1"># &quot;foo&quot;</span>
</span><span class='line'><span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_sym</span> <span class="c1"># :foo</span>
</span><span class='line'>
</span><span class='line'><span class="n">address1</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;wt&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="n">address2</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;wt&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="c1"># address1 的简写(key 为符号)</span>
</span><span class='line'>
</span><span class='line'><span class="n">address3</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;wt&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span> <span class="c1"># key 为字符串</span>
</span><span class='line'>
</span><span class='line'><span class="n">address1</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="c1"># &quot;wt&quot;</span>
</span><span class='line'><span class="n">address1</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># each 方法返回值为 { :name =&gt; &quot;wt&quot;, :id =&gt; 2 }</span>
</span><span class='line'><span class="n">address1</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 正则</span>
</span><span class='line'><span class="c1"># /xxx/ 是正则，=~ 用于匹配正则和字符串</span>
</span><span class='line'><span class="c1"># i 表不区分大小写</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/Ruby/</span> <span class="o">=~</span> <span class="s2">&quot;Ruby&quot;</span>    <span class="c1"># 0</span>
</span><span class='line'><span class="sr">/Ruby/</span> <span class="o">=~</span> <span class="s2">&quot;Diamond&quot;</span> <span class="c1"># nil</span>
</span><span class='line'><span class="sr">/Ruby/i</span> <span class="o">=~</span> <span class="s2">&quot;RUBY&quot;</span>   <span class="c1"># 0</span>
</span></code></pre></td></tr></table></div></figure>


<h3>常用对象</h3>

<ul>
<li>数值对象

<ol>
<li><code>-10、3.1415</code> 还有表示矩阵、复数、质数、公式的对象</li>
</ol>
</li>
<li>字符串对象</li>
<li>数组对象、散列对象</li>
<li>正则对象</li>
<li>时间对象</li>
<li>文件对象</li>
<li>符号对象</li>
<li>范围对象</li>
<li>异常对象</li>
</ul>


<h3>类</h3>

<blockquote><p>ruby 中的类 (class) 表示的就是对象的种类</p></blockquote>

<ul>
<li>对象拥有什么特性等，都是由类决定的</li>
<li>XX 类的对象，一般也会说成 XX 类的实例 (instance)。所有 ruby 对象其实都是某个类的实例，所以 ruby 中对象和实例的意义几乎是一样的</li>
</ul>


<table>
<thead>
<tr>
<th> 对象 </th>
<th> 类 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 数值 </td>
<td> Numeric </td>
</tr>
<tr>
<td> 字符串 </td>
<td> String </td>
</tr>
<tr>
<td> 数组 </td>
<td> Array </td>
</tr>
<tr>
<td> 散列 </td>
<td> Hash </td>
</tr>
<tr>
<td> 正则表达式 </td>
<td> Regexp </td>
</tr>
<tr>
<td> 文件 </td>
<td> File </td>
</tr>
<tr>
<td> 符号 </td>
<td> Symbol </td>
</tr>
</tbody>
</table>


<h3>nil</h3>

<ul>
<li>nil 是个特殊的值，表示对象不存在, 在 ruby 中 nil 和 false 都是 &ldquo;否&rdquo; 的意思</li>
<li><strong>其他一切都为 true (空字符串也是 true)</strong></li>
<li>方法不能返回有意义的值时就会返回 nil</li>
<li>从数组或者散列中获取对象时，若指定不存在的索引或者键，则得到的返回值也是 nil</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="kp">nil</span> <span class="c1"># nil</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">nil?</span>  <span class="c1"># true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方法</h2>

<p>ruby 在调用方法时可以省略 <code>()</code></p>

<p> ```ruby
def foo
    puts 123
end</p>

<p>foo()
foo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">```ruby</span>
</span><span class='line'><span class="sb">print(&quot;hello, ruby.</span><span class="se">\n</span><span class="sb">&quot;)</span>
</span><span class='line'><span class="sb">print &quot;hello, ruby.</span><span class="se">\n</span><span class="sb">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">print(&quot;hello, &quot;, &quot;ruby&quot;, &quot;.&quot;, &quot;</span><span class="se">\n</span><span class="sb">&quot;)</span>
</span><span class='line'><span class="sb">print &quot;hello, &quot;, &quot;ruby&quot;, &quot;.&quot;, &quot;</span><span class="se">\n</span><span class="sb">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>output</h2>

<p><code>print/puts/p/pp</code></p>

<ul>
<li>puts 在结尾会自动输出换行符</li>
<li>使用 p 方法时，数值结果和字符串结果会以不同的形式输出</li>
<li>pp 需要 <code>require "pp</code> 可以有格式的打印散列、数组</li>
</ul>


<h2>引用其他文件</h2>

<p>被其他程序引用的程序，称为库</p>

<ul>
<li>require 希望引用的库名

<ul>
<li>用 require 方法后，Ruby 会搜索参数指定的库，并读取库的所有内容。库内容读取完毕后，程序才会执行 require 方法后面的处理</li>
<li>require 方法用于引用已存在的库。只需要指定库名，程序就会在预先定义好的路径下查 找并读取与 Ruby 一起安装的库</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;date&quot;</span> <span class="c1"># 引入标准库</span>
</span><span class='line'>
</span><span class='line'><span class="n">days</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">tody</span> <span class="o">-</span> <span class="no">Date</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1993</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="n">days</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span> <span class="c1"># 8323</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>require_relative 希望引用的库名

<ul>
<li>require_relative 方法在查找库时，则是根据执行中的程序目录(文件夹)来进行的</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># fun.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># use_fun.rb</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;fun&quot;</span>
</span><span class='line'><span class="n">foo</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用中文</h2>

<ul>
<li>在某些 ruby 运行环境中，执行包含中文的脚本时，有可能出错，可在程序首行添加魔法注释类指定编码格式</li>
<li>如没指定魔法注释，ruby 会默认使用 UTF-8 编码方式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: GBK</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外，使用 p 方法输出中文时也可能会出现乱码，可用 <code>-E 编码方式</code> 来指定输出结果的编码方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -E UTF-8
</span><span class='line'>irb -E UTF-8
</span></code></pre></td></tr></table></div></figure>


<h2>文件读取</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># read_text.rb</span>
</span><span class='line'><span class="c1"># 执行命令 ruby read_text.rb test.txt</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一次读取整个文件内容 1</span>
</span><span class='line'><span class="c1"># 使用 ARGV 这个内置变量可得到命令行传递来的参数数组</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="nb">print</span> <span class="n">text</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ---------------------------------------</span>
</span><span class='line'><span class="c1"># 一次读取整个文件内容 2</span>
</span><span class='line'><span class="nb">print</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 逐行读</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span> <span class="n">line</span> <span class="o">|</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># --------------------------------------</span>
</span><span class='line'><span class="c1"># 文件中读取指定模式的内容并输出</span>
</span><span class='line'><span class="c1"># 命令 ruby read_text.rb 模式 文件名</span>
</span><span class='line'><span class="n">pattern</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span> <span class="n">line</span> <span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pattern</span> <span class="o">=~</span> <span class="n">line</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - KVO, KVC, Delegate, Notification, Block]]></title>
    <link href="http://away0x.github.io/blog/2018/02/17/oc-kvo-kvc-delegate-notification-block/"/>
    <updated>2018-02-17T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/17/oc-kvo-kvc-delegate-notification-block</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#kvo">KVO</a></li>
<li><a href="#kvc">KVC</a></li>
<li><a href="#delegate">Delegate</a></li>
<li><a href="#notification">Notification</a>

<ul>
<li><a href="#notification-params">带参数通知</a></li>
<li><a href="#notification-om">一对多通知接收</a></li>
<li><a href="#notification-mo">通知的多对一关系</a></li>
<li><a href="#notification-t">多线程中使用通知</a></li>
<li><a href="#notification-d">系统通知</a></li>
<li><a href="#notification-k">键盘通知</a></li>
</ul>
</li>
<li><a href="#block">Block</a></li>
<li><a href="#diff">通知、KVO、委托代理的区别</a></li>
</ul>


<h1><h2 id="kvo">KVO</h2></h1>

<p>通过 KVC 的方式修改被观察者的属性时，主动通知观察者</p>

<ul>
<li>KVO: 监听对象属性的变化</li>
<li>使用步骤

<ol>
<li>注册</li>
<li>观察</li>
<li>移除观察</li>
</ol>
</li>
<li>KVO 的性能问题

<ul>
<li>如果一个类用 KVO 监听，系统会为其生成一个子类</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// ---------------- KVOClass ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">KVOClass</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">strong</span><span class="p">)</span><span class="n">Person</span> <span class="o">*</span><span class="n">p1</span><span class="p">;</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testKVO</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">KVOClass</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testKVO</span><span class="p">{</span>
</span><span class='line'><span class="c1">// 1 注册</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">p1</span> <span class="nl">setAge</span><span class="p">:</span><span class="mi">15</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Observer: 观察者</span>
</span><span class='line'>    <span class="c1">// KeyPath: 要监听的属性</span>
</span><span class='line'>    <span class="c1">// options: 方法中要拿到的属性值</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">p1</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span>
</span><span class='line'>        <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;age&quot;</span>
</span><span class='line'>        <span class="nl">options</span><span class="p">:</span><span class="n">NSKeyValueObservingOptionNew</span> <span class="o">|</span> <span class="n">NSKeyValueObservingOptionOld</span>
</span><span class='line'>        <span class="nl">context</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">p1</span> <span class="nl">setAge</span><span class="p">:</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 3 移除</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">p1</span> <span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;age&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 2 观察 KVO 的监听方法</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
</span><span class='line'>    <span class="nf">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'>    <span class="nf">change:</span><span class="p">(</span><span class="bp">NSDictionary</span><span class="o">&lt;</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">,</span><span class="kt">id</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
</span><span class='line'>    <span class="nf">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;我的年龄变化了&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;之前的年龄 %d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeOldKey</span><span class="p">]</span> <span class="n">intValue</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;现在的年龄 %d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeNewKey</span><span class="p">]</span> <span class="n">intValue</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- Person ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">assign</span><span class="p">)</span><span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 执行文件 ----------------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">KVOClass</span> <span class="o">*</span><span class="n">kvo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">KVOClass</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">kvo</span> <span class="n">testKVO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="kvc">KVC</h2></h1>

<p>简单来说， 是存取类属性， 通过字符串来访问对象属性</p>

<ul>
<li>KVC (Key Value Coding) 键值编码</li>
<li>Java/C# 中可通过反射读取对象的属性</li>
<li>动态设置

<ul>
<li>setValue (属性值) forKey (属性名)</li>
<li>setValue (属性值) forKeyPath (属性路径)</li>
<li>setValuesForKeysWithDictionary</li>
</ul>
</li>
<li>动态读取

<ul>
<li>valueForKey (属性名)</li>
<li>valueForKeyPath (属性名)</li>
<li>dictionaryWithValuesForKeys</li>
</ul>
</li>
<li>KVC 可设置类的私有成员变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// ---------------- Person ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">assign</span><span class="p">)</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 执行文件 ----------------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p1</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;henry&quot;</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span> <span class="c1">// 可 forKeyPath:@&quot;a.b&quot;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p1</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;18&quot;</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;age&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// 批量设置属性</span>
</span><span class='line'>        <span class="c1">//   - p1 必须得有 key 对应的属性才行</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p1</span> <span class="nl">setValuesForKeysWithDictionary</span><span class="p">:</span><span class="l">@{</span>
</span><span class='line'>            <span class="s">@&quot;name&quot;</span><span class="o">:</span> <span class="s">@&quot;wt&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">@&quot;age&quot;</span><span class="o">:</span> <span class="mi">@26</span>
</span><span class='line'>        <span class="l">}</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Person</span> <span class="o">*</span><span class="n">p2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p2</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;robin&quot;</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p2</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;17&quot;</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;age&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;p1=%@ p2=%@&quot;</span><span class="p">,</span><span class="n">p1</span><span class="p">,[</span><span class="n">p2</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">]);</span>
</span><span class='line'>        <span class="c1">// 批量获取值</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p1</span> <span class="nl">dictionaryWithValuesForKeys</span><span class="p">:</span><span class="l">@[</span><span class="s">@&quot;name&quot;</span><span class="p">,</span> <span class="s">@&quot;age&quot;</span><span class="l">]</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>作用</h2>

<ol>
<li>字典转模型 ,简化代码量</li>
<li>修改系统的只读变量: 例如自定义tabBar的时候,由于tabBar是只读属性,只能用KVC赋值</li>
<li>可以任意修改一个对象的属性和变量(包括私有变量)</li>
<li>可以通过运算符层次查找对象的属性</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">keyPathTeacher</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="p">[</span><span class="n">Teacher</span> <span class="n">alloc</span> <span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">t</span><span class="p">.</span><span class="n">chiild</span> <span class="o">=</span> <span class="p">[</span><span class="n">Child</span> <span class="n">alloc</span> <span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">t</span><span class="p">.</span><span class="n">child</span><span class="p">.</span><span class="n">book</span> <span class="o">=</span> <span class="p">[</span><span class="n">Book</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">ValueForKeyPath</span><span class="p">(</span><span class="s">@&quot;child.book&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="delegate">Delegate</h2></h1>

<p>委托代理也可通过 block 实现</p>

<ul>
<li>适用场合:

<ol>
<li>当对象 A 发生了一些行为，想告知对象 B (让对象 B 成为对象 A 的代理对象)</li>
<li>对象 B 想监听对象 A 的一些行为(让对象 B 成为对象 A 的代理对象)</li>
<li>当对象 A 无法处理某些行为的时候，想让对象 B 帮忙处理(让对象 B 成为对象 A 的代理对象)</li>
</ol>
</li>
<li>协议规范

<ol>
<li>一般情况下，当前协议属于谁，就将协议定义在谁的头文件上</li>
</ol>
</li>
<li>步骤：

<ol>
<li>定义协议 <code>类名 + Delegate</code> (需遵守 NSObject 基协议)</li>
<li>委托 <code>委托类，需实现上面定义的代理协议</code></li>
<li>代理方法的调用</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// AClass</span>
</span><span class='line'><span class="c1">// ---------------- 头文件 ----------------------</span>
</span><span class='line'><span class="c1">// 声明协议</span>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">BuyTicketDelegate</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AClass</span>: <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">BuyTicketDelegate</span><span class="o">&gt;</span> <span class="n">delegete</span><span class="p">;</span> <span class="c1">// delegete 用于接受委托</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">myBuyTicket</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1. 定义协议</span>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">BuyTicketDelegate</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@optional</span> <span class="c1">// 表下面的方法不一定要实现</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">buyTicket</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 实现文件 ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AClass</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">myBuyTicket</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 判断代理中是否有要求的方法</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">delegete</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">buyTicket</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">delegete</span> <span class="n">buyTicket</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// BClass</span>
</span><span class='line'><span class="c1">// ---------------- 头文件 ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">BClass</span> : <span class="bp">NSObject</span><span class="o">&lt;</span><span class="n">BuyTicketDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">testDelegate</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 实现文件 ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">BClass</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AClass</span> <span class="o">*</span><span class="n">classa</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">classa</span><span class="p">.</span><span class="n">delegete</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span> <span class="c1">// 设置代理，委托 self</span>
</span><span class='line'>    <span class="p">[</span><span class="n">classa</span> <span class="n">myBuyTicket</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">buyTicket</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;我是 BClass 中的方法&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">BClass</span> <span class="o">*</span><span class="n">classb</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">classb</span> <span class="n">testDelegate</span><span class="p">];</span> <span class="c1">// 打印 &quot;我是 BClass 中的方法&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="notification">Notification</h2></h1>

<ul>
<li>每一个应用程序都有一个通知中心(NSNotificationCenter)实例，专门负责协助不同对象之间的消息通信</li>
<li>任何一个对象都可以向通知中心发布通知(NSNotification)，描述自己在做什么。其他感兴趣的对象(Observer)可以申请在某个特定通知发布时或在某个特定的对象发布通知时，收到这个通知</li>
<li>通知基本原理

<ul>
<li> 角色：通知中心、发起人、接收者</li>
<li> 步骤：

<ol>
<li>接受者向通知中心注册</li>
<li>定义一些通知接收的方法</li>
<li>发起人向通知中心发通知</li>
</ol>
</li>
</ul>
</li>
<li>一个完整的通知需要包含 3 个属性

<ol>
<li><code>- (NSString *)name;</code> (通知的名称)</li>
<li><code>- (id)object;</code> (通知发布者)</li>
<li><code>- (NSDictionary *)userInfo</code> (一些额外的信息，通知发布者传递给通知接受者的信息内容)</li>
</ol>
</li>
<li>监听通知需在发布通知之前</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 1. A 对象发布通知</span>
</span><span class='line'><span class="c1">//    - 定义通知对象</span>
</span><span class='line'><span class="c1">//        - object 为 nil 时，为发布匿名通知 (不指定发布者)</span>
</span><span class='line'><span class="bp">NSNotification</span> <span class="o">*</span><span class="n">note</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSNotification</span> <span class="nl">notificationWithName</span><span class="p">:</span><span class="s">@&quot;通知名称&quot;</span>
</span><span class='line'>    <span class="nl">object</span><span class="p">:</span><span class="n">A</span> <span class="nl">userInfo</span><span class="p">:</span><span class="l">@{</span><span class="s">@&quot;title&quot;</span><span class="o">:</span> <span class="s">@&quot;通知内容xxx&quot;</span><span class="l">}</span><span class="p">];</span>
</span><span class='line'><span class="c1">//    - 发送</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">postNotification</span><span class="p">:</span><span class="n">note</span><span class="p">];</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 或者也可 (简化发送的方法)</span>
</span><span class='line'><span class="cm">[[NSNotificationCenter defaultCenter] </span>
</span><span class='line'><span class="cm">    postNotificationName:@&quot;通知名称&quot;</span>
</span><span class='line'><span class="cm">    object:A</span>
</span><span class='line'><span class="cm">    userInfo:@{@&quot;title&quot;: @&quot;通知内容xxx&quot;}];</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2. B 对象订阅通知</span>
</span><span class='line'><span class="c1">//     - addObserver: 通知接收者</span>
</span><span class='line'><span class="c1">//     - selector: 通知接收到时执行的函数</span>
</span><span class='line'><span class="c1">//         - doAction: 参数为通知对象 note</span>
</span><span class='line'><span class="c1">//     - name: 通知名称，nil 时为接收任何 object 的通知</span>
</span><span class='line'><span class="c1">//     - object: 通知发布者, nil 时为接收任何 name 名的通知</span>
</span><span class='line'><span class="c1">//         - name 和 object 都为 nil 时，为接收任何通知</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">addObserver</span><span class="p">:</span><span class="n">B</span>
</span><span class='line'>    <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">doAction</span><span class="p">:)</span>
</span><span class='line'>    <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;通知名称&quot;</span>
</span><span class='line'>    <span class="nl">object</span><span class="p">:</span><span class="n">A</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3. 通知的移除 (取消订阅)</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">removeObserver</span><span class="p">:</span><span class="n">B</span>
</span><span class='line'>    <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;通知名称&quot;</span>
</span><span class='line'>    <span class="nl">object</span><span class="p">:</span><span class="n">A</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 或</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">removeObserver</span><span class="p">:</span><span class="n">B</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// AClass</span>
</span><span class='line'><span class="c1">// ---------------- 头文件 ----------------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 实现文件 ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 3. 发起人向通知中心发送通知</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>            <span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// BClass</span>
</span><span class='line'><span class="c1">// ---------------- 头文件 ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">BClass</span> : <span class="bp">NSObject</span><span class="o">&lt;</span><span class="n">BuyTicketDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">testNotification</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// ---------------- 实现文件 ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">BClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNotification</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1. 接受者向通知中心注册</span>
</span><span class='line'>    <span class="c1">// 参数1：谁在接收这个方法，参数2：响应方法，参数3：通知名称，参数4通知发布者</span>
</span><span class='line'>    <span class="c1">// self 指当前的这个类</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">testAction</span><span class="p">)</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AClass</span> <span class="o">*</span><span class="n">classa</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="k">init</span><span class="p">];</span> <span class="c1">// A 类的构造方法中发广播</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 2. 定义一些通知接收的方法</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;接收到通知了&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 广播销毁的方法</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// A 类中发送通知，B 类中接收</span>
</span><span class='line'><span class="c1">// main</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">BClass</span> <span class="o">*</span><span class="n">classb</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="k">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">classb</span> <span class="n">testNotification</span><span class="p">];</span> <span class="c1">// &quot;接收到通知了&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h3 id="notification-params">带参数通知</h3></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// AClass</span>
</span><span class='line'><span class="c1">// ---------------- 头文件 ----------------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 实现文件 ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 3. 发起人向通知中心发送通知</span>
</span><span class='line'>        <span class="c1">// 如通知需要携带数据，可以：</span>
</span><span class='line'>        <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">dic</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;123&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;keya&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 参数1：通知名，参数2：object，参数3：dict(字典)</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>            <span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span>
</span><span class='line'>            <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="nl">userInfo</span><span class="p">:</span><span class="n">dic</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// BClass</span>
</span><span class='line'><span class="c1">// ---------------- 头文件 ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">BClass</span> : <span class="bp">NSObject</span><span class="o">&lt;</span><span class="n">BuyTicketDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">testNotification</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// ---------------- 实现文件 ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">BClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNotification</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1. 接受者向通知中心注册</span>
</span><span class='line'>    <span class="c1">// 参数1：谁在接收这个方法，参数2：响应方法，参数3：通知名称，参数4：通知发布者</span>
</span><span class='line'>    <span class="c1">// self 指当前的这个类</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">testAction</span><span class="p">:)</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AClass</span> <span class="o">*</span><span class="n">classa</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// A 类的构造方法中发通知</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 2. 定义一些通知接收的方法(拿到参数)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testAction:</span><span class="p">(</span><span class="bp">NSNotification</span><span class="o">*</span><span class="p">)</span><span class="nv">notif</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSNumber</span> <span class="o">*</span><span class="n">num</span> <span class="o">=</span> <span class="n">notif</span><span class="p">.</span><span class="n">object</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="n">notif</span><span class="p">.</span><span class="n">userInfo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">dic</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 通知销毁的方法</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// A 类中发送通知，B 类中接收</span>
</span><span class='line'><span class="c1">// main</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">BClass</span> <span class="o">*</span><span class="n">classb</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">classb</span> <span class="n">testNotification</span><span class="p">];</span> <span class="c1">// &quot;接收到广播了&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h3 id="notification-om">一对多通知接收(一个发送，多个接收)</h3></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// Person 发出通知，Student 和 Teacher 会接收到</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- Person ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNotification</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Student</span> <span class="o">*</span><span class="n">s1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Teacher</span> <span class="o">*</span><span class="n">t1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNotification</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// [Student new];</span>
</span><span class='line'>    <span class="c1">// [Teacher new]; // 这种方式定义的对象 (通知还未来得及发送，对象就已经被释放掉了)</span>
</span><span class='line'>    <span class="n">s1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Student</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">t1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Teacher</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- Student ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Student</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>            <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span>
</span><span class='line'>            <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">notifAction</span><span class="p">)</span>
</span><span class='line'>            <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span>
</span><span class='line'>            <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">notifAction</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;student 接收&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- Teacher ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Teacher</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>            <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span>
</span><span class='line'>            <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">notifAction</span><span class="p">)</span>
</span><span class='line'>            <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span>
</span><span class='line'>            <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">notifAction</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;teacher 接收&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 使用文件 ----------------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p1</span> <span class="n">testNotification</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h3 id="notification-mo">通知的多对一关系(多个发送，一个接收)</h3></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// Student 和 Teacher 发出通知，Person 会接收到</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- Person ----------------------</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="c1">//@property</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNotification</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">Student</span> <span class="o">*</span><span class="n">s1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Teacher</span> <span class="o">*</span><span class="n">t1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testNotification</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">notifAction</span><span class="p">:)</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">s1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Student</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">t1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Teacher</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">notifAction:</span><span class="p">(</span><span class="bp">NSNotification</span><span class="o">*</span><span class="p">)</span><span class="nv">notif</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="n">notif</span><span class="p">.</span><span class="n">userInfo</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">dic</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;info&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- Student ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Student</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">dic</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;我来自Student&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;info&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">userInfo</span><span class="p">:</span><span class="n">dic</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- Teacher ----------------------</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Teacher</span>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">dic</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;我来自Teacher&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;info&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;TESTNOTIF&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">userInfo</span><span class="p">:</span><span class="n">dic</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---------------- 使用文件 ----------------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p1</span> <span class="n">testNotification</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h3 id="notification-t">多线程中使用通知</h3></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 监听通知</span>
</span><span class='line'><span class="c1">// Name: 通知名字</span>
</span><span class='line'><span class="c1">// object: 谁发出的通知</span>
</span><span class='line'><span class="c1">// queue: 决定 block 在哪个线程执行，nil 表示在发布通知的线程中执行</span>
</span><span class='line'><span class="c1">// usingBlock: 只要监听到通知，就会执行这个 block</span>
</span><span class='line'><span class="kt">id</span> <span class="n">observe</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">addObserverFromName</span><span class="p">:</span><span class="s">@&quot;note&quot;</span>
</span><span class='line'>    <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>    <span class="nl">queue</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>    <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span> <span class="n">__NONNULL</span> <span class="n">note</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 只要监听到通知，就会调用</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSTread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 发出通知</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;note&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 移除通知</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">removeObserver</span><span class="p">:</span><span class="n">observe</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>通知在多线程中的注意点</h3>

<ul>
<li>接收通知的代码在哪个线程执行是由发通知的的线程决定的

<ul>
<li>可通过 addObserverFromName 的 queue 参数指定</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 异步线程监听通知，主线程发通知</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 监听通知在异步中</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 异步任务</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span>
</span><span class='line'>        <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">reciveNote</span><span class="p">)</span> <span class="c1">// reciveNote 这个方法是在主线程中调用的(因为发通知在主线程)</span>
</span><span class='line'>        <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;note&quot;</span>
</span><span class='line'>        <span class="nl">objeect</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 发出通知</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;note&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 发现这段代码中的异步任务中监听不到通知</span>
</span><span class='line'><span class="c1">// 这是由于异步任务执行的顺序不确定，有可能监听在发通知之后</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当发通知的代码改为如点击事件触发，保证一定在监听之后执行，则异步线程中监听通知成功</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 当发通知在异步线程中，主线程监听通知</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 由于监听到通知触发的回调执行在的线程由发通知的线程决定</span>
</span><span class='line'><span class="c1">// 因此该回调执行在异步线程中</span>
</span><span class='line'><span class="c1">// 如果改回调中需要修改 UI，则需在主线程中修改</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 执行在异步线程，但更新 UI 的代码执行在主线程总</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reciveNote</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ....</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 回到主线程更新 UI</span>
</span><span class='line'>    <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">// 修改 UI</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// queue 参数指定 block 在指定线程执行</span>
</span><span class='line'><span class="c1">// 无论发通知是在哪个线程中都没关系</span>
</span><span class='line'>
</span><span class='line'><span class="kt">id</span> <span class="n">observe</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">addObserverFromName</span><span class="p">:</span><span class="s">@&quot;note&quot;</span>
</span><span class='line'>    <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>    <span class="nl">queue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span> <span class="n">__NONNULL</span> <span class="n">note</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 只要监听到通知，就会调用</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSTread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h3 id="notification-d">系统通知 UIDevice</h3></h2>

<ul>
<li>UIDevice 类提供了一个单例对象，它代表着设备，通过它可以获得一些设备相关的信息，比如:

<ul>
<li>电池电量值 batteryLevel</li>
<li>设备类型 model (iPod、iPhone &hellip;)</li>
<li>设备系统 systemVersion</li>
</ul>
</li>
<li>可通过 <code>[UIDevice currentDevice</code> 获取这个单例对象</li>
<li>UIDevice 对象会不间断的发布一些通知，下面是通知名称

<ol>
<li><code>UIDeviceOrientationDidChangeNotification</code> 设备旋转</li>
<li><code>UIDeviceBatteryStateDidChangeNotification</code> 电池状态改变</li>
<li><code>UIDeviceBatteryLevelDidChangeNotification</code> 电池电量改变</li>
<li><code>UIDeviceProximityStateDidChangeNotification</code> 近距离传感器 (比如设备贴近使用者的脸部)</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 系统版本</span>
</span><span class='line'><span class="kt">double</span> <span class="n">version</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">].</span><span class="n">systemVersion</span><span class="p">.</span><span class="n">doubleValue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">version</span> <span class="o">&gt;=</span> <span class="mf">9.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something   </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><h3 id="notification-k">键盘通知</h3></h2>

<p>键盘状态改变时，系统会发出一些特定的通知</p>

<ol>
<li><code>UIKeyboardWillShowNotification</code> 键盘即将显示</li>
<li><code>UIKeyboardDidShowNotification</code> 键盘显示完毕</li>
<li><code>UIKeyboardWillHideNotification</code> 键盘即将隐藏</li>
<li><code>UIKeyboardDidHideNotification</code> 键盘隐藏完毕</li>
<li><code>UIKeyboardWillChangeFrameNotification</code> 键盘的位置尺寸即将发生改变</li>
<li><code>UIKeyboardDidChangeFrameNotification</code> 键盘的位置尺寸改变完毕</li>
</ol>


<h1><h2 id="block">Block</h2></h1>

<ul>
<li>block: 代码块</li>
<li>本质上是函数指针(代码块的内存地址)</li>
<li>常用语传值，即把 block 的地址传到要调用 block 的地方</li>
</ul>


<h2>实现</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 1. 声明 block (返回值 + Block名 + 传递参数)</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">^</span><span class="n">MyBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">autoreleasepook</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>        <span class="k">__block</span> <span class="kt">int</span> <span class="n">aa</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 2. 实现 block</span>
</span><span class='line'>        <span class="n">MyBlock</span> <span class="n">b1</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// block 中使用外部变量，声明时，需加 __block</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="c1">// 3. 调用 block</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">newb</span> <span class="o">=</span> <span class="n">b1</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// 11</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>类之间的通信为什么要用 block</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">AClass</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testBlock</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testBlock</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// A 类中调 B 类的方法</span>
</span><span class='line'>    <span class="n">BClass</span> <span class="o">*</span><span class="n">classb</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">classb</span> <span class="n">testB</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">BClass</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testB</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">BClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testB</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;我是B&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// 如果 B 类想使用 A 类的方法，不可实例化 A 类(会交叉引用)，得使用 block</span>
</span><span class='line'>    <span class="c1">// AClass *classa = [[AClass alloc] init];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">autoreleasepook</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AClass</span> <span class="o">*</span><span class="n">classa</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>类之间通信中使用 block</h2>

<p>其实就是 A 传递一个函数给 B，从而实现在 B 中调 A 的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">AClass</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testBlock</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testBlock</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 声明 block</span>
</span><span class='line'>    <span class="n">MyBlock</span> <span class="n">b1</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">str1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;AClass:%@&quot;</span><span class="p">,</span> <span class="n">str1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="c1">// 调用 B 类</span>
</span><span class='line'>    <span class="n">BClass</span> <span class="o">*</span><span class="n">classb</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">classb</span> <span class="nl">testB</span><span class="p">:</span><span class="n">b1</span> <span class="nl">str1</span><span class="p">:</span><span class="s">@&quot;AClass&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ---------------</span>
</span><span class='line'>    <span class="c1">// 快速传递 block(类似 js 的回调)</span>
</span><span class='line'>    <span class="n">BClass</span> <span class="o">*</span><span class="n">classb</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">classb</span> <span class="nl">testB</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">str1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;AClass:%@&quot;</span><span class="p">,</span> <span class="n">str1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">str1</span><span class="p">:</span><span class="s">@&quot;AClass&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyBlock</span><span class="p">)(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">);</span> <span class="c1">// 声明 block</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">BClass</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testB:</span><span class="p">(</span><span class="n">MyBlock</span><span class="p">)</span><span class="nv">block</span> <span class="nf">str1:</span><span class="p">(</span><span class="bp">NSString</span><span class="p">)</span><span class="nv">str1</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">BClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testB:</span><span class="p">(</span><span class="n">MyBlock</span><span class="p">)</span><span class="nv">block</span> <span class="nf">str1:</span><span class="p">(</span><span class="bp">NSString</span><span class="p">)</span><span class="nv">str1</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">str1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">block</span><span class="p">(</span><span class="s">@&quot;我是从B类来的&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">autoreleasepook</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AClass</span> <span class="o">*</span><span class="n">classa</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="diff">通知、KVO、委托代理的区别</h2></h1>

<ul>
<li>三者都是 iOS 中监听事件的方式</li>
<li><strong>通知</strong>

<ul>
<li>任何对象之间都可以传递消息</li>
<li>使用范围

<ol>
<li>1 个对象可以发通知给多个对象</li>
<li>1 个对象可以接受多个对象发出的通知</li>
</ol>
</li>
<li>要求: 必须得保证通知的名字在发出和监听时是一致的</li>
</ul>
</li>
<li><strong>KVO</strong>

<ul>
<li>仅能监听对象属性的变化 (灵活度不如通知和代理)</li>
</ul>
</li>
<li><strong>代理</strong>

<ul>
<li>1 个对象只能设置一个代理 (假设这个对象只有一个代理属性)</li>
<li>1 个对象能成为多个对象的代理</li>
</ul>
</li>
<li>如何选择

<ol>
<li>代理比通知规范</li>
<li>建议使用代理多于通知，能使用代理尽量使用代理</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - 单例]]></title>
    <link href="http://away0x.github.io/blog/2018/02/16/oc-singleton/"/>
    <updated>2018-02-16T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/16/oc-singleton</id>
    <content type="html"><![CDATA[<!-- more -->


<p>单例可以保证在程序运行过程，一个类只有一个实例，而且该实例易于供外界访问从而方便地控制了实例个数，并节约系统资源</p>

<p>使用场合: 在整个应用程序中，共享一份资源 (这份资源只需要创建初始化一次)</p>

<ul>
<li><a href="#arc">ARC环境下实现单例模式</a></li>
<li><a href="#mrc">MRC环境下实现单例模式</a></li>
<li><a href="#am">ARC与MRC通用的单例</a></li>
</ul>


<h1><h2 id="arc">ARC 环境下实现单例模式</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 懒加载的单例的写法</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 提供全局变量</span>
</span><span class='line'><span class="k">static</span> <span class="n">Demo</span> <span class="o">*</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="k">struct</span> <span class="bp">_NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_instance</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 使用</span>
</span><span class='line'>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Demo</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Demo</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d3</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;d1:%p d2:%p d3:%p&quot;</span><span class="p">,</span> <span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">,</span> <span class="n">d3</span><span class="p">);</span> <span class="c1">// 可见地址都一样</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用懒加载的写法，如外界在很多子线程中 alloc，那么会有安全隐患问题</p>

<h2>解决多线程下的隐患</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 方法一: 加互斥锁，解决多线程访问安全问题</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Demo</span> <span class="o">*</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="k">struct</span> <span class="bp">_NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@synchronized</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_instance</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 方法二: GCD 一次性代码，保证整个程序运行中，只执行一次，且线程安全</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Demo</span> <span class="o">*</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="k">struct</span> <span class="bp">_NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_instance</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>优化</h2>

<ul>
<li>为了外部方便调用，可像外部提供一个类方法，便于使用单例

<ul>
<li>方法名: <code>share + 类名</code> | <code>default + 类名</code> | <code>类名</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Demo</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">shareDemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Demo</span> <span class="o">*</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="k">struct</span> <span class="bp">_NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_instance</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 提供类方法，方便外界访问</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">shareDemo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 调用 alloc 时，会调用 allocWithZone</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">aloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 严谨: 由于下面这两个方法也可获取到对象</span>
</span><span class='line'><span class="c1">// 所以也需重写一下，让他们得到的也是单例对象</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">mutableCopyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 使用</span>
</span><span class='line'>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d1</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">shareDemo</span><span class="p">];</span>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d2</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d3</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">shareDemo</span><span class="p">];</span>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d4</span> <span class="o">=</span> <span class="p">[</span><span class="n">d1</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">d5</span> <span class="o">=</span> <span class="p">[</span><span class="n">d1</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;d1:%p d2:%p d3:%p d4:%p d5:%p&quot;</span><span class="p">,</span> <span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">,</span> <span class="n">d3</span><span class="p">,</span> <span class="n">d4</span><span class="p">,</span> <span class="n">d5</span><span class="p">);</span> <span class="c1">// 可见地址都一样</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="mrc">MRC 环境下实现单例模式</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 实现同 ARC 单例</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - MRC中需要覆盖的方法</span>
</span><span class='line'><span class="c1">// 不需要计数器+1</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">retain</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 不需要，堆区的对象才需要</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">autorelease</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 不需要</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">oneway</span> <span class="kt">void</span><span class="p">)</span><span class="nf">release</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 不需要计数器个数， 直接返回最大无符号整数</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nf">retainCount</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UINT_MAX</span><span class="p">;</span>  <span class="c1">// 参照常量区字符串的 retainCount</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="am">ARC 与 MRC 通用的单例</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Demo</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">shareDemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Demo</span> <span class="o">*</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="k">struct</span> <span class="bp">_NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_instance</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 提供类方法，方便外界访问</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">shareDemo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 调用 alloc 时，会调用 allocWithZone</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">aloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">mutableCopyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通过宏定义判断是否为 MRC 环境</span>
</span><span class='line'><span class="cp">#pragma mark - MRC 中需要覆盖的方法, ARC与MRC的整合  </span>
</span><span class='line'><span class="cp">#if !__has_feature(objc_arc)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">retain</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">autorelease</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">oneway</span> <span class="kt">void</span><span class="p">)</span><span class="nf">release</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nf">retainCount</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UINT_MAX</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
