<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Away0x's Blog]]></title>
  <link href="http://away0x.github.io/atom.xml" rel="self"/>
  <link href="http://away0x.github.io/"/>
  <updated>2021-04-27T09:36:14+08:00</updated>
  <id>http://away0x.github.io/</id>
  <author>
    <name><![CDATA[TongWu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - Install, Basic]]></title>
    <link href="http://away0x.github.io/blog/2018/10/04/ruby-install-basic/"/>
    <updated>2018-10-04T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/04/ruby-install-basic</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#rubygem">RubyGem</a></li>
<li><a href="#rvm">RVM</a></li>
<li><a href="#rbenv">RBENV</a></li>
<li><a href="#cl">命令行选项</a></li>
<li><a href="#const">预定义变量常量</a></li>
<li><a href="#basic">基础</a></li>
</ul>


<h1><h2 id="rubygem">RubyGem</h2></h1>

<p>RubyGems 是一个统一安装和管理 Ruby 的库、程序的 Ruby 标准工具</p>

<p>在 RubyGems 中， 每个单独的库称为 GEM。通过 RubyGems，我们可以搜索 GEM、显示 GEM 相关的信息、安装 或卸载 GEM、升级旧版本的 GEM，以及查看 GEM 的安装进度一览表，等等</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 显示 GEM 的安装进度一览表</span>
</span><span class='line'>gem list
</span><span class='line'>
</span><span class='line'><span class="c"># 用于搜索 GEM 文件，没有指定选项时，会搜索远程仓库的 GEM 文件</span>
</span><span class='line'>gem search nokogiri
</span><span class='line'>gem search -l nokogiri <span class="c"># 搜索本地已安装的 GEM</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 安装</span>
</span><span class='line'>gem install nokogiri
</span><span class='line'><span class="c"># 安装本地的 GEM 文件时，不是指定 GEM 名，而是指定 GEM 文件名</span>
</span><span class='line'>gem install nokogiri-1.6.6.2.GEM
</span><span class='line'>
</span><span class='line'><span class="c"># 把 GEM 更新为最新版本</span>
</span><span class='line'>gem update nokogiri
</span><span class='line'>
</span><span class='line'><span class="c"># 更新 RubyGems 自身</span>
</span><span class='line'>gem update --system
</span><span class='line'>
</span><span class='line'><span class="c"># 查看某个 gem 的源码</span>
</span><span class='line'>bundle show gem_name <span class="c"># 然后根据 path 打开源码</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>选项 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>build </td>
<td> 根据 gemspec 创建 GEM</td>
</tr>
<tr>
<td>cert </td>
<td> 管理、签署 RubyGems 的许可证时使用</td>
</tr>
<tr>
<td>check </td>
<td> 检查 GEM</td>
</tr>
<tr>
<td>cleanup </td>
<td> 整理已安装的旧版本的 GEM</td>
</tr>
<tr>
<td>contents </td>
<td> 显示已安装的 GEM 的内容</td>
</tr>
<tr>
<td>dependency </td>
<td> 显示已安装的 GEM 的依赖关系</td>
</tr>
<tr>
<td>environment </td>
<td> 显示 RubyGems、Ruby 等相关的环境信息</td>
</tr>
<tr>
<td>fetch </td>
<td> 把 GEM 文件下载到本地目录，但不安装</td>
</tr>
<tr>
<td>generate_index </td>
<td> 创建 GEM 服务器所需的索引文件</td>
</tr>
<tr>
<td>help </td>
<td> 显示 GEM 命令的帮助说明</td>
</tr>
<tr>
<td>install </td>
<td> 安装 GEM 至本地仓库</td>
</tr>
<tr>
<td>list </td>
<td> 显示 GEM 的一览表</td>
</tr>
<tr>
<td>lock </td>
<td> 锁定 GEM 版本，并输出锁定后的 GEM 列表</td>
</tr>
<tr>
<td>mirror </td>
<td> 创建 GEM 仓库的镜像</td>
</tr>
<tr>
<td>open </td>
<td> 用编辑器编辑已安装的 GEM</td>
</tr>
<tr>
<td>outdated </td>
<td> 显示所有需要更新的 GEM 列表</td>
</tr>
<tr>
<td>owner </td>
<td> 管理 GEM 所有者的资料</td>
</tr>
<tr>
<td>pristine </td>
<td> 从 GEM 缓存中获取已安装的 GEM，并将其恢复为初始状态</td>
</tr>
<tr>
<td>push </td>
<td> 向服务器上传 GEM</td>
</tr>
<tr>
<td>query </td>
<td> 搜索本地或者远程仓库的 GEM 信息</td>
</tr>
<tr>
<td>rdoc </td>
<td> 生成已安装的 GEM 的 RDoc 文件</td>
</tr>
<tr>
<td>regenerate_binstubs </td>
<td> 变更用 GEM 安装的命令的 shebang</td>
</tr>
<tr>
<td>search </td>
<td> 显示名字包含指定字符串的 GEM</td>
</tr>
<tr>
<td>server </td>
<td> 启动 HTTP 服务器，用于管理 GEM 的文档及仓库</td>
</tr>
<tr>
<td>sources </td>
<td> 管理搜索 GEM 时所需的 RubyGems 的源以及缓存</td>
</tr>
<tr>
<td>specification </td>
<td> 以 yaml 形式显示 GEM 的详细信息</td>
</tr>
<tr>
<td>stale </td>
<td> 按最后访问的时间顺序显示 GEM 的一览表</td>
</tr>
<tr>
<td>uninstall </td>
<td> 从本地卸载 GEM</td>
</tr>
<tr>
<td>unpack </td>
<td> 在本地目录解压已安装的 GEM</td>
</tr>
<tr>
<td>update </td>
<td> 更新指定的 GEM(或者全部 GEM)</td>
</tr>
<tr>
<td>which </td>
<td> 显示读取 GEM 时引用的类库</td>
</tr>
<tr>
<td>wrappers </td>
<td> regenerate_binstubs 的别名</td>
</tr>
<tr>
<td>yank </td>
<td> 撤回已上传到服务器的 GEM 文件</td>
</tr>
</tbody>
</table>


<h1><h2 id="rvm">RVM</h2></h1>

<ul>
<li>RVM 是一个命令行工具,可以提供一个便捷的多版本 Ruby 环境的管理和切换</li>
<li><a href="http://rvm.io/">安装方法</a></li>
<li><a href="https://ruby-china.org/wiki/rvm-guide">参考</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
</span><span class='line'><span class="se">\c</span>url -sSL https://get.rvm.io <span class="p">|</span> bash -s stable
</span><span class='line'>:<span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 下载命令错误可试试</span>
</span><span class='line'><span class="s1">curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable</span>
</span><span class='line'><span class="s1">&#39;</span>
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="c"># 修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot;</span> &gt; ~/.rvm/user/db
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 列出已知的 Ruby 版本</span>
</span><span class='line'>rvm list known
</span><span class='line'>
</span><span class='line'><span class="c"># 安装一个 Ruby 版本</span>
</span><span class='line'>rvm install 2.2.0 --disable-binary
</span><span class='line'>
</span><span class='line'><span class="c"># 切换 Ruby 版本</span>
</span><span class='line'>rvm use 2.2.0
</span><span class='line'>
</span><span class='line'><span class="c"># 如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本</span>
</span><span class='line'>rvm use 2.2.0 --default
</span><span class='line'>
</span><span class='line'><span class="c"># 查询已经安装的ruby</span>
</span><span class='line'>rvm list
</span><span class='line'>
</span><span class='line'><span class="c"># 卸载一个已安装版本</span>
</span><span class='line'>rvm remove 1.8.7
</span></code></pre></td></tr></table></div></figure>


<h2>gemset</h2>

<p>gemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 建立 gemset</span>
</span><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm gemset create rails23
</span><span class='line'>
</span><span class='line'><span class="c"># use 可以用来切换语言或者 gemset (前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。)</span>
</span><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm use 1.8.7@rails23
</span><span class='line'>
</span><span class='line'><span class="c"># 列出当前 Ruby 的 gemset</span>
</span><span class='line'>rvm gemset list
</span><span class='line'>
</span><span class='line'><span class="c"># 清空 gemset 中的 Gem</span>
</span><span class='line'>rvm gemset empty 1.8.7@rails23
</span><span class='line'>
</span><span class='line'><span class="c"># 删除一个 gemset</span>
</span><span class='line'>rvm gemset delete rails2-3
</span><span class='line'>
</span><span class='line'><span class="c"># 项目自动加载 gemset</span>
</span><span class='line'>:<span class="s1">&#39;</span>
</span><span class='line'><span class="s1"># 项目目录，建立一个 .rvmrc 文件，内容如下</span>
</span><span class='line'><span class="s1">rvm use 1.9.3@rails313</span>
</span><span class='line'>
</span><span class='line'><span class="s1">这样，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</span>
</span><span class='line'><span class="s1">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="rbenv">RBENV</h2></h1>

<ul>
<li>类似 RVM，二者选其一即可</li>
<li><a href="https://ruby-china.org/wiki/rbenv-guide">参考</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
</span><span class='line'><span class="c"># 用来编译安装 ruby</span>
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class='line'><span class="c"># 用来管理 gemset, 可选, 因为有 bundler 也没什么必要</span>
</span><span class='line'>git clone git://github.com/jamis/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset
</span><span class='line'><span class="c"># 通过 gem 命令安装完 gem 后无需手动输入 rbenv rehash 命令, 推荐</span>
</span><span class='line'>git clone git://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
</span><span class='line'><span class="c"># 通过 rbenv update 命令来更新 rbenv 以及所有插件, 推荐</span>
</span><span class='line'>git clone git://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update
</span><span class='line'><span class="c"># 使用 Ruby China 的镜像安装 Ruby, 国内用户推荐</span>
</span><span class='line'>git clone git://github.com/AndorChen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 安装 ruby</span>
</span><span class='line'>rbenv install --list         <span class="c"># 列出所有 ruby 版本</span>
</span><span class='line'>rbenv install 2.4.0          <span class="c"># 安装 2.4.0</span>
</span><span class='line'>rbenv install jruby-1.7.3    <span class="c"># 安装 jruby-1.7.3</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 列出版本</span>
</span><span class='line'>rbenv versions               <span class="c"># 列出安装的版本</span>
</span><span class='line'>rbenv version                <span class="c"># 列出正在使用的版本</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 设置版本</span>
</span><span class='line'>rbenv global 1.9.3-p392      <span class="c"># 默认使用 1.9.3-p392</span>
</span><span class='line'>rbenv shell 1.9.3-p392       <span class="c"># 当前的 shell 使用 1.9.3-p392, 会设置一个 `RBENV_VERSION` 环境变量</span>
</span><span class='line'>rbenv <span class="nb">local </span>jruby-1.7.3      <span class="c"># 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 其他</span>
</span><span class='line'>rbenv rehash                 <span class="c"># 每当切换 ruby 版本和执行 bundle install 之后必须执行这个命令</span>
</span><span class='line'>rbenv which irb              <span class="c"># 列出 irb 这个命令的完整路径</span>
</span><span class='line'>rbenv whence irb             <span class="c"># 列出包含 irb 这个命令的版本</span>
</span></code></pre></td></tr></table></div></figure>


<h2>gemset</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 创建</span>
</span><span class='line'><span class="c"># 参数 1 是已安装的 ruby 版本，参数 2 是 gemset 的名字</span>
</span><span class='line'>rbenv gemset create 1.9.3-p392 ruby-china
</span><span class='line'>
</span><span class='line'><span class="c"># 查看当前 gemset</span>
</span><span class='line'>rbenv gemset active
</span><span class='line'>
</span><span class='line'><span class="c">## 删除</span>
</span><span class='line'>rbenv gemset delete 1.9.3-p392 ruby-china
</span><span class='line'>
</span><span class='line'><span class="c"># 使用</span>
</span><span class='line'>rbenv gemset init ruby-china
</span><span class='line'>
</span><span class='line'><span class="c"># 列出所有 gemset</span>
</span><span class='line'>rbenv gemset list
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="cl">命令行选项</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="o">-</span><span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>选项 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-0octal </td>
<td> 用八进制指定 IO.gets 等识别的换行符</td>
</tr>
<tr>
<td>-a </td>
<td> 指定为自动分割模式 ( 与 -n 或者 -p 选项一起使用时则将 $F 设为 $_.split($;))</td>
</tr>
<tr>
<td>-c </td>
<td> 只检查脚本的语法</td>
</tr>
<tr>
<td>-Cdirectory </td>
<td> 在脚本执行前，先移动到 directory 目录下</td>
</tr>
<tr>
<td>-d、&ndash;debug </td>
<td> 使用 debug 模式(将 $DEBUG 设为 true)</td>
</tr>
<tr>
<td>-e &lsquo;command&rsquo; </td>
<td> 通过 command 指定一行代码的程序。本选项可指定多个</td>
</tr>
<tr>
<td>-Eex[:in]、&ndash;encoding=ex[:in] </td>
<td> 指定默认的外部编码(ex)以及默认的内部编码(in)</td>
</tr>
<tr>
<td>-Fpattern </td>
<td> 指定 String#split 方法使用的默认分隔符($;)</td>
</tr>
<tr>
<td>-i[extension] </td>
<td> 以替换形式编辑 ARGV 文件(指定 extension 时则会生成备份文件)</td>
</tr>
<tr>
<td>-Idirectory </td>
<td> 指定追加到 $LOAD_PATH 的目录。本选项可指定多个</td>
</tr>
<tr>
<td>-l </td>
<td> 删除 -n 或者 -p 选项中的 $_ 的换行符</td>
</tr>
<tr>
<td>-n </td>
<td> 使脚本整体被'while gets();&hellip; end'包围(将gets()的结果设定到$_中)</td>
</tr>
<tr>
<td>-p </td>
<td> 在 -n 选项的基础上，在每次循环结束时输出 $_</td>
</tr>
<tr>
<td>-rlibrary </td>
<td> 在执行脚本前通过 require 引用 library</td>
</tr>
<tr>
<td>-s </td>
<td> 要使脚本解析标志(flag)的功能有效(&lsquo;ruby -s script -abc'，则 $abc 为 true)</td>
</tr>
<tr>
<td>-S </td>
<td> 从环境变量 PATH 开始搜索可执行的脚本</td>
</tr>
<tr>
<td>-Tlevel </td>
<td> 指定不纯度检查模式</td>
</tr>
<tr>
<td>-U </td>
<td> 将内部编码的默认值(Encoding.default_internal)设为 UTF-8</td>
</tr>
<tr>
<td>-v、&ndash;verbose </td>
<td> 显示版本号，冗长模式设定为有效($VERBOSE 设定为 true)</td>
</tr>
<tr>
<td>-w </td>
<td> 冗长模式设定为有效</td>
</tr>
<tr>
<td>-Wlevel </td>
<td> 指定冗长模式的级别 [0= 不输出警告，1= 只输出重要警告，2= 输出全部警告 (默认值)]</td>
</tr>
<tr>
<td>-xdirectory </td>
<td> 忽略执行脚本中 #!ruby 之前的内容</td>
</tr>
<tr>
<td>&ndash;copyright </td>
<td> 显示版权信息</td>
</tr>
<tr>
<td>&ndash;enable=feature[, &hellip;] </td>
<td> 使 feature 有效</td>
</tr>
<tr>
<td>&ndash;disable=feature[, &hellip;] </td>
<td> 使 feature 无效</td>
</tr>
<tr>
<td>&ndash;external-encoding=encoding </td>
<td> 指定默认的外部编码</td>
</tr>
<tr>
<td>&ndash;internal-encoding=encoding </td>
<td> 指定默认的内部编码</td>
</tr>
<tr>
<td>&ndash;version </td>
<td> 显示版本信息</td>
</tr>
<tr>
<td>&ndash;help </td>
<td> 显示帮助信息</td>
</tr>
</tbody>
</table>


<blockquote><p>上表 &ndash;enable、&ndash;disable 选项可指定的功能名</p></blockquote>

<table>
<thead>
<tr>
<th>功能名 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>gems </td>
<td> RubyGems 是否有效(默认有效)</td>
</tr>
<tr>
<td>rubyopt </td>
<td> 是否引用环境变量 RUBYOPT(默认引用)</td>
</tr>
<tr>
<td>did_you_mean </td>
<td> 是否打开拼写检查功能(默认打开)</td>
</tr>
<tr>
<td>frozen-string-literal </td>
<td> 是否 freeze 所有字符串字面量(默认否)</td>
</tr>
<tr>
<td>all </td>
<td> 上述功能是否全部有效</td>
</tr>
</tbody>
</table>


<h1><h2 id="const">预定义变量常量</h2></h1>

<h2>预定义变量</h2>

<ul>
<li>预定义变量是指 Ruby 预先定义好的变量，全部都是以 $ 开头的变量，因此可以像全局变 量那样引用</li>
</ul>


<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>$! </td>
<td> 最后发生的异常的相关信息</td>
</tr>
<tr>
<td>$&ldquo; </td>
<td> $LOADED_FEATURES 的别名</td>
</tr>
<tr>
<td>$$ </td>
<td> 当前执行中的 Ruby 的进程 ID</td>
</tr>
<tr>
<td>$&amp; </td>
<td> 最后一次模式匹配后得到的字符串</td>
</tr>
<tr>
<td>$&lsquo; </td>
<td> 最后一次模式匹配中匹配部分之后的字符串</td>
</tr>
<tr>
<td>$* </td>
<td> ARGV 的别名</td>
</tr>
<tr>
<td>$+ </td>
<td> 最后一次模式匹配中最后一个 () 对应的字符串</td>
</tr>
<tr>
<td>$, </td>
<td> Array#join 的默认分割字符串(默认为 nil)</td>
</tr>
<tr>
<td>$. </td>
<td> 最后读取的文件的行号</td>
</tr>
<tr>
<td>$/ </td>
<td> 输入数据的分隔符(默认为 &ldquo;\n&rdquo;)</td>
</tr>
<tr>
<td>$0 </td>
<td> $PROGRAM_NAME 的别名</td>
</tr>
<tr>
<td>$1、$2&hellip;&hellip; </td>
<td> 最后一次模式匹配中与 () 匹配的字符串(第 n 个 () 对应 $n)</td>
</tr>
<tr>
<td>$: </td>
<td> $LOAD_PATH 的别名</td>
</tr>
<tr>
<td>$; </td>
<td> String#split 的默认分割字符串(默认为 nil)</td>
</tr>
<tr>
<td>$&lt; </td>
<td> ARGF 的别名</td>
</tr>
<tr>
<td>$> </td>
<td> print、puts、p 等的默认输出位置(默认为 STDOUT)</td>
</tr>
<tr>
<td>$? </td>
<td> 最后执行完毕的子进程的状态</td>
</tr>
<tr>
<td>$@ </td>
<td> 最后发生的异常的相关位置信息</td>
</tr>
<tr>
<td>$\ </td>
<td> 输出数据的分隔符(默认为 nil)</td>
</tr>
<tr>
<td>$_ </td>
<td> gets 方法最后读取的字符串</td>
</tr>
<tr>
<td>$` </td>
<td> 最后一次模式匹配中匹配部分之前的字符串</td>
</tr>
<tr>
<td>$~ </td>
<td> 最后一次模式匹配相关的信息</td>
</tr>
<tr>
<td>$DEBUG </td>
<td> 指定 debug 模式的标识(默认为 nil)</td>
</tr>
<tr>
<td>$FILENAME </td>
<td> ARGF 当前在读取的文件名</td>
</tr>
<tr>
<td>$LOADED_FEATURES </td>
<td> require 读取的类库名一览表</td>
</tr>
<tr>
<td>$LOAD_PATH </td>
<td> 执行 require 读取文件时搜索的目录名数组</td>
</tr>
<tr>
<td>$PROGRAM_NAME </td>
<td> 当前执行中的 Ruby 脚本的别名</td>
</tr>
<tr>
<td>$SAFE </td>
<td> 安全模式等级(默认 0)</td>
</tr>
<tr>
<td>$VERBOSE </td>
<td> 指定冗长模式的标识(默认为 nil)</td>
</tr>
<tr>
<td>$stdin </td>
<td> 标准输入(默认为 STDIN)</td>
</tr>
<tr>
<td>$stdout </td>
<td> 标准输出(默认为 STDOUT)</td>
</tr>
<tr>
<td>$stderr </td>
<td> 标准错误输出(默认为 STDERR)</td>
</tr>
</tbody>
</table>


<h2>预定义常量</h2>

<table>
<thead>
<tr>
<th>常量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>ARGF </td>
<td> 参数，或者从标准输入得到的虚拟文件对象</td>
</tr>
<tr>
<td>ARGV </td>
<td> 命令行参数数组</td>
</tr>
<tr>
<td>DATA </td>
<td> 访问 _ <em>END</em> _ 以后数据的文件对象</td>
</tr>
<tr>
<td>ENV </td>
<td> 环境变量</td>
</tr>
<tr>
<td>RUBY_COPYRIGHT </td>
<td> 版权信息</td>
</tr>
<tr>
<td>RUBY_DESCRIPTION </td>
<td> ruby -v 显示的版本信息</td>
</tr>
<tr>
<td>RUBY_ENGINE </td>
<td> Ruby 的处理引擎</td>
</tr>
<tr>
<td>RUBY_PATCHLEVEL </td>
<td> Ruby 的补丁级别</td>
</tr>
<tr>
<td>RUBY_PLATFORM </td>
<td> 运行环境的信息(OS、CPU)</td>
</tr>
<tr>
<td>RUBY_RELEASE_DATE </td>
<td> Ruby 的发布日期</td>
</tr>
<tr>
<td>RUBY_VERSION </td>
<td> Ruby 的版本</td>
</tr>
<tr>
<td>STDERR </td>
<td> 标准错误输出</td>
</tr>
<tr>
<td>STDIN </td>
<td> 标准输入</td>
</tr>
<tr>
<td>STDOUT </td>
<td> 标准输出</td>
</tr>
</tbody>
</table>


<h2>伪变量</h2>

<ul>
<li>伪变量虽然可以像变量那样引用，但是不能改变其本身的值，对其赋值会产生错误</li>
</ul>


<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>self </td>
<td> 默认的接收者</td>
</tr>
<tr>
<td>nil、true、false </td>
<td> nil、true、false</td>
</tr>
<tr>
<td><code>__FILE__</code> </td>
<td> 执行中的 Ruby 脚本的文件名</td>
</tr>
<tr>
<td><code>__LINE__</code> </td>
<td> 执行中的 Ruby 脚本的行编号</td>
</tr>
<tr>
<td><code>__ENCODING__</code> </td>
<td> 脚本的编码</td>
</tr>
</tbody>
</table>


<h2>环境变量</h2>

<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>RUBYLIB </td>
<td> 追加到预定义变量 $LOAD_PATH 中的目录名(各目录间用 : 分隔)</td>
</tr>
<tr>
<td>RUBYOPT </td>
<td> 启动 Ruby 时的默认选项(RUBYOPT = &ldquo;-U -v&rdquo; 等)</td>
</tr>
<tr>
<td>RUBYPATH </td>
<td> -S 选项指定的、解析器启动时脚本的搜索路径</td>
</tr>
<tr>
<td>PATH </td>
<td> 外部命令的搜索路径</td>
</tr>
<tr>
<td>HOME </td>
<td> DIR.chdir 方法的默认移动位置</td>
</tr>
<tr>
<td>LOGDIR </td>
<td> 没有 HOME 时的 DIR.chdir 方法的默认移动位置</td>
</tr>
<tr>
<td>LC_ALL、LC_CTYPE、LANG </td>
<td> 决定默认编码的本地信息(平台依赖)</td>
</tr>
<tr>
<td>RUBYSHELL、COMSPEC </td>
<td> 执行外部命令时，shell 需要使用的解析器路径(平台依赖)</td>
</tr>
</tbody>
</table>


<h1><h2 id="basic">基础</h2></h1>

<h2>注释</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 单行注释</span>
</span><span class='line'>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">多</span>
</span><span class='line'><span class="cm">行</span>
</span><span class='line'><span class="cm">注</span>
</span><span class='line'><span class="cm">释</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>变量</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="nb">print</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<h2>控制语句</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># then 可省略</span>
</span><span class='line'><span class="k">if</span> <span class="n">expr</span> <span class="k">then</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">elseif</span> <span class="n">expr2</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="kp">true</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 迭代器 times</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>if while 碰到 false 或 nil，认为为假，其余都为真</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;小林&quot;</span><span class="p">,</span> <span class="s2">&quot;林&quot;</span><span class="p">,</span> <span class="s2">&quot;高野&quot;</span><span class="p">,</span> <span class="s2">&quot;森岗&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="nb">name</span> <span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="sr">/林/</span> <span class="o">=~</span> <span class="nb">name</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 小林</span>
</span><span class='line'><span class="c1"># 林</span>
</span></code></pre></td></tr></table></div></figure>


<h2>字符串</h2>

<ul>
<li>单引号不转义 <code>'hello.\n'</code> 输出 <code>hello.\n</code>，且不能插值</li>
<li>双引号会转义 <code>"hello.\n"</code> 输出 <code>hello 并且有换行</code>，可插值 <code>"#{我是变量} aaaa"</code></li>
</ul>


<h2>数值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span>    <span class="c1"># Fixnum 对象</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="mi">14</span> <span class="c1"># Float 对象</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 数学相关函数</span>
</span><span class='line'><span class="no">Math</span><span class="o">.</span><span class="n">sin</span>
</span><span class='line'><span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>symbol</h2>

<ul>
<li>与字符串对象类似，符号也是对象，一般作为名称标签使用，表示方法等的对象的名称</li>
<li>符号能实现的功能，大部分字符串也能实现。但在像散列的键这样只是单纯判断 &ldquo;是否相等&rdquo; 的处理中，使用符号会比字符串更加有效率</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sym</span> <span class="o">=</span> <span class="ss">:foo</span>
</span><span class='line'><span class="n">sym2</span> <span class="o">=</span> <span class="ss">:&quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 符号转字符串</span>
</span><span class='line'><span class="n">sym</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="c1"># 字符串转符号</span>
</span><span class='line'><span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_sym</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对象</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 数组</span>
</span><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">names</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># &quot;a&quot;</span>
</span><span class='line'><span class="n">names</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;aa&quot;</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">size</span> <span class="c1"># 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># each 方法返回值为 [&quot;aa&quot;, &quot;b&quot;, &quot;c&quot;]</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">item</span> <span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">item</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 散列</span>
</span><span class='line'><span class="c1"># 散列的 key 是符号类型 symbol 或者字符串 在这种只是单纯判断相等的情况下，比字符串性能更好</span>
</span><span class='line'><span class="n">sym</span> <span class="o">=</span> <span class="ss">:foo</span>
</span><span class='line'><span class="n">sym</span><span class="o">.</span><span class="n">to_s</span>     <span class="c1"># &quot;foo&quot;</span>
</span><span class='line'><span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_sym</span> <span class="c1"># :foo</span>
</span><span class='line'>
</span><span class='line'><span class="n">address1</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;wt&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="n">address2</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;wt&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="c1"># address1 的简写(key 为符号)</span>
</span><span class='line'>
</span><span class='line'><span class="n">address3</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;wt&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span> <span class="c1"># key 为字符串</span>
</span><span class='line'>
</span><span class='line'><span class="n">address1</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="c1"># &quot;wt&quot;</span>
</span><span class='line'><span class="n">address1</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># each 方法返回值为 { :name =&gt; &quot;wt&quot;, :id =&gt; 2 }</span>
</span><span class='line'><span class="n">address1</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 正则</span>
</span><span class='line'><span class="c1"># /xxx/ 是正则，=~ 用于匹配正则和字符串</span>
</span><span class='line'><span class="c1"># i 表不区分大小写</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/Ruby/</span> <span class="o">=~</span> <span class="s2">&quot;Ruby&quot;</span>    <span class="c1"># 0</span>
</span><span class='line'><span class="sr">/Ruby/</span> <span class="o">=~</span> <span class="s2">&quot;Diamond&quot;</span> <span class="c1"># nil</span>
</span><span class='line'><span class="sr">/Ruby/i</span> <span class="o">=~</span> <span class="s2">&quot;RUBY&quot;</span>   <span class="c1"># 0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>nil</h2>

<p>nil 是个特殊的值，表示对象不存在</p>

<ul>
<li>方法不能返回有意义的值时就会返回 nil</li>
<li>从数组或者散列中获取对象时，若指定不存在的索引或者键，则得到的返回值也是 nil</li>
</ul>


<h2>方法</h2>

<p>ruby 在调用方法时可以省略 <code>()</code></p>

<p> ```ruby
def foo
    puts 123
end</p>

<p>foo()
foo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">```ruby</span>
</span><span class='line'><span class="sb">print(&quot;hello, ruby.</span><span class="se">\n</span><span class="sb">&quot;)</span>
</span><span class='line'><span class="sb">print &quot;hello, ruby.</span><span class="se">\n</span><span class="sb">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">print(&quot;hello, &quot;, &quot;ruby&quot;, &quot;.&quot;, &quot;</span><span class="se">\n</span><span class="sb">&quot;)</span>
</span><span class='line'><span class="sb">print &quot;hello, &quot;, &quot;ruby&quot;, &quot;.&quot;, &quot;</span><span class="se">\n</span><span class="sb">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>output</h2>

<p><code>print/puts/p/pp</code></p>

<ul>
<li>puts 在结尾会自动输出换行符</li>
<li>使用 p 方法时，数值结果和字符串结果会以不同的形式输出</li>
<li>pp 需要 <code>require "pp</code> 可以有格式的打印散列、数组</li>
</ul>


<h2>引用其他文件</h2>

<p>被其他程序引用的程序，称为库</p>

<ul>
<li>require 希望引用的库名

<ul>
<li>用 require 方法后，Ruby 会搜索参数指定的库，并读取库的所有内容。库内容读取完毕后，程序才会执行 require 方法后面的处理</li>
<li>require 方法用于引用已存在的库。只需要指定库名，程序就会在预先定义好的路径下查 找并读取与 Ruby 一起安装的库</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;date&quot;</span> <span class="c1"># 引入标准库</span>
</span><span class='line'>
</span><span class='line'><span class="n">days</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">tody</span> <span class="o">-</span> <span class="no">Date</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1993</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="n">days</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span> <span class="c1"># 8323</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>require_relative 希望引用的库名

<ul>
<li>require_relative 方法在查找库时，则是根据执行中的程序目录(文件夹)来进行的</li>
</ul>
</li>
</ul>


<p> ```ruby</p>

<h1>fun.rb</h1>

<p>def foo(a, b)
    puts a, b
end</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">```ruby</span>
</span><span class='line'><span class="sb"># use_fun.rb</span>
</span><span class='line'><span class="sb">require_relative &quot;fun&quot;</span>
</span><span class='line'><span class="sb">foo()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用中文</h2>

<ul>
<li>在某些 ruby 运行环境中，执行包含中文的脚本时，有可能出错，可在程序首行添加魔法注释类指定编码格式</li>
<li>如没指定魔法注释，ruby 会默认使用 UTF-8 编码方式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: GBK</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外，使用 p 方法输出中文时也可能会出现乱码，可用 <code>-E 编码方式</code> 来指定输出结果的编码方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -E UTF-8
</span><span class='line'>irb -E UTF-8
</span></code></pre></td></tr></table></div></figure>


<h2>文件读取</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># read_text.rb</span>
</span><span class='line'><span class="c1"># 执行命令 ruby read_text.rb test.txt</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一次读取整个文件内容 1</span>
</span><span class='line'><span class="c1"># 使用 ARGV 这个内置变量可得到命令行传递来的参数数组</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="nb">print</span> <span class="n">text</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ---------------------------------------</span>
</span><span class='line'><span class="c1"># 一次读取整个文件内容 2</span>
</span><span class='line'><span class="nb">print</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 逐行读</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span> <span class="n">line</span> <span class="o">|</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># --------------------------------------</span>
</span><span class='line'><span class="c1"># 文件中读取指定模式的内容并输出</span>
</span><span class='line'><span class="c1"># 命令 ruby read_text.rb 模式 文件名</span>
</span><span class='line'><span class="n">pattern</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span> <span class="n">line</span> <span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pattern</span> <span class="o">=~</span> <span class="n">line</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - Typedef, Generic, Enum, @class]]></title>
    <link href="http://away0x.github.io/blog/2018/02/11/oc-typedef-generic-enum-class/"/>
    <updated>2018-02-11T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/11/oc-typedef-generic-enum-class</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#typedef">typedef</a></li>
<li><a href="#generic">generic</a></li>
<li><a href="#enum">enum</a></li>
<li><a href="#class">@class</a></li>
</ul>


<h1><h2 id="typedef">typedef</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 未使用别名</span>
</span><span class='line'><span class="k">enum</span> <span class="n">IColor</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">kIColorBlack</span><span class="p">,</span>
</span><span class='line'>    <span class="n">kIColorWhite</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Iphone</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">enum</span> <span class="n">IColor</span> <span class="n">_color</span><span class="p">;</span> <span class="c1">// 类型名很长</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Iphone</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用别名</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">kIColorBlack</span><span class="p">,</span>
</span><span class='line'>    <span class="n">kIColorWhite</span>
</span><span class='line'><span class="p">}</span> <span class="n">IColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Iphone</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">IColor</span> <span class="n">_color</span><span class="p">;</span> <span class="c1">// 使用类型别名</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Iphone</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Iphone</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Iphone</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">_color</span> <span class="o">=</span> <span class="n">kIColorBlack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="generic">generic</h2></h1>

<blockquote><p>iOS9+</p></blockquote>

<ol>
<li>用于限制类型</li>
<li>提高代码规划，减少沟通成本</li>
<li>限制集合里的存储类型，不限制的话都是 id 类型

<ul>
<li>限制后只能存储对应类型，且由于有了具体类型，取出时可以使用点语法</li>
<li>id 类型是不能使用点语法的</li>
</ul>
</li>
<li>泛型仅仅是报警告</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 不用泛型 --------</span>
</span><span class='line'><span class="c1">// 属性</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">arr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="p">[</span><span class="n">_arr</span> <span class="nl">addObject</span><span class="p">:</span><span class="s">@&quot;112&quot;</span><span class="p">];</span> <span class="c1">// 由于定义时没用泛型，所以这里 add 进去的其实是 id 类型</span>
</span><span class='line'><span class="n">_arr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">length</span><span class="p">;</span> <span class="c1">// 报错，_arr[0] 里面是 id 类型，id 类型不能使用点语法</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用泛型 --------</span>
</span><span class='line'><span class="c1">// 属性</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableArray</span><span class="o">&lt;</span><span class="bp">NSString</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">arr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="p">[</span><span class="n">_arr</span> <span class="nl">addObject</span><span class="p">:</span><span class="s">@&quot;112&quot;</span><span class="p">];</span> <span class="c1">// add 的是 NSString 类型</span>
</span><span class='line'><span class="n">_arr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">length</span><span class="p">;</span> <span class="c1">// 不报错，数组里是 NSString 类型</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 参数</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span><span class="o">&lt;</span><span class="bp">UITouch</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 限定类型</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Test</span><span class="o">&lt;</span><span class="n">ObjectType</span><span class="o">&gt;</span> <span class="o">:</span> <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">ObjectType</span> <span class="n">language</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="n">Java</span> <span class="o">*</span><span class="n">java</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Java</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">iOS</span> <span class="o">*</span><span class="n">ios</span> <span class="o">=</span> <span class="p">[[</span><span class="n">iOS</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Test</span><span class="o">&lt;</span><span class="n">iOS</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Test</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">t</span><span class="p">.</span><span class="n">language</span> <span class="o">=</span> <span class="n">ios</span><span class="p">;</span>  <span class="c1">// 泛型限制了，这里只能设置 iOS 类型</span>
</span><span class='line'><span class="n">t</span><span class="p">.</span><span class="n">language</span> <span class="o">=</span> <span class="n">java</span><span class="p">;</span> <span class="c1">// 报警告</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="enum">enum</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 第一种写法 (无法设置枚举值类型)</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DemoTypeTop</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DemoTypeBottom</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="n">DemoType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第二种写法 (可设置枚举值类型)</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">,</span> <span class="n">DemoType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DemoTypeTop</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DemoTypeBottom</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第三种写法 (位移枚举)</span>
</span><span class='line'><span class="c1">// 更强大，使用时可用并运算</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">,</span> <span class="n">DemoType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DemoTypeTop</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>    <span class="c1">// 1*2^0 = 1</span>
</span><span class='line'>    <span class="n">DemoTypeBottom</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">// 1*2^1 = 2</span>
</span><span class='line'>    <span class="n">DemoTypeLeft</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span>   <span class="c1">// 1*2^2 = 4</span>
</span><span class='line'>    <span class="n">DemoTypeRight</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">,</span>  <span class="c1">// 1*2^3 = 8</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>位移枚举可进行位运算</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 按位与 &amp;</span>
</span><span class='line'><span class="c1">//    1&amp;1==1 1&amp;0==0 0&amp;0==0</span>
</span><span class='line'><span class="c1">//    总结: 只有有 0 则为 0</span>
</span><span class='line'><span class="c1">// 按位或 |</span>
</span><span class='line'><span class="c1">//    1|1==1 1|0==1 0|0==0</span>
</span><span class='line'><span class="c1">//    总结: 只有有 1 则为 1</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">demo:</span><span class="p">(</span><span class="n">DemoType</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeTop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;top --- %zd&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeTop</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeBottom</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;bottom --- %zd&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeBottom</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeLeft</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;left --- %zd&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeLeft</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeRight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;right --- %zd&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">&amp;</span> <span class="n">DemoTypeRight</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">demo</span><span class="p">:</span><span class="n">DemoTypeTop</span> <span class="o">|</span> <span class="n">DemoTypeRight</span><span class="p">];</span> <span class="c1">// 打印 top 和 right</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">demo</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// 什么都不会打印</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 小技巧</span>
</span><span class='line'>    <span class="c1">// 如是位移枚举，可观察第一个枚举值，如该枚举值不为 0</span>
</span><span class='line'>    <span class="c1">// 那么可默认传 0 做参数，如传 0，那么效率最高 (因为什么额外操作都不会做)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>枚举中的位运算</h2>

<ul>
<li>位移枚举，可以使用并运算 <code>|</code></li>
<li>一般情况下，如方法参数是枚举值，那么可用过 <code>|</code> 符号，连接多个枚举值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="bp">NSDate</span> <span class="o">*</span><span class="n">now</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 分别获取 年月日时分秒</span>
</span><span class='line'><span class="c1">// 如方法参数是位移枚举，那么可用过 | 符号，连接多个枚举值</span>
</span><span class='line'><span class="n">NSCalendarUnit</span> <span class="n">type</span> <span class="o">=</span> <span class="n">NSCalendarUnitYear</span> <span class="o">|</span>
</span><span class='line'>                      <span class="n">NSCalendarUnitMonth</span> <span class="o">|</span>
</span><span class='line'>                      <span class="n">NSCalendarUnitDay</span> <span class="o">|</span>
</span><span class='line'>                      <span class="n">NSCalendarUnitHour</span> <span class="o">|</span>
</span><span class='line'>                      <span class="n">NSCalendarUnitMinute</span> <span class="o">|</span>
</span><span class='line'>                      <span class="n">NSCalendarUnitSecond</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSDateComponents</span> <span class="o">*</span><span class="n">cmps</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">components</span><span class="p">:</span><span class="n">type</span> <span class="nl">fromDate</span><span class="p">:</span><span class="n">now</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;year = %ld&quot;</span><span class="p">,</span> <span class="n">cmps</span><span class="p">.</span><span class="n">year</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;month = %ld&quot;</span><span class="p">,</span> <span class="n">cmps</span><span class="p">.</span><span class="n">month</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;day = %ld&quot;</span><span class="p">,</span> <span class="n">cmps</span><span class="p">.</span><span class="n">day</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;hour = %ld&quot;</span><span class="p">,</span> <span class="n">cmps</span><span class="p">.</span><span class="n">hour</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;minute = %ld&quot;</span><span class="p">,</span> <span class="n">cmps</span><span class="p">.</span><span class="n">minute</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;second = %ld&quot;</span><span class="p">,</span> <span class="n">cmps</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="class">@class</h2></h1>

<p>作用: 可以简单的引用一个类</p>

<ul>
<li><p>简单使用: <code>@class Dog;</code> 仅仅是告诉编译器: Dog 是一个类，并不会包含 Dog 这个类的所有内容</p></li>
<li><p><code>@class:</code> 在 <code>.h</code> 文件中使用 <code>@class</code> 引用一个类</p>

<ul>
<li>仅仅只是告诉编译器，<code>@class</code>后面的名称是一个类，不会做任何拷贝操作</li>
<li>注意: 编译器不会知道这个类中有哪些属性和方法，所以在 <code>.m</code> 中使用这个类时，需要 import 这个类，才能使用</li>
</ul>
</li>
<li><code>#import:</code>在 <code>.m</code> 文件中使用 <code>#import</code> 包含这个类的 <code>.h</code> 文件

<ul>
<li>会将整个文件的代码拷贝到 import 所在的位置</li>
<li>只要 import 的文件发生了改变，那么 import 就会重新拷贝一次 (更新操作)

<ul>
<li>多个类时，编译效率变慢</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// Person2.h 中</span>
</span><span class='line'><span class="k">@class</span> <span class="nc">Person1</span>; <span class="c1">// 该文件中引入 Person1 类</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Person2.m 中</span>
</span><span class='line'><span class="cp">#import &quot;Person1.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在 A 类中要包含 B类，B 类中又要包含 A 类，则 <code>.h</code> 中一定要用 <code>@class</code> 避免循环引入</p>

<ul>
<li>总结:

<ol>
<li>在 <code>.h</code> 中使用 <code>@class</code> 引用一个类</li>
<li>在 <code>.m</code> 文件中使用 <code>#import</code> 包含这个类的 <code>.h</code> 文件</li>
</ol>
</li>
</ul>


<h2>@class 其他应用场景</h2>

<p>对于循环依赖关系来说，比方 A 类引用 B 类，同时 B 类也引用 A 类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 这种嵌套包含的代码编译会报错</span>
</span><span class='line'><span class="cp">#import &quot;B.h&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">B</span> <span class="o">*</span><span class="n">_b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;A.h&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">B</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="o">*</span><span class="n">_a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 当使用 @class 在两个类相互声明，就不会出现编译报错</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">B</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">B</span> <span class="o">*</span><span class="n">_b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">A</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">B</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="o">*</span><span class="n">_a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@class 和 #import 的区别</h2>

<ul>
<li>作用上的区别

<ul>
<li>import 会包含引用类的所有信息(内容)，包括引用类的变量和方法</li>
<li>@class 仅仅是告诉编译器有这么个类，具体这个类有什么信息，完全不知</li>
</ul>
</li>
<li>效率上的区别

<ul>
<li>如果有上百个头文件都 <code>#import</code> 了同一个文件，或者这些文件依次被 <code>#import</code>，那么一旦最开始的头文件有所改动，后面引用到这个文件的所有类都需要重新编译一遍，编译效率非常低</li>
<li>相对来讲，使用 <code>@class</code> 就不会出现这个问题了</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - Const, Static, Extern]]></title>
    <link href="http://away0x.github.io/blog/2018/02/10/oc-const-static-extern/"/>
    <updated>2018-02-10T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/10/oc-const-static-extern</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#const">const</a></li>
<li><a href="#static">static</a></li>
<li><a href="#extern">extern</a></li>
</ul>


<h1><h2 id="const">const</h2></h1>

<blockquote><p>苹果推荐使用 const 常量替代宏字符串常量</p></blockquote>

<h2>const 与宏的区别</h2>

<ol>
<li><strong>编译时刻:</strong> 宏是<strong>预编译</strong>(编译之前处理)，const 是<strong>编译阶段</strong></li>
<li><strong>编译检查:</strong> 宏不做检查，不会报编译错误，只是替换，const 会编译检查，会报编译错误</li>
<li><strong>宏的好处:</strong> 宏能定义一些函数、方法。const 则不能</li>
<li><strong>宏的坏处:</strong> 使用大量宏，容易造成编译时间久，每次都需要重新替换</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 宏</span>
</span><span class='line'><span class="cp">#define MyAccount @&quot;account&quot;</span>
</span><span class='line'><span class="cp">#define MyUserDefault [NSUserDefaults standardUserDefaults]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 字符串常量</span>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">account</span> <span class="o">=</span> <span class="s">@&quot;account&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用宏</span>
</span><span class='line'>    <span class="p">[</span><span class="n">MyUserDefault</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;123&quot;</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">MyAccount</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用 const 常量</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;123&quot;</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">account</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用</h2>

<ul>
<li>作用

<ol>
<li>修饰右边的基本变量或指针变量</li>
<li>被 cosnt 修饰的变量是只读的</li>
</ol>
</li>
<li>使用场景

<ol>
<li>修饰全局只读变量</li>
<li>修饰方法中只读参数</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// 可以修改</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// 也可这样写 const int b = 3;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// 不可修改，报错</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// const 修饰指针变量</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// 3</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// 5</span>
</span><span class='line'><span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// 8</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// const 修饰 *p</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span> <span class="c1">// p 可以修改</span>
</span><span class='line'><span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span> <span class="c1">// *p 被 const 修饰了，不可修改，会报错</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// const 修饰 p</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span> <span class="c1">// p 被 const 修饰了，不可修改，会报错</span>
</span><span class='line'><span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span> <span class="c1">// *p 可被修改</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="n">p</span><span class="p">;</span>       <span class="c1">// p: 不可修改，*p: 可修改</span>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>        <span class="c1">// p: 可修改，  *p: 不可修改</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>       <span class="c1">// p: 可修改，  *p: 不可修改</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// p: 不可修改，*p: 不可修改</span>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span> <span class="k">const</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// p: 不可修改，*p: 不可修改</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="static">static</h2></h1>

<ol>
<li>修饰局部变量，被其修饰的局部变量，会延长生命周期，生命长度跟整个应用程序有关

<ul>
<li>被 static 修饰的局部变量，只会分配一次内存</li>
<li>被 static 修饰的局部变量，程序一运行就会给其分配内存</li>
</ul>
</li>
<li>修饰全局变量，被 static 修饰的全局变量，作用域会修改，只能在当前文件下使用</li>
</ol>


<h2>static 和 const 联合使用</h2>

<ul>
<li>cosnt 修饰全局变量，使其只读</li>
<li>static 修饰全局变量，使其作用域为文件作用域</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 只在当前文件中可访问到的只读全局变量</span>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;wt&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="extern">extern</h2></h1>

<ol>
<li>用于声明(使用)外部全局变量，<strong>注意: 其只能用于声明，不能用于定义</strong></li>
<li>工作原理: 先会去当前文件下查找有无对应全局变量，如没有，才会去其他文件查找</li>
<li>全局变量在程序运行时就会分配，如 A 文件中定义了全局变量 <code>int a = 0</code>，在 B 文件中可用 <code>extern int a</code> 来使用它</li>
<li>如该全局变量使用 static 修饰，那么 extern 无法找到它，因为其是文件作用域</li>
</ol>


<h2>extern 和 const 联合使用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// A 类</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">a</span> <span class="o">=</span> <span class="s">@&quot;a&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">A</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 使用全局变量 a</span>
</span><span class='line'><span class="k">extern</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">B</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// &quot;a&quot; 可读到</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="s">@&quot;aa&quot;</span><span class="p">;</span>       <span class="c1">// 报错，a 被 const 修饰了，不可修改</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意点</h2>

<ul>
<li>注意: 全局变量不能定义在自己的类中

<ul>
<li>如多个文件声明了同名的全局变量，会编译失败</li>
</ul>
</li>
<li>可自己创建一个管理全局变量的类，如 <code>GlobeConst</code>

<ul>
<li>在 m 文件中定义全局变量，在 h 中使用 extern 引用，这样其他文件要使用这些全局变量，只要引用 <code>GlobeConst.h</code> 文件即可</li>
<li><code>GlobeConst</code> 中的全局变量使用 const 修饰，避免其他文件使用时对其修改了</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// GlobeConst.h</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">one_name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// GlobeConst.m</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">one_name</span> <span class="o">=</span> <span class="s">@&quot;one name&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 其他文件</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;GlobeConst.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">one_name</span><span class="p">);</span> <span class="c1">// &quot;one name&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - Property, Synthesize]]></title>
    <link href="http://away0x.github.io/blog/2018/02/09/oc-property-synthesize/"/>
    <updated>2018-02-09T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/09/oc-property-synthesize</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>Xcode4.4之前 @property 用于生成实例变量 getter/setter 的声明，@synthesize 用于生成 getter/setter 的实现</p>

<p>@property 和 @synthesize 在 Xcode4.4 以前一直都是配合着使用，在 4.4 以后，@property 得到了增强，一行代码编译器就会自动帮我们生成 setter 和  getter 方法的声明和实现，同时在 m 文件中声明一个和属性名一样并且在最前面带有下划线的实例变量 (私有的)</p></blockquote>

<ul>
<li><a href="#property">Property</a></li>
<li><a href="#synthesize">Synthesize</a></li>
</ul>


<h1><h2 id="property">Property</h2></h1>

<ul>
<li>@property 是一个编译器指令</li>
<li>可以使用 @property 来代替 getter/setter 方法的声明和实现

<ul>
<li>即只要写 @property 就不用写 getter/setter 方法了</li>
<li>但 @property 生成的 getter/setter 十分简单，想增强，可自己重写</li>
<li>但如<strong>同时重写(只重写其一不会)</strong>了 getter/setter @property 就不会自动生成私有的实例变量</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 使用实例变量 getter/setter</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// setter</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAge:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">age</span><span class="p">;</span>
</span><span class='line'><span class="c1">// getter</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">age</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 使用 property 替代 实例变量 getter/setter</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 编译器只要看到 property，就做下面的事情</span>
</span><span class='line'><span class="c1">//    - 编译时生成一个实例变量 _age</span>
</span><span class='line'><span class="c1">//    - 生成 getter/setter 的声明</span>
</span><span class='line'><span class="c1">//    - 生成 getter/setter 的实现</span>
</span><span class='line'><span class="k">@property</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span> <span class="c1">// property 名不用写下划线</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">p</span> <span class="nl">setAge</span><span class="p">:</span><span class="mi">11</span><span class="p">];</span> <span class="c1">// 可使用 setter 了</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Property 修饰符</h2>

<ul>
<li><code>@property (修饰符1, 修饰符2, ...) 数据类型 变量名;</code></li>
<li>不写修饰符默认为 <code>(atomic, assign, readwrite)</code></li>
</ul>


<h3>readwrite, readonly</h3>

<ul>
<li>readwrite: (默认) 可读可写，生成 getter/setter</li>
<li>readonly: 只读，只生成 getter</li>
<li>也可指定生成的方法的名称</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">getter</span><span class="o">=</span><span class="n">isMarried</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">married</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 通常 BOOL 类型的属性的 getter 要以 is 开头</span>
</span></code></pre></td></tr></table></div></figure>


<h3>getter, setter</h3>

<ul>
<li>getter: 可以给生成的 getter 方法起一个名称</li>
<li>setter: 可以给生成的 setter 方法起一个名称</li>
</ul>


<h3>atomic, nonatomic</h3>

<ul>
<li>atomic: 线程安全，为 setter 加锁，默认就是 atomic，需要消耗大量的资源</li>
<li>nonatomic: 非线程安全，不会为 setter 加锁，适合内存小的移动设备</li>
</ul>


<h3>retain</h3>

<p>自动生成 set 方法内存管理的代码</p>

<ul>
<li>指针的拷贝，使用的是原来的内存空间，对象的索引计数加1</li>
<li>此属性只能用于Objective-C对象类型，而不能用于Core Foundation对象。

<ul>
<li>原因很明显，retain会增加对象的引用计数，而基本数据类型或者 Core Foundation 对象都没有引用计数</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setBook:</span><span class="p">(</span><span class="n">Book</span> <span class="o">*</span><span class="p">)</span><span class="nv">book</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_book</span> <span class="o">!=</span> <span class="n">book</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_book</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_book</span> <span class="o">=</span> <span class="p">[</span><span class="n">book</span> <span class="k">retain</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>assign</h3>

<p>不会生成 set 方法内存管理的代码，仅仅只会生成普通的 set 方法</p>

<ul>
<li>直接赋值，索引计数不改变，适用于简单数据类型，例如：NSIngeter、CGFloat、int、char 等</li>
<li>修饰对象了类型时，不改变其引用计数</li>
<li>所指对象在被释放之后，仍指向那块内存地址，会产生悬垂指针</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setBook:</span><span class="p">(</span><span class="n">Book</span> <span class="o">*</span><span class="p">)</span><span class="nv">book</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_book</span> <span class="o">=</span> <span class="n">book</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>weak, strong</h3>

<ul>
<li>weak:

<ul>
<li>不改变被修饰对象的引用计数</li>
<li>所指对象在被释放之后会自动置为 nil</li>
<li><code>assign 和 weak 的区别</code>:

<ol>
<li><code>weak / __weak</code>: 弱指针，不会让引用计数器加一，如果指向的对象被销毁，指针会自动清空</li>
<li><code>assign / __unsafe_unretained</code>: 不会让引用计数器加一，如果指向的对象被销毁，指针不会清空</li>
</ol>
</li>
</ul>
</li>
<li>strong: 强指针 <code>__strong</code></li>
</ul>


<h3>copy</h3>

<p>对象的拷贝，新申请一块内存空间，并把原始内容复制到那片空间，新对象的索引计数为 1</p>

<ul>
<li>对象进行拷贝，对于不可变对象拷贝为不可变对象会创建新对象</li>
<li>此属性只对那些实行了 NSCopying 协议的对象类型有效</li>
<li>很多 Objective-C 中的 object 最好使用用 retain，一些特别的 object（例如：string）使用 copy</li>
<li>详见内存管理笔记</li>
<li>会先判断这个对象是可变的还是不可变的

<ul>
<li>所以如该对象不可变可使用 strong，避免判断，以提高性能</li>
</ul>
</li>
<li><strong>一般就用于 NSString 和 block</strong></li>
</ul>


<table>
<thead>
<tr>
<th> 源对象类型 </th>
<th> 拷贝方式 </th>
<th> 目标对象类型 </th>
<th> 拷贝类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td> mutable 对象 </td>
<td> copy </td>
<td> 不可变 </td>
<td> 深拷贝 </td>
</tr>
<tr>
<td> mutable 对象 mutableCopy </td>
<td> 可变 </td>
<td> 深拷贝 </td>
<td></td>
</tr>
<tr>
<td> immutable 对象 </td>
<td> copy </td>
<td> 不可变 </td>
<td> 浅拷贝 </td>
</tr>
<tr>
<td> immutable 对象 </td>
<td> mutableCopy </td>
<td> 可变 </td>
<td> 深拷贝 </td>
</tr>
</tbody>
</table>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSMutableArray</span><span class="o">*</span> <span class="n">arr</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 赋值过来的是 NSMutableArray，copy 之后是 NSArray</span>
</span><span class='line'><span class="c1">// 赋值过来的是 NSArray，copy 之后是 NSArray</span>
</span><span class='line'><span class="c1">// 所以这样定义容易出现一些异常</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="synthesize">Synthesize</h2></h1>

<ul>
<li>@synthesize 是一个编译器指令</li>
<li>通常使用 @property 生成了 getter/setter

<ul>
<li>可用 synthesize 来修改属性的名称</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 相当于下面的代码</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">    int _age;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">- (void)setAge:(int)age;</span>
</span><span class='line'><span class="cm">- (int)age;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">// 并且还在 implementation 中生成了对应的实现</span>
</span><span class='line'><span class="cm">- (void)setAge:(int)age {</span>
</span><span class='line'><span class="cm">    _age = age;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">- (int)age {</span>
</span><span class='line'><span class="cm">    return _age;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 告诉编译器，需要实现哪个 @property 生成的声明</span>
</span><span class='line'><span class="c1">//   这里需要实现的是 age property</span>
</span><span class='line'><span class="c1">// 告诉 @synthesize，需要将传入的值赋给谁和返回谁的值给调用者</span>
</span><span class='line'><span class="c1">// 如只写 @synthesize age 那么相当于 @synthesize age = age</span>
</span><span class='line'><span class="c1">// </span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">age</span> <span class="o">=</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 相当于下面的代码</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">- (void)setAge:(int)age {</span>
</span><span class='line'><span class="cm">    _age = age;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">- (int)age {</span>
</span><span class='line'><span class="cm">    return _age;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">age</span> <span class="o">=</span> <span class="err">$</span><span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 相当于下面的代码</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">- (void)setAge:(int)age {</span>
</span><span class='line'><span class="cm">    $age = age;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">- (int)age {</span>
</span><span class='line'><span class="cm">    return $age;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用场景</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 生成了实例变量 _age，并且实现了它的 getter/setter 的声明和实现</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当同时重写了 setter/getter 时，系统会报错，原因是找不到 _age 这个变量</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解决方法一 (在 .h 的文件中声明这个属性)</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解决方法二 (在 .m 的文件中使用 @synthesize)</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">age</span> <span class="o">=</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 由于自己重写了 setter/getter 所以得定义下 synthesize</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">age</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAge:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">age</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_age</span> <span class="o">=</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">@synthesize age = _age 告诉编译器有个叫 _age 的实例变量，它是方法 age 以及 setAge 的实例变量，如果它不存在，就要将它创建出来</span>
</span><span class='line'>
</span><span class='line'><span class="cm">通过这个看似像是赋值的一个操作</span>
</span><span class='line'><span class="cm">我们可以在 @synthesize 中定义与变量名不同的 setter 和 getter 的命名</span>
</span><span class='line'><span class="cm">以此来保护变量不会被不恰当的访问</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - Description, Category, Extention]]></title>
    <link href="http://away0x.github.io/blog/2018/02/08/oc-description-category-extention/"/>
    <updated>2018-02-08T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/08/oc-description-category-extention</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#description">Description</a></li>
<li><a href="#category">Category</a></li>
<li><a href="#extention">Extention</a></li>
</ul>


<h1><h2 id="description">Description</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 这会调用 A 的 description 方法来输出 A 的描述信息</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">A</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>description 方法默认返回对象的描述信息 (默认实现是返回类名和对象的内存地址)</li>
<li>description 方法是基类 NSObject 所带的方法，我们可以重写其来输出对象的信息</li>
<li>注意:

<ol>
<li>description 中尽量不要使用 self 来打印</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">description</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 打印 self 应用 %p</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">);</span> <span class="c1">// 这样才行</span>
</span><span class='line'>    <span class="c1">// NSLog(@&quot;%@&quot;, self); // 使用 %@ 打印 self 会造成死循环</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Demo</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">impletation</span> <span class="n">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">description</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;对象信息&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">description</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;类对象信息 %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">Demo</span> <span class="k">class</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="category">Category</h2></h1>

<ul>
<li>Category 是 OC 特有的语法</li>
<li>Category 也分为声明和实现</li>
<li>一个类可有多个 Category</li>
<li>作用

<ol>
<li><strong>可以在不修改原来类的基础上，为这个类扩充一些方法</strong></li>
<li><strong>一个庞大的类可以分模块开发</strong> (把一个类拆分，归类管理)</li>
<li>一个庞大的类可以由多个人来编写，更有利于团队合作</li>
</ol>
</li>
<li>注意事项

<ol>
<li>Category 是用于给原有的类添加方法的，只能添加方法，不能添加实例变量</li>
<li>Category 中添加 @property，只会生成 setter/getter 的声明，不会生成实现和私有实例变量</li>
<li>可以在 Category 中访问原有类 <strong>h 文件</strong>中定义的属性</li>
<li>Category 中有和原有类同名的方法，会覆盖原有类的方法</li>
<li>如多个 Category 中都有和原有类同名的方法，那么调用该方法时由编译器决定执行哪个，会执行最后一个参与编译的分类中的方法</li>
</ol>
</li>
<li>方法的调用顺序

<ol>
<li>分类 > 本类 > 父类 > &hellip; > NSObject</li>
</ol>
</li>
<li>Category 中重写的是原来就有的方法，那么使用其的文件中，不用引入 Category 头文件，就可使用</li>
<li>Category 中重写的是新方法，那么使用其的文件中，需要引入 Category 头文件，方可使用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 例如扩充 Person 类</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Category 声明</span>
</span><span class='line'><span class="c1">// Person+Test.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> <span class="nl">(Test)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Category 实现</span>
</span><span class='line'><span class="c1">// Person+Test.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span> <span class="nl">(Test)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;run...&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用 Person 类的地方，只要导入了 Person+Test.h</span>
</span><span class='line'><span class="c1">// 就可以使用 Person 新增的实例方法 run 了</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="extention">Extention</h2></h1>

<ul>
<li>Class Extention: 类扩展、匿名 Category</li>
<li>可以为某个类扩充一些<strong>私有</strong>的实例变量和方法，外部是无法访问的

<ul>
<li>保证封装性 (iOS UI 编写中常用)</li>
<li>子类无法获取父类的类扩展</li>
</ul>
</li>
<li>对比 Category

<ol>
<li>写在<strong>m 文件</strong>中</li>
<li>不仅可扩充方法，还可扩充实例变量和 @property</li>
<li>定义格式中不用写分类名</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// Person.m</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Class Extention</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 类的实现</span>
</span><span class='line'><span class="p">@</span><span class="n">inpelmentation</span> <span class="n">Person</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - Protocol]]></title>
    <link href="http://away0x.github.io/blog/2018/02/07/oc-protocol/"/>
    <updated>2018-02-07T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/07/oc-protocol</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#o1">基础</a></li>
<li><a href="#o2">使用场景</a></li>
</ul>


<h1><h2 id="o1">基础</h2></h1>

<ul>
<li>Java 中有 interface 接口。而 OC 中 interface 是类的头文件声明，OC 的接口由 protocol 实现</li>
<li>protocol 可<strong>声明一些必须实现的方法和选择实现的方法</strong></li>
<li>protocol 的作用

<ol>
<li>用来声明一些方法</li>
</ol>
</li>
<li>protocol 是由一系列的方法声明组成的</li>
<li><strong>类遵守 protocol</strong>

<ol>
<li>一个类可以遵守一个或多个 protocol</li>
<li>任何类只要遵守了 protocol，就相当于拥有了 protocol 的所有方法声明</li>
</ol>
</li>
<li><strong>协议和继承的区别</strong>

<ol>
<li>继承后默认就有实现，而协议只有声明没有实现</li>
<li>相同类型的类可以使用继承，但是不同类型的类只能使用协议</li>
<li>协议可用于存储方法的声明，可以将多个类中共同的方法抽取出来，以后让这些类遵守协议即可</li>
</ol>
</li>
<li><strong>协议的注意事项</strong>

<ol>
<li>协议只能声明方法，不能声明属性</li>
<li>父类遵守了某个协议，那么子类也会自动遵守这个协议</li>
<li>OC 中一个类可以遵守一个或多个协议</li>
<li>OC 中的协议可遵守其他协议，只要一个协议遵守了其他协议，那么这个协议中就会自动包含其他协议的声明</li>
</ol>
</li>
</ul>


<h2>定义</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 定义 protocol</span>
</span><span class='line'><span class="k">@protocol</span> <span class="err">协议名称</span>
</span><span class='line'><span class="c1">// 方法声明列表</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 类遵守 protocol</span>
</span><span class='line'><span class="k">@interface</span> <span class="err">类名 : 父类 &lt;协议1, 协议2, ...&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基协议 NSObject</h2>

<ul>
<li>NSObject 是一个基类，最根本最基本的类，任何其他类都要继承自它</li>
<li>还有个协议也叫 NSObject，它是一个基协议，最根本最基本的协议</li>
<li>NSObject 协议中声明了很多最基本的方法

<ol>
<li>description</li>
<li>retain</li>
<li>release</li>
</ol>
</li>
<li>建议每个新的协议都要遵守 NSObject 基协议</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@protocol</span> <span class="nc">DemoProtocol</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@required &amp; @optional</h2>

<ul>
<li>@require: (默认) 这个方法必须实现，不实现会有警告，但不会报错</li>
<li>@optional: 这个方法不一定要实现</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@protocol</span> <span class="nc">DemoProtocol</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> func0、func1、func2 不实现会有警告</span>
</span><span class='line'><span class="cm"> func3 可以不实现</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">func0</span><span class="p">;</span> <span class="c1">// 默认是 required</span>
</span><span class='line'>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">func1</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">func2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">func3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="o2">使用场景</h2></h1>

<h2>类型限制</h2>

<ul>
<li>通过协议来限制类型</li>
<li><code>数据类型&lt;协议名称&gt; 变量名</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@protocol</span> <span class="nc">Animal</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">eat</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果 dog 没有遵守 Animal 协议就会报警告</span>
</span><span class='line'><span class="n">Dog</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="n">dog</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Dog</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Dog</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 限制 property 的类型需要遵守 Animal 协议</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">Puppy</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">puppy1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这个 property 无论是何类都可，但是得遵守 Animal 协议</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">son</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意:</strong> 虽然在对对象进行了类型限定(限定它必须实现某个协议)，但并不意味着这个对象就真正的实现了该方法(不实现只是由警告无报错)。所以在调用对象的协议方法时，应该进行判断</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Dog</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="n">dog</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Dog</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 判断 dog 是否能响应 eat 消息 (即是否有实现这个方法)</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">dog</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">eat</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">dog</span> <span class="n">eat</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>委托代理</h2>

<p>详见类之间通信的笔记</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - Constructor]]></title>
    <link href="http://away0x.github.io/blog/2018/02/06/oc-constructor/"/>
    <updated>2018-02-06T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/06/oc-constructor</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#o1">new &amp; init</a></li>
<li><a href="#o2">instancetype &amp; id</a></li>
<li><a href="#o3">自定义构造方法</a></li>
<li><a href="#o4">自定义类工厂方法</a></li>
<li><a href="#o5">类的本质</a></li>
</ul>


<blockquote><p>OC 中的构造方法实际上并不是传统意义上的构造方法</p></blockquote>

<h1><h2 id="o1">new &amp; init</h2></h1>

<h2>new</h2>

<ul>
<li>new 做了三件事情

<ol>
<li>开辟存储空间</li>
<li>初始化所有的属性(实例变量)</li>
<li>返回对象的地址</li>
</ol>
</li>
<li>new 相当于是 alloc 和 init 的组合</li>
<li><strong>推荐使用 alloc + init 的方式</strong>

<ol>
<li>能够统一编码格式能够统一的对代码进行初始化 (使用 new 不方便使用自定义构造方法)</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 相当于下面</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">alloc 做的事</span>
</span><span class='line'><span class="cm">    1. 开辟存储空间 </span>
</span><span class='line'><span class="cm">    2. 将所有的属性设置为 0 (无论属性是何类型)</span>
</span><span class='line'><span class="cm">    3. 返回当前实例对象的地址</span>
</span><span class='line'><span class="cm">init 做的事</span>
</span><span class='line'><span class="cm">    1. 初始化成员变量，但是默认情况下 init 的实现是什么都没有做</span>
</span><span class='line'><span class="cm">    2. 返回初始化后的实例变量</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">注意: alloc 返回的地址，和 init 返回的地址是同一个地址</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">];</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p2</span> <span class="o">=</span> <span class="p">[</span><span class="n">p1</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p %p&quot;</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">);</span> <span class="c1">// 相同</span>
</span></code></pre></td></tr></table></div></figure>


<h2>init</h2>

<ul>
<li>OC 中以 init 开头的方法，称之为构造方法</li>
<li>用途: 用于初始化一个对象，让某个对象一创建出来就拥有某些属性和值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 重写 init 方法，在 init 方法中初始化实例变量</span>
</span><span class='line'><span class="c1">// 注意: 重写 init 方法必须按苹果规定的格式重写，不这样会引发一些未知的错误</span>
</span><span class='line'><span class="c1">//    1. 先初始化父类，再初始化子类</span>
</span><span class='line'><span class="c1">//    2. 判断父类是否初始化成功，只有父类初始化成功才能继续初始化子类</span>
</span><span class='line'><span class="c1">//    3. 返回当前对象的地址</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1. 初始化父类</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// 初始化成功返回对应地址，失败返回 nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2. 判断是否初始化成功</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 2.1 初始化子类 (如设置实例变量的值)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3. 返回地址</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="o2">instancetype &amp; id</h2></h1>

<ul>
<li>instancetype 和 id 一样都是万能指针</li>
<li>如果构造函数返回值是 instancetype，那么将返回值赋值给一个其他的对象会报一个警告；id 类型则不会</li>
<li>instancetype 在编译时可判断对象的真实类型，id 则不能</li>
<li>id 可用来定义变量，可以作为返回值，可以作为形参。instancetype 只能作为返回值</li>
<li><strong>注意:</strong> 定义构造方法，返回值尽量使用 instancetype，不要使用 id</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 报警告！将 instancetype 赋给其他对象了</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">p2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="c1">// 不会报警告，因为返回值是 id 类型 (新版本 xcode 也会警告了)</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="o3">自定义构造方法</h2></h1>

<ul>
<li>一个类可以有 0 个或者多个自定义构造方法</li>
<li>其实就是自定义一个 init 方法

<ol>
<li>一定是实例方法</li>
<li>一定返回 id/instancetype (建议 instancetype)</li>
<li>方法名一定以 init 开头，之后有参数的 <code>initWithXXX</code>，W 一定要大写 (苹果硬性规定)

<ul>
<li>initwithxxx W 小写的话，不认为其是自定义构造方法，其内不能调用 <code>[super init]</code></li>
</ul>
</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// Person.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Person.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 自定义构造方法</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithAge:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">age</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_age</span> <span class="o">=</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAge</span><span class="p">:</span><span class="mi">25</span><span class="p">];</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">age</span><span class="p">;</span> <span class="c1">// 25</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="o4">自定义类工厂方法</h2></h1>

<ul>
<li>类工厂方法是一种用于分配、初始化实例并返回一个它自己的实例的类方法</li>
<li>类工厂方法规范

<ol>
<li>一定是类方法</li>
<li>返回值一般是 instancetype 类型</li>
<li>方面名以类名开头，首字母小写</li>
<li>类工厂中创建对象不要使用类名创建，应该使用 self 来创建</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">personWithAge:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">age</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 不能是 [Person alloc]，否则继承时会有问题</span>
</span><span class='line'>    <span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">p</span> <span class="nl">setAge</span><span class="p">:</span><span class="n">age</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="nl">personWithAge</span><span class="p">:</span><span class="mi">25</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="o5">类的本质</h2></h1>

<ul>
<li>类的本质其实也是一个对象 (类对象)</li>
<li>程序中第一次使用该类的时候被创建，在整个程序中只有一份</li>
<li>此后每次使用都是这个类对象，它在程序运行时一直存在</li>
<li>类对象是一种数据结构，存储类的基本信息: 类大小、类名称、类的版本、继承层次、以及消息与函数的映射表等</li>
<li>类对象代表类，Class 类型，对象方法属于类对象</li>
<li>如果消息的接收者是类名，则类名代表类对象</li>
<li>所有类的实例都由类对象生成，类对象会把实例的 isa 的值修改成自己的地址，每个实例的 isa 都指向该实例的类对象</li>
</ul>


<h2>获取类对象</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 1. 通过实例对象</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="kt">Class</span> <span class="n">c1</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通过类名获取 (类名其实就是类对象)</span>
</span><span class='line'><span class="kt">Class</span> <span class="n">c2</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="k">class</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 应用场景</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1. 用于创建实例对象</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">c1</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2. 用于调用类方法</span>
</span><span class='line'><span class="p">[</span><span class="n">c1</span> <span class="n">test</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>类的启动过程</h2>

<p>只要程序启动就会将类的代码加载到内存中，放到代码区</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">@</span><span class="n">inplementation</span> <span class="n">Person</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// load 方法会在当前类被加载到内存时调用，仅会被调用一次</span>
</span><span class='line'><span class="c1">// 如存在继承关系，会先调用父类的 load 方法，再调用子类的 load 方法</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">load</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;类被加载到内存中了...&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当前类第一次被使用时会调用 (创建类对象的时候)</span>
</span><span class='line'><span class="c1">// 在整个程序的运行过程中只会被调用一次，无论你使用多少次这个类都只会调用一次</span>
</span><span class='line'><span class="c1">// 用于对某一个类进行一次性的初始化</span>
</span><span class='line'><span class="c1">// 如存在继承关系，会先调用父类的 initialize 方法，再调用子类的 initialize 方法</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">initialize</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;类第一次被使用啦&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - 面向对象基础(二)]]></title>
    <link href="http://away0x.github.io/blog/2018/02/05/oc-oop-features/"/>
    <updated>2018-02-05T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/05/oc-oop-features</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#o1">封装</a></li>
<li><a href="#o2">继承</a></li>
<li><a href="#o3">多态</a></li>
</ul>


<h1><h2 id="o1">封装</h2></h1>

<ul>
<li>屏蔽内部实现的细节，仅对外提供公有的方法/接口</li>
<li>优点: 保证数据的安全性，将变化隔离</li>
</ul>


<h2>实例变量的封装</h2>

<h3>未封装的实例变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Demo</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'><span class="k">@public</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">impletation</span> <span class="n">Demo</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">demo</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">demo</span><span class="o">-&gt;</span><span class="n">_age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">demo</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用 getter/setter 封装实例变量</h3>

<ul>
<li>二者写法格式是固定的</li>
<li><strong>setter</strong>

<ol>
<li>作用: 设置实例变量的值</li>
<li>一定是实例方法且无返回值</li>
<li>一定有参数，参数类型和需设置的实例变量类型相同，且名称是实例变量的名称去掉下划线</li>
<li>命名一定是 &ldquo;set + 实例变量&rdquo; (实例变量名去掉开头下划线，且首字母大写)</li>
</ol>
</li>
<li><strong>getter</strong>

<ol>
<li>获取实例变量的值</li>
<li>一定是实例方法且有返回值</li>
<li>返回值和获取的实例变量的类型一致</li>
<li>一定无参数</li>
<li>命名是获取的实例变量的名称去掉下划线</li>
</ol>
</li>
<li>只读属性: 私有实例变量只提供了 getter</li>
<li>只写属性: 私有实例变量只提供了 setter</li>
<li>可读可写属性: 私有实例变量只提供了 getter、setter</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Demo</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// setter 声明</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAge:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// getter 声明</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">age</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">impletation</span> <span class="n">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// setter 实现</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setAge</span><span class="p">:(</span><span class="kt">int</span><span class="p">)</span><span class="n">age</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_age</span> <span class="o">=</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// getter 实现</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">age</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">demo</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">demo</span> <span class="nl">setAge</span><span class="p">:</span><span class="mi">25</span><span class="p">];</span>     <span class="c1">// setter</span>
</span><span class='line'><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="n">demo</span> <span class="n">age</span><span class="p">];</span> <span class="c1">// getter</span>
</span></code></pre></td></tr></table></div></figure>


<h2>点语法</h2>

<ul>
<li>如果实例属性提供了 setter、getter 方法，那么访问属性又多了一种访问方式: <strong>点语法</strong></li>
<li>点语法的本质是调用了 setter/getter (C++ 中的点可以直接访问实例变量)</li>
<li>点语法是一个编译器特性，实际并不是 OC 的语法

<ul>
<li>会在程序翻译成二进制时，将点语法自动转换为 setter/getter</li>
</ul>
</li>
<li>点语法的注意点:

<ul>
<li>点语法一般用于给实例变量赋值，如果不是给实例变量赋值一般情况不建议使用</li>
<li>因为其是编译器特性，会将 <code>a.b</code> 翻译成 <code>[a b]</code> 所以也可以调用一些实例方法，但不要使用</li>
<li><code>请将点语法当成是便捷版的实例变量 getter/setter 的使用方式，其他情况下请不要使用</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">demo</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">demo</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span> <span class="c1">// 相当于 setter &quot;[demo setAge:25];&quot;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">demo</span><span class="p">.</span><span class="n">age</span><span class="p">;</span> <span class="c1">// 相当于 getter &quot;int age = [demo age];&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="o2">继承</h2></h1>

<ul>
<li>OC 是单继承</li>
<li>A 类继承了 B 类，那么 B 类就拥有了 A 类所有属性和方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// Demo 继承了 NSObject</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Demo</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">impletation</span> <span class="n">Demo</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如子类中有和父类同名的方法，称之为 <strong>方法重写</strong></li>
<li>继承中的方法调用顺序: 自己有就调用自己的，自己无就调用父类的，以此类推，逐级往上

<ul>
<li>如一直找到 NSObject 类都没有找到，那么就会报错</li>
</ul>
</li>
<li>继承的优点:

<ol>
<li>提高了代码的复用性</li>
<li>让类与类之间产生了关系，这才有了多态</li>
</ol>
</li>
</ul>


<h2>super</h2>

<ul>
<li>super 和 self 指向的是相同的消息接收者</li>
<li>作用:

<ol>
<li>直接调用父类中的某个方法</li>
<li>super 在实例方法中，会调用父类的实例方法</li>
<li>super 在类方法中，会调用父类的类方法</li>
</ol>
</li>
<li>使用场景:

<ol>
<li>子类重写父类的方法时，想保留父类的一些行为</li>
</ol>
</li>
</ul>


<h1><h2 id="o3">多态</h2></h1>

<ul>
<li>多态: 事物的多种表现形态</li>
<li>OC 不同于传统程序设计语言，它可以在运行时加入新的数据类型和新的程序模块: 动态类型识别、动态绑定、动态加载</li>
<li>多态的条件:

<ol>
<li>有继承关系</li>
<li>子类重写父类方法</li>
<li>父类指针指向子类对象</li>
</ol>
</li>
<li>表现: 当父类指针指向不同对象的时候，通过父类指针调用被重写的方法时，会执行指正所指向</li>
<li>优点:

<ol>
<li>提高了代码的拓展性</li>
</ol>
</li>
<li>注意点:

<ol>
<li>如父类指针指向子类对象，如需调用<strong>子类特有</strong>的方法，必须先强制类型转换为子类才能调用</li>
</ol>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 实现多态</span>
</span><span class='line'><span class="c1">// Animal 是父类，子类有 Cat 和 Dog，分别重写了父类的 eat 方法</span>
</span><span class='line'><span class="c1">// 那么实例化时，可这样:</span>
</span><span class='line'><span class="n">Animal</span> <span class="o">*</span><span class="n">animal</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 实例化 Dog</span>
</span><span class='line'><span class="n">animal</span> <span class="o">=</span> <span class="p">[</span><span class="n">Dog</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">animal</span> <span class="n">eat</span><span class="p">];</span> <span class="c1">// Dog 的 eat</span>
</span><span class='line'><span class="c1">// 实例化 Cat</span>
</span><span class='line'><span class="n">animal</span> <span class="o">=</span> <span class="p">[</span><span class="n">Cat</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">animal</span> <span class="n">eat</span><span class="p">];</span> <span class="c1">// Cat 的 eat</span>
</span></code></pre></td></tr></table></div></figure>


<h2>动态类型</h2>

<ul>
<li>在编译时编译器只会检查当前类型中有没有需要调用的方法</li>
<li>运行时，才会去判断对象的真实类型</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Animal</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">Dog</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="c1">// 首先由于 a 是 Animal 类型，所以编译时会在去 Animal 里找是否已 eat 方法，无, 会编译失败</span>
</span><span class='line'><span class="c1">// 然后在运行时，系统判断出了 a 的真实类型是 Dog 类型</span>
</span><span class='line'><span class="c1">// 因此这里调用的是 Dog 类的 eat 方法，而不是 Animal 类</span>
</span><span class='line'><span class="p">[</span><span class="n">a</span> <span class="n">eat</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="c1">// 如果想调用子类特有的方法，必须强制类型转换为子类才能调用</span>
</span><span class='line'><span class="c1">// 如子类 Dog 特有方法 dogEat，Animal 类没有这个方法</span>
</span><span class='line'><span class="p">[</span><span class="n">a</span> <span class="n">dogEat</span><span class="p">];</span> <span class="c1">// 报错，因为编译阶段发现 Animal 中没有这个方法</span>
</span><span class='line'>
</span><span class='line'><span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">(</span><span class="n">Dog</span> <span class="o">*</span><span class="p">)</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">dog</span> <span class="n">dogEat</span><span class="p">];</span> <span class="c1">// 正确</span>
</span></code></pre></td></tr></table></div></figure>


<h2>id 类型</h2>

<p>id 类型: 通用对象指针类型，弱类型，编译时不进行类型检查</p>

<h2>应用场景</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span>: <span class="bp">NSObject</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">food:</span><span class="p">(</span><span class="n">Animal</span> <span class="o">*</span><span class="p">)</span><span class="nv">animal</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">food:</span><span class="p">(</span><span class="n">Animal</span> <span class="o">*</span><span class="p">)</span><span class="nv">animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 运行时会动态监测 animal 的真实类型，从而调用对应类型的方法</span>
</span><span class='line'>    <span class="c1">// 这样就不用创建针对于不同类型的 food 方法啦</span>
</span><span class='line'>    <span class="c1">// 如果真实类型没有 eat 方法，这会找到 Animal 类，调用其的 eat 方法</span>
</span><span class='line'>    <span class="c1">// 注意这里 Animal 类得有 eat 方法，因为编译时会做检测</span>
</span><span class='line'>    <span class="c1">// 运行时才会确定真实类型</span>
</span><span class='line'>    <span class="p">[</span><span class="n">animal</span> <span class="n">eat</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="c1">// Cat Dog 继承与 Animal</span>
</span><span class='line'><span class="c1">// Animal 有 eat 方法</span>
</span><span class='line'><span class="c1">// Cat Dog 都各自重写了父类的 eat 方法</span>
</span><span class='line'><span class="n">Dog</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="n">Dog</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">Cat</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">Cat</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">Person</span> <span class="nl">food</span><span class="p">:</span><span class="n">d</span><span class="p">];</span> <span class="c1">// 调用的是 Dog 的 eat 方法</span>
</span><span class='line'><span class="p">[</span><span class="n">Person</span> <span class="nl">food</span><span class="p">:</span><span class="n">c</span><span class="p">];</span> <span class="c1">// 调用的是 Cat 的 eat 方法</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意点</h2>

<p>如果存在多态，父类是可以访问子类特有的方法。否则不能直接调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 子类特有方法 bark</span>
</span><span class='line'><span class="p">[</span><span class="n">dog</span> <span class="n">bark</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Animal</span> <span class="o">*</span><span class="n">animal</span> <span class="o">=</span> <span class="p">[</span><span class="n">Dog</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[(</span><span class="n">Dog</span> <span class="o">*</span><span class="p">)</span><span class="n">animal</span> <span class="n">bark</span><span class="p">];</span> <span class="c1">// 把父类的指针，强制类型转换</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - 面向对象基础(一)]]></title>
    <link href="http://away0x.github.io/blog/2018/02/04/oc-oop-basic/"/>
    <updated>2018-02-04T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/04/oc-oop-basic</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#o1">OC 多文件开发</a></li>
<li><a href="#o2">isa 指针</a></li>
<li><a href="#o3">实例变量(成员变量)</a></li>
<li><a href="#o4">方法</a></li>
<li><a href="#o5">私有变量和私有方法</a></li>
<li><a href="#o6">self</a></li>
<li><a href="#o7">NSObject</a></li>
<li><p><a href="#o8">例子</a></p></li>
<li><p>OC 中定义一个类分为声明和实现</p>

<ul>
<li>类可不声明只实现 (但不建议这样写)</li>
</ul>
</li>
<li>类名首字母应大写</li>
<li>OC 的类本质上就是一个结构体</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 参考 C 语言的结构体的使用过程</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="o">*</span><span class="n">sip</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">sp</span><span class="p">;</span> <span class="c1">// 结构体指针</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">sip</span><span class="p">).</span><span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">sip</span><span class="p">).</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;wutong&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 或者 (不能用 . 语法直接访问实例变量)</span>
</span><span class='line'><span class="n">sip</span><span class="o">-&gt;</span><span class="n">age</span> <span class="o">=</span> <span class="mi">26</span><span class="p">;</span>
</span><span class='line'><span class="n">sip</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;wt&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>所有的对象没有实例化之前都是 nil</li>
<li>OC 不支持方法重载但支持重写</li>
</ul>


<h1><h2 id="o1">OC 多文件开发</h2></h1>

<ul>
<li>多文件开发中，文件要使用谁，就导入谁的 h 文件即可

<ul>
<li>不能导入 m 文件，否则会报错</li>
</ul>
</li>
<li>通常把不同的类放到不同的文件中，每个类的声明和实现分开

<ul>
<li>声明写在 h 文件中</li>
<li>实现写在 m 文件中</li>
<li>类名是什么，文件名就是什么</li>
</ul>
</li>
</ul>


<h2>@interface, @implementation</h2>

<ul>
<li>@interface 写在 h 文件中，用于声明</li>
<li>@implementation 写在 m 文件中，用于实现具体逻辑</li>
</ul>


<h1><h2 id="o2">isa 指针</h2></h1>

<ul>
<li>每个对象都包含一个 isa 指针，这个指针指向当前对象所属的类</li>
<li><code>[p eat]</code> 表示给 p 所指向的对象发送一条 eat 消息，调用对象的 eat 方法

<ul>
<li>此时对象会顺着内部 isa 指针找到存储于类中的方法执行</li>
</ul>
</li>
<li>isa 是对象中的隐藏指针，指向这个对象的类</li>
<li>通过 isa 我们可在运行时知道当前对象是属于哪个类的</li>
</ul>


<h1><h2 id="o3">实例变量(成员变量)</h2></h1>

<ul>
<li>其写在 @interface 的大括号中</li>
<li>默认权限是受保护的，想外部访问需加上 @public</li>
<li>编写 OC 实例变量时，建议<strong>私有实例变量</strong>命名前加上 <code>_</code></li>
<li>实例变量不能离开类，不能在定义的同时初始化</li>
<li>实例变量只能通过对象来访问</li>
<li>实例变量不要以 new 开头，否则有可能导致未知错误</li>
</ul>


<h2>实例变量修饰符</h2>

<p>实例变量修饰符作用域: 从出现的位置，一直到下一个修饰符出现为止</p>

<ol>
<li>@public

<ol>
<li>可以在其他类中访问</li>
<li>可以在本类中访问</li>
<li>可在子类中访问父类 public 实例变量</li>
</ol>
</li>
<li>@private

<ol>
<li>不可在其他类中访问</li>
<li>可以在本类中访问</li>
<li>不可在子类中访问父类 private 实例变量</li>
</ol>
</li>
<li>@protected <strong>(没添加修饰符的都默认被该修饰符修饰)</strong>

<ol>
<li>不可在其他类中访问</li>
<li>可以在本类中访问</li>
<li>可在子类中访问父类 protected 实例变量</li>
</ol>
</li>
<li>@package

<ol>
<li>介于 public 和 private 之间</li>
<li>如在其他包中访问那么就是 private</li>
<li>如在当前包中访问那么就是 public</li>
<li>可在子类中访问父类 package 实例变量</li>
</ol>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Iphone</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_year</span><span class="p">;</span> <span class="c1">// protected 不公开，外部想访问需提供 setter/getter</span>
</span><span class='line'><span class="k">@public</span>        <span class="c1">// public 公开，外部可直接访问</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>全局变量、局部变量和实例变量的区别</h2>

<h3>全局变量</h3>

<ul>
<li>全局变量依托于文件</li>
<li>全局变量可先定义再初始化，或定义同时初始化</li>
<li>存储于<strong>静态区</strong>

<ul>
<li>程序一启动就会分配存储空间，直到程序结束才会释放</li>
</ul>
</li>
</ul>


<h3>局部变量</h3>

<ul>
<li>局部变量依托于函数或代码块</li>
<li>局部变量可先定义再初始化，或定义同时初始化</li>
<li>存储于<strong>栈</strong>

<ul>
<li>栈中的数据，系统会自动给我们释放</li>
</ul>
</li>
</ul>


<h3>实例变量</h3>

<ul>
<li>实例变量依托于类</li>
<li>实例变量不能在定义的同时初始化</li>
<li>存储于<strong>堆</strong> (当前对象对应的堆的存储空间中)

<ul>
<li>存储在堆中的数据，不会被自动释放，只能程序员手动释放</li>
</ul>
</li>
</ul>


<h1><h2 id="o4">方法</h2></h1>

<ul>
<li>C 语言函数，声明在 h 文件中，实现在 c 文件中</li>
<li>OC 方法，声明在 @interface 中，实现在 @implementation 中</li>
<li>OC 方法声明写在 @interface 的大括号下面，而不能写在其中</li>
<li>OC 方法支持重载</li>
<li>OC 中的方法，如没有形参不需要写 ()，这是因为 OC 方法中的 () 有其他用处，是用于扩住数据类型的</li>
<li>有参方法的冒号和外部参数名也是方法名的一部分</li>
<li><strong>方法可以没有声明只有实现</strong></li>
<li><strong>方法如声明了没实现，编译不会报错，运行时会报错</strong>

<ul>
<li>错误: <code>unrecognized selector send to class/instance</code> (发送了一个不能识别的消息)</li>
</ul>
</li>
<li>方法不要以 new 开头，否则有可能导致未知错误</li>
<li>OC 方法分类方法和实例方法</li>
</ul>


<h2>实例方法 (减号方法)</h2>

<ul>
<li>只能通过实例调用</li>
<li>方法中可以直接使用实例变量
8 方法中可调用其他实例方法(通过 self 调用)以及类方法(通过类调用)</li>
</ul>


<h2>类方法 (加号方法)</h2>

<ul>
<li>只能通过类名调用</li>
<li>方法中不能直接使用实例变量</li>
<li>不用每次使用方法都要创建对象开辟存储空间</li>
<li>调用类方法的效率会比调用实例方法高</li>
<li>方法中可调用其他类方法或者实例方法

<ul>
<li>类方法中调用实例方法，需要实例化类，通过实例调用</li>
<li>类方法中调用其他类方法

<ol>
<li>通过类调用</li>
<li>通过 self 调用</li>
</ol>
</li>
</ul>
</li>
<li>一般用于定义工具方法</li>
</ul>


<h1><h2 id="o5">私有变量和私有方法</h2></h1>

<h2>私有变量</h2>

<ul>
<li>实例变量即可在 interface 中定义也可在 implementation 中定义</li>
<li>implementation 中定义的实例变量在其他类中无法访问 (即使其是用 public 修饰的)</li>
<li>implementation 中定义的实例变量只能在本类中访问</li>
<li>implementation 中定义的实例变量不能和 interface 中定义的实例变量同名</li>
<li>因为在其他文件中通常都只是包含头文件而不会包含实现文件，所以在 m 文件中声明的实例变量是 private 的，这种情况下使用 public 也是徒劳的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// Demo.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_age</span><span class="p">;</span> <span class="c1">// 外界访问不到，即使是 public</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>私有方法</h2>

<ul>
<li>私有方法: 只有实现没有声明的方法</li>
<li>原则上: 私有方法只能在本类中才能调用

<ul>
<li>注意: OC 中没有真正的私有方法</li>
<li>因为 OC 的方法调用是通过消息机制，所以可通过 selector 访问到私有方法</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// p 的 test 是个私有方法，没在 interface 中声明</span>
</span><span class='line'><span class="p">[</span><span class="n">p</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)];</span> <span class="c1">// 但仍可通过这种方式调用到</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="o6">self</h2></h1>

<ol>
<li>self 在类方法中，那么 self 就代表那个类</li>
<li>self 在实例方法中，那么 self 就代表调用当前实例方法的那个实例</li>
<li>可通过 self 调用实例变量 <code>self-&gt;_age</code></li>
<li><strong>注意点:</strong>

<ol>
<li>self 会自动区分类方法和实例方法，如果在类方法中使用 self 调用实例方法，那么会直接报错</li>
<li>不能再实例方法或类方法中利用 self 调用当前 self 所在的方法，会造成死循环</li>
</ol>
</li>
<li>使用场景:

<ol>
<li>可用于在实例方法之间的相互调用</li>
<li>可用于在类方法之间的相互调用</li>
<li>可用于区分成员变量和局部变量同名的情况 <code>self-&gt;实例变量</code></li>
</ol>
</li>
</ol>


<h1><h2 id="o7">NSObject</h2></h1>

<p>提供了创建对象实例的能力(new 方法)，所以需继承它</p>

<h1><h2 id="o8">例子</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 类声明</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Iphone</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 实例变量定义:</span>
</span><span class='line'>    <span class="c1">//     1. 默认情况下，OC 对象中的实例变量，调用时是不能直接访问的</span>
</span><span class='line'>    <span class="c1">//     2. 所以需要公开才可访问 @public 才可通过一个指向结构体的指针访问到</span>
</span><span class='line'>    <span class="c1">//     3. @public 下面的实例变量 cpu、cpu2 都会被公开</span>
</span><span class='line'><span class="k">@public</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_cpu</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_cpu2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 类方法声明</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">do</span><span class="p">;</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">do:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">number</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 实例方法声明</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">about</span><span class="p">;</span>    <span class="c1">// 无参无返回值</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">about2</span><span class="p">;</span> <span class="c1">// 无参有返回值</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 有参函数声明</span>
</span><span class='line'><span class="c1">//    - 参数的数据类型前面必须加上一个 &quot;:&quot; 号</span>
</span><span class='line'><span class="c1">//        - 注意: 当前这个方法名称为 &quot;printInt:&quot; 名称中是有冒号的</span>
</span><span class='line'><span class="c1">//        - 方法名为 &quot;printInt:&quot;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">printInt:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">number</span><span class="p">;</span> <span class="c1">// 有一参有返回值</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//    - 定义多参方法 (无外部参数名)</span>
</span><span class='line'><span class="c1">//        - 方法名为 &quot;printInt::&quot;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">printInt:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">number</span> <span class="o">:</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">content</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//    - 定义多参方法 (有外部参数名)</span>
</span><span class='line'><span class="c1">//        - 方法名为 &quot;printMessageWithNumber:andContent:&quot;</span>
</span><span class='line'><span class="c1">//        - 方法名像自然语言一样流畅，建议这样写</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">printMessageWithNumber:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">number</span> <span class="nf">andContent:</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nv">content</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 类实现</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Iphone</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 类方法的实现</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 类方法中调用实例方法 (不可直接调用)</span>
</span><span class='line'>    <span class="n">Iphone</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Iphone</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">p</span> <span class="n">about</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 类方法中调用其他类方法</span>
</span><span class='line'>    <span class="c1">// 1. 通过类</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Iphone</span> <span class="n">do2</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 2. 通过 self</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">do2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">do:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">number</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 实例方法的实现</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">about</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 实例方法中可访问成员变量</span>
</span><span class='line'>    <span class="c1">// 1. 直接访问</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="n">_cpu</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// 2. 通过 self 访问</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="o">-&gt;</span><span class="n">_cpu</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 调用类方法</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Iphone</span> <span class="k">do</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 调用其他实例方法</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">about2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">about2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;啦啦啦&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">printInt:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">number</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">printInt:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">number</span> <span class="o">:</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">content</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">content</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">printMessageWithNumber</span><span class="p">:(</span><span class="kt">int</span><span class="p">)</span><span class="n">number</span> <span class="nl">andContent</span><span class="p">:(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">content</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d %s&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">content</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 类调用</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1. 实例化</span>
</span><span class='line'>    <span class="c1">// OC 中要想创建类实例，需给类发送消息 new (这个类需继承 NSObject)</span>
</span><span class='line'>    <span class="c1">//    1. new 创建出来的对象存储在堆中，堆中的数据不会自动释放 (栈才会)</span>
</span><span class='line'>    <span class="c1">// 实例化会做 3 件事情</span>
</span><span class='line'>    <span class="c1">//    1. 为 Iphone 类创建出来的对象分配存储空间 (在堆内存中开辟空间)</span>
</span><span class='line'>    <span class="c1">//    2. 初始化 Iphone 类创建出来的对象中的实例变量</span>
</span><span class='line'>    <span class="c1">//    3. 返回 Iphone 类创建出来的对象对应的地址</span>
</span><span class='line'>    <span class="c1">//        - 返回的地址是类的第 0 个属性的地址</span>
</span><span class='line'>    <span class="c1">//        - 并不是自己创建的那个，而是系统自动添加的名为 isa 的属性 (继承于 NSObject)</span>
</span><span class='line'>    <span class="c1">//        - 其实系统会在堆内存中开辟一块空间存储这个类，称其为类对象</span>
</span><span class='line'>    <span class="c1">//          类对象中存储了这个类的方法列表，isa 就指向这个类对象，</span>
</span><span class='line'>    <span class="c1">//          所以可通过其调用类的属性和方法</span>
</span><span class='line'>    <span class="c1">// OC 的类本质上就是一个结构体，所以 p 这个指针其实就是指向了一个结构体</span>
</span><span class='line'>    <span class="n">Iphone</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Iphone</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2. 访问类的公开实例变量 (不能用 . 语法直接访问实例变量)</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">_cpu</span> <span class="o">=</span> <span class="mf">3.5</span><span class="p">;</span> <span class="c1">// 通过指针访问</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">_cpu2</span> <span class="o">=</span> <span class="mf">3.6</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f %f&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">_cpu</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">_cpu2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3. 调用方法 (通过指针发送消息)</span>
</span><span class='line'>    <span class="c1">//    - 消息机制 (调用: 发送消息: [类/实例 方法名])</span>
</span><span class='line'>    <span class="c1">//    1. 调用类方法</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Iphone</span> <span class="k">do</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//    2. 调用实例方法</span>
</span><span class='line'>    <span class="c1">//      先在栈内存中找到 p 这个局部变量，其存储了实例对象的地址</span>
</span><span class='line'>    <span class="c1">//      然后通过这个地址在堆内存中找到实例对象的存储空间，并得到里面的 isa 指针</span>
</span><span class='line'>    <span class="c1">//      再通过 isa 里存放的地址，找到 Iphone 类对象的存储空间</span>
</span><span class='line'>    <span class="c1">//      再在存储空间的方法列表中找是否有名为 about 的方法，如有则执行</span>
</span><span class='line'>    <span class="p">[</span><span class="n">p</span> <span class="n">about</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="n">about2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="nl">printInt</span><span class="p">:</span><span class="mi">123</span><span class="p">];</span> <span class="c1">// 调用有参数的方法</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="nl">printInt</span><span class="p">:</span><span class="mi">123</span> <span class="o">:</span><span class="s">&quot;lalala&quot;</span><span class="p">];</span> <span class="c1">// 无外部参数名</span>
</span><span class='line'>    <span class="p">[</span><span class="n">p</span> <span class="nl">printMessageWithNumber</span><span class="p">:</span><span class="mi">123</span> <span class="nl">andContent</span><span class="p">:</span><span class="s">&quot;lalala&quot;</span><span class="p">];</span> <span class="c1">// 有外部参数名</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - Block]]></title>
    <link href="http://away0x.github.io/blog/2018/02/03/oc-block/"/>
    <updated>2018-02-03T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/03/oc-block</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#block-1">函数指针与 block</a></li>
<li><a href="#block-2">block 与 typedef</a></li>
<li><a href="#block-3">应用场景</a></li>
<li><a href="#block-4">注意事项</a></li>
<li><a href="#block-5">内存管理</a></li>
<li><a href="#block-6">循环引用</a></li>
<li><p><a href="#block-7">传递变量</a></p></li>
<li><p>block 是 iOS 中一种比较特殊的数据类型</p></li>
<li>block 是苹果官方特别推荐使用的数据类型，应用场景比较广泛

<ul>
<li>动画、多线程、集合遍历、网络请求回调</li>
</ul>
</li>
<li>block 的作用

<ul>
<li>用来保存某一段代码，可以在恰当的时间再取出来调用</li>
<li>功能类似于函数和方法</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// block 的格式</span>
</span><span class='line'><span class="err">返回值类型</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="err">变量名</span><span class="p">)(</span><span class="err">形参列表</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="err">形参列表</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="block-1">函数指针与 block</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">void</span> <span class="nf">printA</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="n">chjar</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1. 调用函数</span>
</span><span class='line'>    <span class="n">printA</span><span class="p">();</span> <span class="c1">// &quot;a&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2. 指向函数 printA 的指针</span>
</span><span class='line'>    <span class="c1">//    - void 表指向的函数没有返回值</span>
</span><span class='line'>    <span class="c1">//    - () 代表指向的函数没有形参</span>
</span><span class='line'>    <span class="c1">//    - (*ap) 代表 ap 是一个指向函数的指针</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">)</span> <span class="p">();</span>
</span><span class='line'>    <span class="n">ap</span> <span class="o">=</span> <span class="n">printA</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ap</span><span class="p">();</span> <span class="c1">// &quot;a&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ---------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3. 定义 block</span>
</span><span class='line'>    <span class="c1">//    - block 和函数一样，可以没有(有)返回值，也没有(有)</span>
</span><span class='line'>    <span class="c1">//    - void 代表这个 block 将来保存的代码没有返回值</span>
</span><span class='line'>    <span class="c1">//    - () 代表这个 block 将来保存的代码没有形参</span>
</span><span class='line'>    <span class="c1">//    - (^printB) 代表 printB 是一个 block 变量，可以用于保存一段 block 代码</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">printB</span><span class="p">)</span> <span class="p">();</span> <span class="c1">// 定义</span>
</span><span class='line'>    <span class="n">ap2</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>           <span class="c1">// 保存 block 类型代码段</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">ap2</span><span class="p">();</span> <span class="c1">// &quot;b&quot; 执行 block</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">sum</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;sum = %i&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">));</span> <span class="c1">// &quot;sum = 50&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="block-2">block 与 typedef</h2></h1>

<p>使用 typedef 可简化 block 的声明</p>

<h2>函数指针使用 typedef</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 函数</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">minus</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="n">chjar</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">sumP</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="c1">// 函数指针</span>
</span><span class='line'>    <span class="n">sumP</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">sumP</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;3&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">minusP</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="n">minusP</span> <span class="o">=</span> <span class="n">minus</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">minusP</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">minus</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用 typedef</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">calculte</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="n">chjar</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">calculte</span> <span class="n">sumP</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">sumP</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;3&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">calculte</span> <span class="n">minusP</span> <span class="o">=</span> <span class="n">minus</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">minusP</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>block 使用 typedef</h2>

<p>不能在方法代码中使用 typedef，必须写在文件的顶部或头文件中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="n">chjar</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">sum</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;3&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">minus</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="n">minus</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">minus</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;1&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 使用 typedef</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">^</span><span class="n">calculte</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="n">chjar</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">calculte</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;3&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">calculte</span> <span class="n">minus</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">minus</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// &quot;1&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="block-3">应用场景</h2></h1>

<ol>
<li>代码复用</li>
<li>高阶函数 (作为参数或返回值)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">run:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="nv">blockFunc</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">blockFunc</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;block...&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>类之间的通信

<ol>
<li>可替代代理委托</li>
<li>B 类中为 A 类的某个类型为 block 的属性赋值，A 类中会在某个事件中调用这个 block，从而实现跨类通信</li>
</ol>
</li>
</ol>


<h1><h2 id="block-4">注意事项</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 1. block 中可以访问外部的变量</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="n">myBlock</span><span class="p">();</span> <span class="c1">// &quot;10&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2. block 中定义了和外部同名的变量，则 blick 内的优先</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">myBlock</span><span class="p">();</span> <span class="c1">// &quot;20&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3. 默认情况下，不可以在 block 中修改外界变量的值</span>
</span><span class='line'><span class="c1">//    - 因为 block 中的变量和外界的变量不是用一个变量</span>
</span><span class='line'><span class="c1">//    - 如果 block 中访问了外界的变量，block 会将外界的这个变量拷贝一份到堆内存中</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 修改了外部变量(实际上不是外部的变量)，报错</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">myBlock</span><span class="p">();</span> <span class="c1">// 报错</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 4. block 会在定义时拷贝外界使用到的变量</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// 在这里就将 a 的值拷贝了一份，此时 a 值为 10</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 不会影响到 block 中拷贝的值</span>
</span><span class='line'><span class="n">myBlock</span><span class="p">();</span> <span class="c1">// &quot;10&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 5.如想在 block 中修改外界变量的值，必须在外界变量前加上 __block</span>
</span><span class='line'><span class="c1">//    - 这样如在 block 中修改了外界变量的值，会影响到外界变量的值</span>
</span><span class='line'><span class="c1">//    - 因为加了 __block 就是地址传递，所以可修改</span>
</span><span class='line'><span class="k">__block</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">myBlock</span><span class="p">();</span>       <span class="c1">// &quot;20&quot;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%i&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// &quot;20&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>block 可存储于堆中也可存储在栈中，默认在栈中

<ul>
<li>如对 block 进行 copy 操作，block 会转移到堆中</li>
<li>如 block 在栈中，block 中访问了外界的对象，那么不会对对象进行 retain 操作</li>
<li>但是如果 block 在堆中，block 中访问了外界的对象，那么会对外界的对象进行一次 retain 操作</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// p 引用计数为 1</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">retainCount</span><span class="p">]);</span>    <span class="c1">// &quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span> <span class="c1">// 由于下面用了 Block_copy，所以这里是 retain，p 引用计数 +1，为 2</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">retainCount</span><span class="p">]);</span> <span class="c1">// &quot;2&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Block_copy</span><span class="p">(</span><span class="n">myBlock</span><span class="p">);</span> <span class="c1">// copy 操作使 block 转移到堆中，此时 block 中访问外部变量会造成 retain</span>
</span><span class='line'><span class="n">myBlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">p</span> <span class="k">release</span><span class="p">];</span> <span class="c1">// p 引用计数 -1，此时为 1，释放不了</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 如在 block 中访问了外界的对象，一定要给对象加上 __block，只要加上了</span>
</span><span class='line'><span class="c1">// 哪怕 block 在堆中，也不会对外界的对象进行 retain</span>
</span><span class='line'>
</span><span class='line'><span class="k">__block</span> <span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// p 引用计数为 1</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">retainCount</span><span class="p">]);</span>    <span class="c1">// &quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span> <span class="c1">// 由于 p 定义时加上了 __block，不会有 retain，p 引用计数不变为 1</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">retainCount</span><span class="p">]);</span> <span class="c1">// &quot;1&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Block_copy</span><span class="p">(</span><span class="n">myBlock</span><span class="p">);</span>
</span><span class='line'><span class="n">myBlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">p</span> <span class="k">release</span><span class="p">];</span> <span class="c1">// p 引用计数 -1，此时为 0，释放了</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="block-5">内存管理</h2></h1>

<p>block 也是一个对象</p>

<h2>MRC</h2>

<ul>
<li>只要 block 没有引用外部局部变量，block 放在全局区</li>
<li>只要 block 引用外部局部变量，block 则放在栈里</li>
<li>block 只能使用 copy，不能使用 retain，使用 retain，block 还是在栈中，使用 copy 才会到堆里</li>
</ul>


<h2>ARC</h2>

<ul>
<li>只要 block 引用外部局部变量，block 则放在堆里</li>
<li>block 使用 strong，最好不要使用 copy</li>
</ul>


<h1><h2 id="block-6">循环引用</h2></h1>

<p>block 造成循环引用: block 会默认对里面用到的所有外部对象变量全部强引用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">_block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">);</span> <span class="c1">// 强引用了 self，造成该实例不会销毁</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解决: 使用弱引用</span>
</span><span class='line'><span class="k">__weak</span> <span class="k">typeof</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="n">_block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">weakSelf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 由于 block 中可能要用到这个 weakSelf</span>
</span><span class='line'>    <span class="c1">// 而当用到时，可能这个弱指针被销毁了，所以可在定义一个强指针保存它</span>
</span><span class='line'>    <span class="k">__strong</span> <span class="k">typeof</span><span class="p">(</span><span class="n">weakSelf</span><span class="p">)</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">weakSelf</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 之后就可使用这个 strongSelf 啦</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="block-7">传递变量</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 如果是局部变量，block 是值传递</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="n">block</span><span class="p">();</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 如是静态变量，block 是指针传递</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="n">block</span><span class="p">();</span> <span class="c1">// 5</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 如是全局变量，block 是指针传递</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">block</span><span class="p">();</span> <span class="c1">// 5</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 如是 __block 修饰的变量，block 是指针传递</span>
</span><span class='line'><span class="k">__block</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="n">block</span><span class="p">();</span> <span class="c1">// 5</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - SEL, Id]]></title>
    <link href="http://away0x.github.io/blog/2018/02/02/oc-sel-id/"/>
    <updated>2018-02-02T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/02/oc-sel-id</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#sel">SEL</a></li>
<li><a href="#id">id</a></li>
</ul>


<h1><h2 id="sel">选择器类型 SEL</h2></h1>

<ul>
<li>SEL 类型代表着方法的签名，在类对象的方法列表中存储着该签名与方法代码的对应关系</li>
<li>每个类的方法列表都存储在类对象中</li>
<li>每个方法都有一个与之对应的 SEL 类型的对象</li>
<li>根据一个 SEL 对象就可以找到方法的地址，进而调用方法</li>
<li>SEL 类型的定义: <code>typedef struct obj_selector *SEL;</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">[</span><span class="n">p</span> <span class="n">test</span><span class="p">];</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">1. 首先把 test 这个方法名包装成 SEL 类型的数据</span>
</span><span class='line'><span class="cm">2. 根据 SEL 数据到该类的类对象上去找对应的方法的代码，找到就执行该代码</span>
</span><span class='line'><span class="cm">3. 没找到则根据类对象上父类的类对象指针，去父类的类对象中查找，找到则执行父类的代码</span>
</span><span class='line'><span class="cm">4. 如还没找到，一直向上找，直到基类 NSObject</span>
</span><span class='line'><span class="cm">5. 如都没找到就报错</span>
</span><span class='line'>
</span><span class='line'><span class="cm">**这个操作过程中有缓存，第一次找是一个个的找，很耗性能，之后再用，直接从缓存中取用</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>SEL 的作用 1: 配合对象/类来检查对象/类中有没有实现某一个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">SEL</span> <span class="n">sel</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">setAge</span><span class="p">:);</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 判断对象 p 中有没实现实例方法 &quot;setAge:&quot;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// respondsToSelector 注意点</span>
</span><span class='line'><span class="c1">// 1. 如果是通过一个对象来调用该方法那么会判断该对象有没实现该实例方法</span>
</span><span class='line'><span class="c1">// 2. 如果是通过类来调用，那么会判断该类有没实现这个类方法</span>
</span><span class='line'>
</span><span class='line'><span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>SEL 的作用 2: 配合对象/类来调用某一个 SEL 方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 调用无参方法</span>
</span><span class='line'><span class="kt">SEL</span> <span class="n">sel</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">demo</span><span class="p">);</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 调用 p 对象中 sel 类型对应的方法，即 demo 方法</span>
</span><span class='line'><span class="p">[</span><span class="n">p</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span> <span class="c1">// 相当于 [p demo]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用单参方法</span>
</span><span class='line'><span class="kt">SEL</span> <span class="n">sel2</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">demo</span><span class="p">:);</span>
</span><span class='line'><span class="p">[</span><span class="n">p</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">sel2</span> <span class="nl">withObject</span><span class="p">:</span><span class="s">@&quot;123&quot;</span><span class="p">];</span> <span class="c1">// withObject 就是要传递的参数</span>
</span><span class='line'><span class="c1">// 如用 performSelector 调用有参方法，那么参数必须是对象类型</span>
</span><span class='line'><span class="c1">//    即方法的形参必须是一个对象，因为 withObject 只能传递一个对象</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用多参方法 (performSelector 最多只能传递 2 个参数)</span>
</span><span class='line'><span class="kt">SEL</span> <span class="n">sel3</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">demo</span><span class="p">:</span><span class="nl">andOther</span><span class="p">:);</span>
</span><span class='line'><span class="p">[</span><span class="n">p</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">sel3</span> <span class="nl">withObject</span><span class="p">:</span><span class="s">@&quot;123&quot;</span> <span class="nl">withObject</span><span class="p">:</span><span class="s">@&quot;456&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>SEL 的作用 3: 配合对象将 SEL 类型作为方法的形参</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">Demo</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="c1">// 调用传入对象的指定方法</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">useSel:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span> <span class="nf">andSel:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Demo</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">useSel:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span> <span class="nf">andSel:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">obj</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="n">Demo</span> <span class="o">*</span><span class="n">demo</span> <span class="o">=</span> <span class="p">[</span><span class="n">Demo</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="c1">//     调用 obj1 的 test 方法</span>
</span><span class='line'><span class="p">[</span><span class="n">demo</span> <span class="nl">useSel</span><span class="p">:</span><span class="n">obj1</span> <span class="nl">andSel</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="id">id</h2></h1>

<ul>
<li>id 是一个数据类型，并且是一个动态数据类型 (万能指针)</li>
</ul>


<h3>静态类型</h3>

<p>将一个指针变量定义为特定类的对象时，使用的是静态类型，在编译时就知道这个指针变量所属的类。这个变量总是存储特定类的对象</p>

<p>编译时已经知道类中有哪些属性和方法，如访问了不属于该静态类型的属性和方法，编译器会报错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>动态类型</h3>

<p>这一特性是程序直到执行时才确定对象所属的类</p>

<p>编译时不知道其真实类型，在运行时才知道其真实类型。并且通过动态类型定义变量，如访问了不属于该动态类型的属性和方法，编译器不会报错 (躲过了编译器的检查)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// id 的定义中，已经包好了 *，所以自己不用写</span>
</span><span class='line'><span class="c1">// id 指针只能指向 OC 中的对象</span>
</span><span class='line'><span class="c1">// 当 id 指向的变量调用了本项目中所有类都没有的方法，编译器会报错</span>
</span><span class='line'><span class="c1">// id 类型不能使用 . 语法。因为 . 语法是编译时特性，id 是运行时特性</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>id == NSObject *</code>，但是数据类型不一样

<ol>
<li>id 是动态类型</li>
<li><code>NSObject *</code> 是静态类型</li>
</ol>
</li>
</ul>


<h3>动态类型的作用</h3>

<ol>
<li>调用子类方法而不用强转

<ol>
<li>通过静态类型定义变量，不能调用子类特有的方法(除非强转成子类)
 <code>objectivec
 id obj = [Father new];
 [obj child_function]; // 可调用子类特有的方法
</code></li>
<li>通过动态类型定义变量，可以调用子类特有的方法(不用强转)</li>
</ol>
</li>
<li>可通过动态数据类型调用私有方法(即只有实现没有声明的方法)</li>
</ol>


<h3>动态类型的缺点</h3>

<ul>
<li>由于动态类型可调用任意方法，所以有可能调用到不属于自己的方法，而编译不会报错，所以可能导致运行时报错</li>
<li>虽说 id 类型可存储任何类型的对象，但不要养成滥用这种通用类型的习惯

<ol>
<li>如没使用<strong>多态</strong>尽量使用静态类型

<ul>
<li>用于多态，可减少代码量，避免调用子类特有的方法需要强制类型转换</li>
</ul>
</li>
<li>静态类型可以更早的发现错误 (在编译阶段而不是运行阶段)】</li>
<li>静态类型可提高程序的可读性</li>
<li><strong>使用动态类型前最好判断其真实类型</strong> (避免运行时错误)</li>
</ol>
</li>
</ul>


<h3>动态类型判断真实类型</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// </span>
</span><span class='line'><span class="c1">// 方法1: isKindOfClass:classObj 判断实例对象是否是这个类或者这个类的子类的实例</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">Student</span> <span class="o">*</span><span class="n">stu</span> <span class="o">=</span> <span class="p">[</span><span class="n">Student</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Person</span> <span class="k">class</span><span class="p">]];</span> <span class="c1">// YES</span>
</span><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">stu</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Person</span> <span class="k">class</span><span class="p">]];</span>    <span class="c1">// YES</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// isMemberOfClass:classObj 判断是否是这个类的实例</span>
</span><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">Student</span> <span class="o">*</span><span class="n">stu</span> <span class="o">=</span> <span class="p">[</span><span class="n">Student</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="nl">isMemberOfClass</span><span class="p">:[</span><span class="n">Person</span> <span class="k">class</span><span class="p">]];</span> <span class="c1">// YES</span>
</span><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">stu</span> <span class="nl">isMemberOfClass</span><span class="p">:[</span><span class="n">Person</span> <span class="k">class</span><span class="p">]];</span>    <span class="c1">// NO (是子类不是实例)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Person</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">obj</span> <span class="n">person_function</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectiveC - 基础]]></title>
    <link href="http://away0x.github.io/blog/2018/02/01/oc-basic/"/>
    <updated>2018-02-01T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/02/01/oc-basic</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#c">OC vs. C</a></li>
<li><a href="#type">数据类型</a></li>
<li><a href="#if-loop">流程语句</a></li>
<li><a href="#function">函数</a></li>
<li><a href="#oop">面向对象</a></li>
<li><a href="#catch">异常处理</a></li>
<li><a href="#import">import</a></li>
<li><a href="#output">输入输出</a></li>
<li><a href="#hello">Hello World</a></li>
</ul>


<h1><h2 id="c">OC vs. C</h2></h1>

<ul>
<li>Objective-C 是一门面向对象的计算机语言</li>
<li>它在 C 语言的基础上增加了一层最小的面向对象语法</li>
<li>OC 完全兼容 C 语言，可在 OC 代码中混入 C/C++ 代码

<ul>
<li>并且可将 C 语言的源文件和 OC 的源文件组合在一起生成可执行文件</li>
</ul>
</li>
</ul>


<p>源代码文件拓展名对比</p>

<table>
<thead>
<tr>
<th style="text-align:right;">  </th>
<th style="text-align:center;"> 头文件 </th>
<th style="text-align:left;"> 实现文件 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;"> c </td>
<td style="text-align:center;"> .h </td>
<td style="text-align:left;"> .c </td>
</tr>
<tr>
<td style="text-align:right;"> c++ </td>
<td style="text-align:center;"> .h </td>
<td style="text-align:left;"> .cpp </td>
</tr>
<tr>
<td style="text-align:right;"> oc </td>
<td style="text-align:center;"> .h </td>
<td style="text-align:left;"> .m </td>
</tr>
<tr>
<td style="text-align:right;"> oc &amp; c++ </td>
<td style="text-align:center;"> .h </td>
<td style="text-align:left;"> .mm </td>
</tr>
</tbody>
</table>


<p>OC 与 C</p>

<table>
<thead>
<tr>
<th>OC </th>
<th> C</th>
</tr>
</thead>
<tbody>
<tr>
<td>面向对象 </td>
<td> 数据类型</td>
</tr>
<tr>
<td>@property 与 @synthesize </td>
<td> 常量变量</td>
</tr>
<tr>
<td>类方法与实例方法 </td>
<td> 运算符</td>
</tr>
<tr>
<td>self 关键字 </td>
<td> 流程语句</td>
</tr>
<tr>
<td>点语法、@selector </td>
<td> 函数</td>
</tr>
<tr>
<td>category </td>
<td> 进制</td>
</tr>
<tr>
<td>protocol </td>
<td> 一维/多维数组</td>
</tr>
<tr>
<td>copy </td>
<td> 指针</td>
</tr>
<tr>
<td>block </td>
<td> 结构体</td>
</tr>
<tr>
<td>autoreleasepool </td>
<td> 预处理指令</td>
</tr>
<tr>
<td>Foundation </td>
<td> 文件操作</td>
</tr>
<tr>
<td>常用结构体 </td>
<td> &hellip;</td>
</tr>
<tr>
<td>KVC、KVO </td>
<td> /</td>
</tr>
<tr>
<td>&hellip; </td>
<td> /</td>
</tr>
</tbody>
</table>


<p>关键字 (OC 中新增的关键字大部分都以 @ 符号开头)</p>

<table>
<thead>
<tr>
<th>OC </th>
<th> C</th>
</tr>
</thead>
<tbody>
<tr>
<td>@interface </td>
<td> auto</td>
</tr>
<tr>
<td>@implementation </td>
<td> double</td>
</tr>
<tr>
<td>@end </td>
<td> int</td>
</tr>
<tr>
<td>@public </td>
<td> struct</td>
</tr>
<tr>
<td>@protected </td>
<td> break</td>
</tr>
<tr>
<td>@private </td>
<td> else</td>
</tr>
<tr>
<td>@selector </td>
<td> long</td>
</tr>
<tr>
<td>@try </td>
<td> switch</td>
</tr>
<tr>
<td>@catch </td>
<td> case</td>
</tr>
<tr>
<td>@throw </td>
<td> enum</td>
</tr>
<tr>
<td>@finally </td>
<td> register</td>
</tr>
<tr>
<td>@protocol </td>
<td> typedef</td>
</tr>
<tr>
<td>@optional </td>
<td> char</td>
</tr>
<tr>
<td>@required </td>
<td> extern</td>
</tr>
<tr>
<td>@class </td>
<td> return</td>
</tr>
<tr>
<td>@property </td>
<td> union</td>
</tr>
<tr>
<td>@synthesize </td>
<td> const</td>
</tr>
<tr>
<td>@dynamic </td>
<td> float</td>
</tr>
<tr>
<td>BOOL </td>
<td> short</td>
</tr>
<tr>
<td>Class </td>
<td> unsigned</td>
</tr>
<tr>
<td>SEL </td>
<td> continue</td>
</tr>
<tr>
<td>YES </td>
<td> for</td>
</tr>
<tr>
<td>NO </td>
<td> signed</td>
</tr>
<tr>
<td>id </td>
<td> void</td>
</tr>
<tr>
<td>self </td>
<td> default</td>
</tr>
<tr>
<td>super </td>
<td> goto</td>
</tr>
<tr>
<td>nil </td>
<td> sizeof</td>
</tr>
<tr>
<td>atomic </td>
<td> volatile</td>
</tr>
<tr>
<td>nonatomic </td>
<td> do</td>
</tr>
<tr>
<td>retain </td>
<td> if</td>
</tr>
<tr>
<td>assign </td>
<td> while</td>
</tr>
<tr>
<td>copy </td>
<td> static</td>
</tr>
<tr>
<td>block </td>
<td> /</td>
</tr>
<tr>
<td>_ </td>
<td> /</td>
</tr>
</tbody>
</table>


<h2>iOS9 新增关键字</h2>

<p>关键字不能用于基本数据类型，nil 只用于对象</p>

<ul>
<li>nullable (表可能为空，用于属性、方法返回值和参数中)</li>
<li>nonnull (不能为空)</li>
<li>null_resettable (get 方法不能返回 nil，set 方法可以传入 nil)</li>
<li>null_unspecified (不确定是否为空)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">@</span><span class="n">porperty</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="n">nullable</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 或</span>
</span><span class='line'><span class="p">@</span><span class="n">porperty</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="type">数据类型</h2></h1>

<blockquote><p>加粗为 OC 相对于 C 新增的</p></blockquote>

<h2>基本数据类型</h2>

<ul>
<li>整型 (short int long <strong>BOOL</strong>)

<ul>
<li>布尔型 BOOL: 取值为 YES(1)、NO(0)</li>
</ul>
</li>
<li>字符型 (char)</li>
<li>浮点型 (float double)</li>
</ul>


<h2>Block 类型 (OC 新增)</h2>

<ul>
<li><strong>block</strong> (代码块数据类型)</li>
</ul>


<h2>构造类型</h2>

<p>数组、结构体、枚举、共用体</p>

<h2>指针类型</h2>

<ul>
<li><strong>class</strong></li>
<li><strong>id</strong> (动态对象类型、万能指针)</li>
<li><strong>NSObject</strong> (对象类型)</li>
</ul>


<h2>空类型 void</h2>

<h2>特殊类型 (OC 新增)</h2>

<ul>
<li><strong>SEL</strong> (选择器类型)</li>
<li><strong>nil</strong></li>
</ul>


<h2>类型判断</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">BOOL</span> <span class="n">is_person</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Person</span> <span class="k">class</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="if-loop">流程语句</h2></h1>

<ul>
<li>C 语言中使用的流程语句 OC 都可使用

<ul>
<li>if switch while do-while for break continue &hellip;</li>
</ul>
</li>
</ul>


<p>新增语句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 增强型 for 循环</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="k">in</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="function">函数</h2></h1>

<ul>
<li>C 语言中函数的声明与实现

<ul>
<li>声明: <code>int sum(int a, int b);</code></li>
<li>实现: <code>int sum(int a, int b) { return a + b }</code></li>
</ul>
</li>
<li>OC 中函数的声明与实现

<ul>
<li>声明: <code>- (int)sum:(int)a andB:(int)b;</code></li>
<li>实现: <code>- (int)sum:(int)a andB:(int)b { return a + b  }</code></li>
</ul>
</li>
<li><strong>注意:</strong> 方法只能写在类里面，而函数可以写在任何地方</li>
</ul>


<h1><h2 id="oop">面向对象</h2></h1>

<blockquote><p>仅介绍特殊语法</p></blockquote>

<h2>属性生成器</h2>

<ul>
<li>@property</li>
<li>@synthesize</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 声明属性</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合成属性</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span> <span class="o">=</span> <span class="n">_name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>分类</h2>

<ul>
<li>分类是横向拓展、继承是竖向扩展</li>
<li>使用分类拓展类，无需子类化</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="bp">NSString</span> <span class="nl">(MyNSString)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">encryptWithMD5</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>协议</h2>

<ul>
<li>类似 C#、Java 中的接口</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@protocol</span> <span class="nc">MyProtocol</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">myProtocolMethod</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="import">异常处理</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@try</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">@catch</span><span class="p">(</span><span class="bp">NSException</span> <span class="o">*</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">@finally</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="import">import</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// C</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OC</span>
</span><span class='line'><span class="c1">// 和 include 功能一样，将文件拷贝到 import 的位置</span>
</span><span class='line'><span class="c1">// import 同一个文件多次也只会导入一次</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>import 功能和 include 一样，但 import 更强大</li>
<li>import 可防止重复导入，可不用像使用 C 的 include 一样，程序员得去写头文件卫士来预防这个问题</li>
<li><code>#import</code> 导入的文件名需要加上双引号或尖括号

<ul>
<li>双引号: 编译器会先在项目目录下查找相应的头文件</li>
<li>尖括号: 编译器会先在预先设定好的标准目录下查找相应的头文件</li>
</ul>
</li>
</ul>


<h1><h2 id="output">输入输出</h2></h1>

<h2>输入</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// 接收用户控制台的输入信息</span>
</span><span class='line'><span class="c1">// 获取整型数据</span>
</span><span class='line'><span class="kt">int</span> <span class="n">userSelect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">userSelect</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取字符串类型</span>
</span><span class='line'><span class="kt">char</span> <span class="n">ans</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">rewind</span><span class="p">(</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ans</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>log</h2>

<ul>
<li>NSLog 支持 C 语言的字符串，但支持得不是很好

<ul>
<li>如打印中文的 C 语言字符串，可能输出乱码，或输出空白</li>
</ul>
</li>
</ul>


<p>打印类型时可用如 NSStringFromCGPoint 这些函数辅助，CGRect 等类型同</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="bp">CGPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">NSStringFromCGPoint</span><span class="p">(</span><span class="n">point</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>在函数内打印时可使用 <strong>func</strong> 打印出当前函数名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello C!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello OC!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 输出 C 语言字符串</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="o">=</span> <span class="s">&quot;lalala&quot;</span><span class="err">；</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">content</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>去除控制台输出运行的时间和项目名称</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">#define NSLog(FORMAT, ...) fprintf(stderr,&quot;%s&quot;,[[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String])</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h2 id="hello">Hello World</h2></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 可见 OC 是兼容 C 的</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello C!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// NSLog 会自动换行</span>
</span><span class='line'>    <span class="c1">// NSLog 在输出时会附加一些系统信息</span>
</span><span class='line'>    <span class="c1">// NSLog 和 printf 接收的参数不一样</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello OC!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始实现前端模板引擎]]></title>
    <link href="http://away0x.github.io/blog/2017/05/17/fd-template/"/>
    <updated>2017-05-17T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2017/05/17/fd-template</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>本文总结了 3 种实现模板引擎的方式，最后将编写一个 类似于 underscore.template 的模板插件</p></blockquote>

<ul>
<li><a href="#replace">replace</a></li>
<li><a href="#tplstr">模板字符串</a></li>
<li><a href="#function">new Function</a></li>
<li><a href="https://github.com/Away0x/learning-template">github</a></li>
</ul>


<h1><h2 id="replace">replace</h2></h1>

<h2>介绍</h2>

<p>replace 是字符串提供的一个超级强大的方法，这里只介绍简单的使用，更多详细的语法参见下面提供的链接
- 一参可为 <code>字符串</code> 或 <code>正则</code>:
    - 为正则时有两种情况: <code>普通匹配模式</code> 和 <code>全局匹配模式</code>:
        - 全局匹配模式下，若二参为函数，则该函数在每次匹配时都会被调用
- 二参可为 <code>字符串</code> 或 <code>一个用于生成字符串的函数</code>:
    - 当为字符串时:
        - 可在字符串中使用 特殊替换字符 ($n &hellip;)
    - 当为函数时:
        - 函数中不能用 特殊替换字符
        - 一参为正则匹配的文本
        - 倒数第二参为匹配到的子字符串在原字符串中的偏移量
        - 最后一参为被匹配的原始字符串
        - 其余参数为正则中每个分组匹配到的文本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">replacer</span><span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// match 为 &#39;abc12345#$*%&#39;        : 正则匹配的文本</span>
</span><span class='line'>    <span class="c1">// p1,p2,p3 分别为 abc 12345 #$*% : 即每个小组匹配到的文本, pn 表示有 n 个小组</span>
</span><span class='line'>    <span class="c1">// offset 为 0                    : 匹配到的子字符串在原字符串中的偏移量。</span>
</span><span class='line'>    <span class="c1">//      （比如，如果原字符串是&#39;abcd&#39;，匹配到的子字符串时&#39;bc&#39;，那么这个参数将是1）</span>
</span><span class='line'>    <span class="c1">// string 为 &#39;abc12345#$*%&#39;       : 被匹配的原始字符串</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; - &#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 注意正则中的 括号 ，这里分有 3个组</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">newString</span> <span class="o">=</span> <span class="s1">&#39;abc12345#$*%&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([^\d]*)(\d*)([^\w]*)/</span><span class="p">,</span> <span class="nx">replacer</span><span class="p">);</span>
</span><span class='line'><span class="c1">// newString =&gt; &#39;abc - 12345 - #$*%&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下是各种情况下的具体案例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 最基础的使用</span>
</span><span class='line'><span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span><span class="p">)</span> <span class="c1">// &#39;A23&#39;</span>
</span><span class='line'><span class="s1">&#39;lalala 2Away0x2&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/2(.*)2/</span><span class="p">,</span> <span class="s1">&#39;$1&#39;</span><span class="p">)</span> <span class="c1">// &#39;lalala Away0x&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// trim</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">trim</span> <span class="o">=</span> <span class="nx">str</span> <span class="o">=&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(^\s*)|(\s*$)/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">trim</span><span class="p">(</span><span class="s1">&#39;  abc    &#39;</span><span class="p">)</span> <span class="c1">// &#39;abc&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// format</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">str</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/{(\d+)}/g</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">args</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;lalal{0}wowowo{1}hahah{2}&#39;</span><span class="p">)(</span><span class="s1">&#39;-A-&#39;</span><span class="p">,</span> <span class="s1">&#39;-B-&#39;</span><span class="p">,</span> <span class="s1">&#39;-C&#39;</span><span class="p">)</span> <span class="c1">// lala-A-wowo-B-haha-C</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原理</h2>

<p>先在模板中预留占位(  )，再将对应的数据填入</p>

<h2>实现</h2>

<p>要求1: 可填充简单数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">tpl</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">//g</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">data</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span>
</span><span class='line'><span class="nx">tpl</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;tpl&#39;</span><span class="p">})</span> <span class="c1">// &#39;&lt;div&gt;tpl&lt;/div&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>要求2: 可填充嵌套数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 可根据占位符  中的 &quot;.&quot; 来获得数据的依赖路径，从而得到对应的数据</span>
</span><span class='line'><span class="c1">// 由于 使用 &quot;.&quot; 连接，所以其前后应为合法的变量名，因此需重新构造正则</span>
</span><span class='line'><span class="cm">/* 合法变量名</span>
</span><span class='line'><span class="cm">*    - 开头可为字符和少量特殊字符: [a-zA-Z$_]</span>
</span><span class='line'><span class="cm">*    - 余部还可是数字:            [a-zA-Z$_0-9]</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="c1">// 除开头外还需匹配 连接符 &quot;.&quot; ,因此最终正则为: //g</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">tpl</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">reg</span> <span class="o">=</span> <span class="sr">//g</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 全局匹配模式下，replace 的回调在每次匹配时都会执行,</span>
</span><span class='line'>    <span class="c1">// p 为占位符中的变量,该例为 data.a</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">reg</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">paths</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="c1">// [&#39;data&#39;, &#39;a&#39;]</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">result</span>  <span class="o">=</span> <span class="nx">data</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nx">paths</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="p">]</span> <span class="c1">// 得到路径最末端的数据</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">||</span> <span class="nx">match</span> <span class="c1">// 需转成字符串，因为可能遇到 0, null 等数据</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">tpl</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="s1">&#39;tpl&#39;</span><span class="p">}})</span> <span class="c1">// &#39;&lt;div&gt;tpl&lt;/div&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">tpl</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">reg</span> <span class="o">=</span> <span class="sr">//g</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">reg</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">paths</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">result</span>  <span class="o">=</span> <span class="nx">data</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nx">paths</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">||</span> <span class="nx">match</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>优缺点</h3>

<ul>
<li>优点: 简单</li>
<li>缺点: 无法在模板中使用表达式，所有数据都得事先计算好再填入，且填充的数据应为基础类型，灵活性差，难以满足复杂的需求</li>
</ul>


<h3>资料</h3>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">详细语法</a></p>

<h1><h2 id="tplstr">模板字符串</h2></h1>

<h2>介绍</h2>

<ul>
<li>模板字符串包裹在 反引号(Esc按钮下面那个) 中，其中可通过 ${} 的语法进行插值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 特性一:多行</span>
</span><span class='line'><span class="err">`</span><span class="mi">123123</span>
</span><span class='line'> <span class="mi">23213</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 特性二: 字符串中可插值</span>
</span><span class='line'><span class="cm">/* 作为一门伪函数式编程语言，js 的很多语法都可以返回数据:</span>
</span><span class='line'><span class="cm">*    - 表达式: 各种运算符表达式，三目(可用来替代简单的判断语句)</span>
</span><span class='line'><span class="cm">*    - 函数:  封装各种复杂的逻辑，最后返回一个值即可</span>
</span><span class='line'><span class="cm">*    - 方法:  如一些有返回值的数据方法</span>
</span><span class='line'><span class="cm">*       - 最强大的如数组的 map, filter ...</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="c1">// 以下字符串都等于 &#39;123tpl456&#39;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str1</span> <span class="o">=</span> <span class="err">`</span><span class="mi">123</span><span class="nx">$</span><span class="p">{</span><span class="s1">&#39;tpl&#39;</span><span class="p">}</span><span class="mi">456</span><span class="err">`</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str2</span> <span class="o">=</span> <span class="err">`</span><span class="mi">123</span><span class="nx">$</span><span class="p">{</span><span class="kc">false</span> <span class="o">||</span> <span class="s1">&#39;tpl&#39;</span><span class="p">}</span><span class="mi">456</span><span class="err">`</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str3</span> <span class="o">=</span> <span class="err">`</span><span class="mi">123</span><span class="nx">$</span><span class="p">{</span><span class="kc">true</span> <span class="o">?</span> <span class="s1">&#39;tpl&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">}</span><span class="mi">456</span><span class="err">`</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str4</span> <span class="o">=</span> <span class="err">`</span><span class="mi">123</span><span class="nx">$</span><span class="p">{</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="s1">&#39;tpl&#39;</span><span class="p">}())</span> <span class="p">}</span><span class="mi">456</span><span class="err">`</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="s1">&#39;tpl&#39;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str5</span> <span class="o">=</span> <span class="err">`</span><span class="mi">123</span><span class="nx">$</span><span class="p">{</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">}</span><span class="mi">456</span><span class="err">`</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str6</span> <span class="o">=</span> <span class="err">`</span><span class="mi">123</span><span class="nx">$</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;T&#39;</span><span class="p">,</span> <span class="s1">&#39;P&#39;</span><span class="p">,</span> <span class="s1">&#39;L&#39;</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="mi">456</span><span class="err">`</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="nx">str1</span><span class="p">,</span> <span class="nx">str2</span><span class="p">,</span> <span class="nx">str3</span><span class="p">,</span> <span class="nx">str4</span><span class="p">,</span> <span class="nx">str5</span><span class="p">,</span> <span class="nx">str6</span><span class="p">].</span><span class="nx">every</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span> <span class="o">===</span> <span class="s1">&#39;123tpl456&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 特性三: 模板函数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">tag</span> <span class="p">(</span><span class="nx">strArr</span><span class="p">,</span> <span class="p">...</span><span class="nx">vals</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">strArr</span><span class="p">,</span> <span class="nx">vals</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">tag</span><span class="err">`</span><span class="nx">Hello</span> <span class="nx">$</span><span class="p">{</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">}</span> <span class="nx">world</span> <span class="nx">$</span><span class="p">{</span><span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">}</span><span class="err">`</span>
</span><span class='line'><span class="c1">// strArr =&gt; [&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;]</span>
</span><span class='line'><span class="c1">// vals   =&gt; [15, 30]  (${}里的值)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>案例</h2>

<ul>
<li>由于直接用模板字符串当模板引擎了，所以就直接写个组件吧

<ul>
<li><a href="http://codepen.io/Away0x/pen/dvEGpL">演示</a></li>
<li><a href="https://github.com/Away0x/learning-template/blob/master/src/tplstr.pagination/page.js">代码</a></li>
</ul>
</li>
<li>用这种方法写模板需注意的是一定要细分组件(很函数式，有种写 jsx 的既视感)</li>
</ul>


<h3>资料</h3>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings">详细语法</a></li>
<li><a href="http://www.pdosgk.com/index.php/home/news/show/id/80442.html">相关文章</a></li>
</ul>


<h1><h2 id="function">new Function</h2></h1>

<h2>介绍</h2>

<ul>
<li>Function 是 js 提供的一个用于构造 Function 对象的构造函数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 普通函数</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">log</span> <span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Away0x&#39;</span><span class="p">,</span> <span class="s1">&#39;lalala&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Function 构造函数</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">log</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;msg&#39;</span><span class="p">,</span> <span class="s1">&#39;console.log(user, msg)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Away0x&#39;</span><span class="p">,</span> <span class="s1">&#39;lalala&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实现</h2>

<ul>
<li>大多数前端模板引擎都是用这种方式实现的，其原理在于运用了 js Function 对象可将字符串解析为函数的能力。</li>
<li>一个普通模板引擎的工作步骤大致如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 1. 编写模板</span>
</span><span class='line'><span class="p">{</span><span class="err">@</span> <span class="k">if</span><span class="p">(</span> <span class="nx">data</span><span class="p">.</span><span class="nx">con</span> <span class="o">&gt;</span> <span class="mi">20</span> <span class="p">)</span> <span class="p">{</span> <span class="err">@</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">ifififififif</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="p">{</span><span class="err">@</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="err">@</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">elseelseelseelse</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="p">{</span><span class="err">@</span> <span class="p">}</span> <span class="err">@</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 2. 由模板生成函数体字符串</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">functionbody</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tpl</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">con</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">tpl</span> <span class="o">+=</span> <span class="s1">&#39;&lt;p&gt;ifififififif&lt;/p&gt;&#39;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">tpl</span> <span class="o">+=</span> <span class="s1">&#39;&lt;p&gt;ifififififif&lt;/p&gt;&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">tpl</span>
</span><span class='line'><span class="err">`</span>
</span><span class='line'><span class="c1">// 3. 通过 Function 解析字符串并生成函数</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="nx">functionbody</span><span class="p">)(</span><span class="nx">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>由此可见，只要将 {@  @} 里的字符串内容生成 js 语句，而其余内容之前加上 一个 &lsquo;tpl += &rsquo; 即可。</li>
</ul>


<p>实现代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">tpl</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">tplStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">//g</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="s1">&#39;+(${p})+&#39;</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/{@(.+?)@}/g</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="s1">&#39;; ${p}; tpl += &#39;</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="err">`</span><span class="kd">var</span> <span class="nx">tpl</span><span class="o">=</span><span class="s1">&#39;${tplStr}&#39;</span><span class="p">;</span> <span class="k">return</span> <span class="nx">tpl</span><span class="p">;</span><span class="err">`</span><span class="p">)(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 测试</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'>    <span class="p">{</span><span class="err">@</span> <span class="k">if</span><span class="p">(</span> <span class="nx">data</span><span class="p">.</span><span class="nx">con</span> <span class="o">&gt;</span> <span class="mi">20</span> <span class="p">)</span> <span class="p">{</span> <span class="err">@</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">ifififififif</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="err">@</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="err">@</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">elseelseelseelse</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="err">@</span> <span class="p">}</span> <span class="err">@</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span><span class="err">@</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="err">@</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p"></span> <span class="o">:</span> <span class="p"></span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="err">@</span> <span class="p">}</span> <span class="err">@</span><span class="p">}</span>
</span><span class='line'><span class="err">`</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="nx">con</span><span class="o">:</span><span class="mi">21</span><span class="p">,</span> <span class="nx">list</span><span class="o">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">76</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">8</span><span class="p">]}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">tpl</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// &lt;p&gt;ifififififif&lt;/p&gt;</span>
</span><span class='line'><span class="c1">// &lt;p&gt;0 : 1&lt;/p&gt;&lt;p&gt;1 : 2&lt;/p&gt;&lt;p&gt;2 : 3&lt;/p&gt;&lt;p&gt;3 : 4&lt;/p&gt;&lt;p&gt;4 : 5&lt;/p&gt;&lt;p&gt;5 : 76&lt;/p&gt;&lt;p&gt;6 : 87&lt;/p&gt;&lt;p&gt;7 : 8&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ok, 一个最最简单的模板引擎就已经完成了，支持在模板中嵌入 js 语句，虽然只有不到10行，但还是挺强大的对不。</p>

<h2>拓展</h2>

<h3>实现模板类</h3>

<p>为了能够更好的使用，将前面的代码抽成一个类。
- 需求:
    - 标识符格式有可能和后端模板引擎冲突，因此应实现成可配置的
    - <code>{@  @}</code>: 用于嵌套逻辑语句
    - <code>`: 用于嵌套变量或表达式
    - 在模板中应能添加注释，注释有两种:
        -</code><!-- --><code>: 会输出
        -</code>{#  #}`: 这种注释会在编译时被忽略，即只在模板中可见</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Tpl</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span> <span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">defaultConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">signs</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">varSign</span><span class="o">:</span>       <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">],</span>    <span class="c1">// 变量/表达式</span>
</span><span class='line'>              <span class="nx">evalSign</span><span class="o">:</span>      <span class="p">[</span><span class="s1">&#39;{@&#39;</span><span class="p">,</span> <span class="s1">&#39;@}&#39;</span><span class="p">],</span>    <span class="c1">// 语句</span>
</span><span class='line'>                <span class="nx">commentSign</span><span class="o">:</span>   <span class="p">[</span><span class="s1">&#39;&lt;!--&#39;</span><span class="p">,</span> <span class="s1">&#39;--&gt;&#39;</span><span class="p">],</span> <span class="c1">// 普通注释</span>
</span><span class='line'>                <span class="nx">noCommentSign</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;{#&#39;</span><span class="p">,</span> <span class="s1">&#39;#}&#39;</span><span class="p">]</span>     <span class="c1">// 忽略注释</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 可通过配置来修改标识符</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">defaultConfig</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// [&#39;&#39;] =&gt; //g 构造正则</span>
</span><span class='line'>        <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;(.+?)&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 模板解析</span>
</span><span class='line'>    <span class="nx">_compile</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">tpl</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="c1">// 注释</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">noCommentSign</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">commentSign</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="s1">&#39;+&#39;</span><span class="c">&lt;!--</span> <span class="nx">$</span><span class="p">{</span><span class="nx">p</span><span class="p">}</span> <span class="o">--&gt;</span><span class="s1">&#39;+&#39;</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>            <span class="c1">// 表达式/变量</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">varSign</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="s1">&#39;+(${p})+&#39;</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>            <span class="c1">// 语句</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">evalSign</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">let</span>  <span class="nx">exp</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&amp;gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&amp;lt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="k">return</span> <span class="err">`</span><span class="s1">&#39;; ${exp}; tpl += &#39;</span><span class="err">`</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="err">`</span><span class="kd">var</span> <span class="nx">tpl</span><span class="o">=</span><span class="s1">&#39;${tpl}&#39;</span><span class="p">;</span> <span class="k">return</span> <span class="nx">tpl</span><span class="p">;</span><span class="err">`</span><span class="p">)(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 入口</span>
</span><span class='line'>    <span class="nx">compile</span> <span class="p">(</span><span class="nx">tplStr</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_compile</span><span class="p">(</span><span class="nx">tplStr</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">tpl</span> <span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">Tpl</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">tpl</span><span class="p">().</span><span class="nx">compile</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">)</span> <span class="c1">// 得到</span>
</span></code></pre></td></tr></table></div></figure>


<h3>注释的 BUG</h3>

<p>上面的代码在解析一些特殊模板注释(如下)时会出错 <code>&lt;!--  --&gt;</code> (由于注释中有标识符，因此会将 a 作为变量解析，会报未定义错误)</p>

<p>解决: 在解析注释时，如注释里有标识符，则将其先替换成其他符号，等语句变量的解析完成时，再替换回来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">commentSign</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">exp</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\{\&lt;\}\&gt;]/g</span><span class="p">,</span> <span class="nx">match</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="o">&amp;*&amp;</span><span class="nx">$</span><span class="p">{</span><span class="nx">match</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">()}</span><span class="o">&amp;*&amp;</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="s1">&#39;+&#39;</span><span class="c">&lt;!--</span> <span class="nx">$</span><span class="p">{</span><span class="nx">exp</span><span class="p">}</span> <span class="o">--&gt;</span><span class="s1">&#39;+&#39;</span><span class="err">`</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// ... 解析变量和语句</span>
</span><span class='line'><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\&amp;\*\&amp;(.*?)\&amp;\*\&amp;/g</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span>  <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>语法模式</h3>

<p>在模板里写 js 好烦呀，各种 &lsquo;{&rsquo; 乱飞，有些模板提供了更好看的语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{@ if data.con &gt; 20 @} // if (data.con &gt; 20) {
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>ifififififif<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>{@ elif data.con === 20 @} // } else if (data.con === 20) {
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>elseelseelseelseifififififif<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>{@ else @} // } else {
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>elseelseelseelse<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>{/@ if @} // }
</span><span class='line'>// for (var index = 0; index <span class="nt">&lt; data.list.length</span><span class="err">;</span> <span class="na">index</span><span class="err">++)</span> <span class="err">{</span> <span class="na">var</span> <span class="na">item =</span><span class="err"> </span><span class="s">data.list[index]</span>
</span><span class='line'><span class="err">{@</span> <span class="na">each</span> <span class="na">data</span><span class="err">.</span><span class="na">list</span> <span class="na">as</span> <span class="na">item</span> <span class="err">@}</span>
</span><span class='line'>    <span class="err">&lt;</span><span class="na">p</span><span class="nt">&gt;</span>循环  次: <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>{/@ each @}
</span></code></pre></td></tr></table></div></figure>


<p>其实就是在解析语句时多做一些处理而已:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 配置中增加 syntax 属性，默认 false, 其为 true 是开启 语法模式</span>
</span><span class='line'><span class="c1">// 配置中增加语法模式结束语句的标识符: endEvalSign: [&#39;{/@&#39;, &#39;@}&#39;]</span>
</span><span class='line'><span class="c1">// 给 Tpl 类添加方法，用于 语法模式 的语句解析</span>
</span><span class='line'><span class="nx">_syntax</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">exp</span> <span class="o">=</span> <span class="nx">str</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;if&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// if (xx) {</span>
</span><span class='line'>        <span class="nx">exp</span> <span class="o">=</span> <span class="err">`</span><span class="k">if</span> <span class="p">(</span> <span class="nx">$</span><span class="p">{</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)}</span> <span class="p">)</span> <span class="p">{</span><span class="err">`</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;else&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// } else {</span>
</span><span class='line'>        <span class="nx">exp</span> <span class="o">=</span> <span class="s1">&#39;} else {&#39;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;elif&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// } else if (xx) {</span>
</span><span class='line'>        <span class="nx">exp</span> <span class="o">=</span> <span class="err">`</span><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">$</span><span class="p">{</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)}</span> <span class="p">)</span> <span class="p">{</span><span class="err">`</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;each&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// for (var index = 0, len = xx.length; index &lt; len; index++) { var item = xx[index]</span>
</span><span class='line'>        <span class="nx">exp</span> <span class="o">=</span> <span class="err">`</span><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">$</span><span class="p">{</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]}.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">index</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">index</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">$</span><span class="p">{</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]}[</span><span class="nx">index</span><span class="p">]</span><span class="err">`</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">exp</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 修改 _compile 解析语句的 replace</span>
</span><span class='line'><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">evalSign</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span>  <span class="nx">exp</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&amp;gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;&amp;lt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="p">)</span>
</span><span class='line'>                               <span class="c1">// 语法模式</span>
</span><span class='line'>    <span class="nx">exp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">syntax</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">_syntax</span><span class="p">(</span><span class="nx">exp</span><span class="p">)</span> <span class="o">:</span> <span class="nx">exp</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="s1">&#39;; ${exp}; tpl += &#39;</span><span class="err">`</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// 增加结束标识的解析 {/@ if @}  {/@ each @}</span>
</span><span class='line'><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">endEvalSign</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="s2">&quot;&#39;} tpl += &#39;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>过滤器</h3>

<ul>
<li>很多模板引擎中都有提供很多好用的过滤器:

<ul>
<li>字符串转大写的过滤器: <code>&lt;p&gt;tpl&lt;/p&gt; =&gt; &lt;p&gt;TPL&lt;/p&gt;</code></li>
<li>字符串转大写的过滤器(支持流式): <code>&lt;p&gt;tpl&lt;/p&gt;</code></li>
</ul>
</li>
</ul>


<p>现在我们来编写这个拓展</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 由于过滤器是对于变量的操作，所以只需在解析变量标识符的过程中做一下处理即可</span>
</span><span class='line'><span class="c1">//  =&gt; 无过滤器直接返回，  有过滤器则调用 Filters 类中对应的过滤器函数</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 过滤器函数</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Filters</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">upper</span><span class="o">:</span> <span class="nx">str</span> <span class="o">=&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解析 </span>
</span><span class='line'><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">signs</span><span class="p">.</span><span class="nx">varSign</span><span class="p">,</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">filterIndex</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">p</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">filterIndex</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 有过滤器</span>
</span><span class='line'>        <span class="kr">const</span>
</span><span class='line'>            <span class="nx">arr</span>     <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">trim</span><span class="p">()),</span>
</span><span class='line'>            <span class="nx">filters</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">[],</span>
</span><span class='line'>            <span class="nx">oldVal</span>  <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">val</span> <span class="o">=</span> <span class="nx">filters</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">curVal</span><span class="p">,</span> <span class="nx">filterName</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nx">Filters</span><span class="p">[</span><span class="nx">filterName</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="err">`没有</span> <span class="nx">$</span><span class="p">{</span><span class="nx">filterName</span><span class="p">}</span> <span class="err">过滤器`</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="err">`</span><span class="nx">Filters</span><span class="p">[</span><span class="s1">&#39;${filterName}&#39;</span><span class="p">](</span><span class="nx">$</span><span class="p">{</span><span class="nx">curVal</span><span class="p">})</span><span class="err">`</span>
</span><span class='line'>        <span class="p">},</span> <span class="nx">oldVal</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="s1">&#39;+(${val})+&#39;</span><span class="err">`</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="c1">// &lt;h1&gt;&lt;/h1&gt; // =&gt; &#39;LPT&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>至此该模板引擎就完成了，总结下功能:

<ul>
<li>支持在模板中使用 js 语句</li>
<li>支持自定义标识符</li>
<li>支持更简洁的语法模式</li>
<li>支持过滤器</li>
</ul>
</li>
</ul>


<h3>其他</h3>

<ul>
<li>虽然这个模板工具还是有点简陋，比如没有个很友善的报错机制，不支持 include 等功能，但日常跑跑小项目什么的已经足够强大了</li>
<li><a href="http://codepen.io/Away0x/pen/JWqgLw">演示</a></li>
<li><a href="https://github.com/Away0x/learning-template/blob/master/src/eval/tpl.js">代码</a></li>
</ul>


<h3>资料</h3>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">详细语法</a></li>
<li><a href="http://blog.jobbole.com/56689/">只有20行Javascript代码！手把手教你写一个页面模板引擎</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始实现前端表单验证插件]]></title>
    <link href="http://away0x.github.io/blog/2017/03/11/fd-form-validator/"/>
    <updated>2017-03-11T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2017/03/11/fd-form-validator</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>本文使用 es6、不依赖任何第三方库实现一个简单的表单验证插件 <a href="https://github.com/Away0x/baidu-ife/blob/master/yaoyao/lesson_2/index.html">github</a></p></blockquote>

<h1>效果</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form_group tel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>手机<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;tel&quot;</span> <span class="na">name=</span><span class="s">&quot;tel&quot;</span> <span class="na">id=</span><span class="s">&quot;tel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 配置</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;#tel&#39;</span><span class="p">,</span> <span class="c1">// 验证目标</span>
</span><span class='line'>  <span class="nx">message</span><span class="o">:</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;.tel p&#39;</span><span class="p">,</span> <span class="nx">success</span><span class="o">:</span> <span class="s1">&#39;手机格式正确&#39;</span> <span class="p">},</span> <span class="c1">// 验证信息显示的地方</span>
</span><span class='line'>  <span class="nx">validators</span><span class="o">:</span> <span class="p">[</span> <span class="c1">// 验证规则数组</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;tel&#39;</span><span class="p">,</span> <span class="nx">args</span><span class="o">:</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;手机格式错误&#39;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>代码结构</h1>

<ul>
<li>验证插件分为 <code>验证类Validator</code>，和 <code>验证规则validators</code>

<ul>
<li><code>验证类Validator</code>: 为主逻辑，负责接受表单的配置并对表单执行相应的验证规则。</li>
<li><code>验证规则validators</code>: 其内封装了大量的验证规则，供表单选用。</li>
</ul>
</li>
</ul>


<p>每个验证规则有着相同的结构，它们接收 表单的 value 返回验证结果和报错信息。例子如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 针对手机号的验证规则</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">tel</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">message</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">}</span><span class="o">=</span><span class="p">{})</span> <span class="o">=&gt;</span>
</span><span class='line'><span class="p">({</span>
</span><span class='line'>  <span class="nx">status</span><span class="o">:</span> <span class="sr">/^1[3|4|5|7|8][0-9]{9}$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="c1">// 验证状态</span>
</span><span class='line'>  <span class="nx">message</span> <span class="c1">// 报错信息</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>验证类 Validator</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Validator</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 接受配置 validatorConfig: 验证器配置, targetConfig: 针对于表单的配置</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * validatorConfig {}</span>
</span><span class='line'><span class="cm">  *   - error   每个表单验证失败时的函数   Function</span>
</span><span class='line'><span class="cm">  *   - success 每个表单验证成功时的函数   Function</span>
</span><span class='line'><span class="cm">  *   - reset   对表单执行重置操作时的函数 Function</span>
</span><span class='line'><span class="cm">  * targetConfig [{}, {}, ...] -&gt; 各个表单的配置</span>
</span><span class='line'><span class="cm">  *   - target        验证目标的选择器  String(Selector)</span>
</span><span class='line'><span class="cm">  *   - message       验证信息的配置  Object</span>
</span><span class='line'><span class="cm">  *     - target      验证信息显示位置的选择器  String(Selector)</span>
</span><span class='line'><span class="cm">  *  - placeholder 验证信息的默认值，重置时会显示该文本 String</span>
</span><span class='line'><span class="cm">  *  - success     验证成功时会显示该文本   String</span>
</span><span class='line'><span class="cm">  *  - validators    验证规则的配置  [{}, {}, ...] -&gt; 各个验证规则的配置</span>
</span><span class='line'><span class="cm">  *    - name        验证规则的名字 (validators[key])  String</span>
</span><span class='line'><span class="cm">  *    - args        验证规则的配置参数  Object</span>
</span><span class='line'><span class="cm">  *      - message   必有 该规则验证失败的显示文本  String</span>
</span><span class='line'><span class="cm">  *      - ...       该验证规则的其他配置参数  Any (各验证规则不同)</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nx">constructor</span> <span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>  <span class="c1">// 验证主逻辑</span>
</span><span class='line'>  <span class="nx">_check</span> <span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>  <span class="c1">// 单个表单的验证 (只对单个表单执行 _check)</span>
</span><span class='line'>  <span class="nx">run</span> <span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>  <span class="c1">// 执行全部表单的验证 (对所有要验证的表单执行 _check)</span>
</span><span class='line'>  <span class="nx">runAll</span> <span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>  <span class="c1">// 重置表单为初始状态</span>
</span><span class='line'>  <span class="nx">reset</span> <span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证主逻辑 _check</h3>

<p>其接受 验证表单的配置，并执行相应验证逻辑
如接受了以下配置:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">target</span><span class="o">:</span>  <span class="s1">&#39;#tel&#39;</span><span class="p">,</span> <span class="c1">// 验证目标</span>
</span><span class='line'>  <span class="c1">// 验证信息显示的地方</span>
</span><span class='line'>  <span class="nx">message</span><span class="o">:</span>  <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;.tel p&#39;</span><span class="p">,</span> <span class="nx">success</span><span class="o">:</span> <span class="s1">&#39;手机格式正确&#39;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">validators</span><span class="o">:</span> <span class="p">[</span> <span class="c1">// 验证规则数组</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;tel&#39;</span><span class="p">,</span> <span class="nx">args</span><span class="o">:</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;手机格式错误&#39;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需实现功能如下:</p>

<ol>
<li>对目标表单(target)执行配置中指定的验证规则 (validators: 此次配置中只有一个验证规则)</li>
<li>如验证规则中有 required ，则说明该表单为必填项，必须进行表单验证。</li>
<li>如验证规则中无 required ，则说明该表单为选填项，只在有输入时才进行表单验证。(该例配置为选填)</li>
<li>当验证成功时需在 message.target 处显示 message.success 的文本。</li>
<li>当验证失败时需在 message.target 处显示 验证规则中的指定 的文本。</li>
<li>失败文本显示优先级同验证规则配置的先后顺序。</li>
</ol>


<p>以下是具体实现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">_check</span> <span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span>
</span><span class='line'>      <span class="nx">validatorCfg</span>  <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_validatorConfig</span><span class="p">,</span>    <span class="c1">// 验证器配置</span>
</span><span class='line'>      <span class="nx">$target</span>       <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">target</span><span class="p">),</span>         <span class="c1">// 验证的表单</span>
</span><span class='line'>      <span class="nx">val</span>           <span class="o">=</span> <span class="nx">$target</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>            <span class="c1">// 验证的 value</span>
</span><span class='line'>      <span class="nx">$message</span>      <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">target</span><span class="p">),</span> <span class="c1">// 验证信息显示的地方</span>
</span><span class='line'>      <span class="nx">ownValidators</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">validators</span><span class="p">,</span>        <span class="c1">// 所有验证规则</span>
</span><span class='line'>      <span class="nx">result</span>        <span class="o">=</span> <span class="p">[]</span>                        <span class="c1">// 失败信息数组</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">required</span> <span class="o">=</span> <span class="kc">false</span> <span class="c1">// 不是必填项的话，只在有输入内容时进行检查 (默认为不必填)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 遍历执行验证器</span>
</span><span class='line'>    <span class="nx">ownValidators</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">validator</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">validator</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;required&#39;</span><span class="p">)</span> <span class="nx">required</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">// 必填</span>
</span><span class='line'>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">Validators</span><span class="p">[</span><span class="nx">validator</span><span class="p">.</span><span class="nx">name</span><span class="p">](</span><span class="nx">val</span><span class="p">,</span> <span class="nx">validator</span><span class="p">.</span><span class="nx">args</span><span class="p">)</span> <span class="c1">// 执行验证器</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 如验证失败，则存储失败信息</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">message</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nx">required</span> <span class="o">&amp;&amp;</span> <span class="nx">val</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="c1">// 可跳过检验</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 有错误信息</span>
</span><span class='line'>      <span class="nx">validatorCfg</span><span class="p">.</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">validatorCfg</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">$target</span><span class="p">)</span> <span class="c1">// 失败回调</span>
</span><span class='line'>      <span class="nx">$message</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span> <span class="c1">// 验证通过</span>
</span><span class='line'>      <span class="nx">validatorCfg</span><span class="p">.</span><span class="nx">success</span> <span class="o">&amp;&amp;</span> <span class="nx">validatorCfg</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="nx">$target</span><span class="p">)</span> <span class="c1">// 成功回调</span>
</span><span class='line'>      <span class="nx">$message</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">success</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 单个验证 需传入要验证 input 的 id</span>
</span><span class='line'><span class="nx">run</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 得到当前要验证的表单的配置</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">curConfig</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_targetConfig</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span> <span class="nx">config</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="err">`#</span><span class="nx">$</span><span class="p">{</span><span class="nx">target</span><span class="p">}</span><span class="err">`</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_check</span><span class="p">(</span><span class="nx">curConfig</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 执行全局验证</span>
</span><span class='line'><span class="nx">runAll</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_targetConfig</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_check</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 重置表单</span>
</span><span class='line'><span class="nx">reset</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_targetConfig</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span>
</span><span class='line'>      <span class="nx">$target</span>  <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">target</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">$message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$target</span><span class="p">.</span><span class="nx">value</span>        <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="nx">$message</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">placeholder</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_validatorConfig</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_allTarget</span> <span class="p">)</span> <span class="c1">// 重置回调</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自此我们的验证插件就写完了，可自行在 validators 中编写更多的验证规则</p>

<h1>继续优化</h1>

<ul>
<li>提交表单时应需得到所有表单的验证状态，全通过则提交。</li>
<li>目前失败信息提示过于单一。</li>
<li>如表单验证中需与后台通信(如验证用户名是否注册),那么验证器应该支持异步的验证规则。</li>
<li>目前会执行所有验证规则，可选择在验证规则失败时，就不再往下继续验证了，以提高性能。</li>
</ul>

]]></content>
  </entry>
  
</feed>
