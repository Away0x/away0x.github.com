<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Away0x's Blog]]></title>
  <link href="http://away0x.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://away0x.github.io/"/>
  <updated>2021-12-29T10:42:09+08:00</updated>
  <id>http://away0x.github.io/</id>
  <author>
    <name><![CDATA[TongWu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - Function]]></title>
    <link href="http://away0x.github.io/blog/2018/10/07/ruby-function/"/>
    <updated>2018-10-07T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/07/ruby-function</id>
    <content type="html"><![CDATA[<!-- more -->


<p>方法是由对象定义的与该对象相关的操作。在 ruby 中，对象的所有操作都被封装成方法</p>

<ul>
<li><a href="#call">调用</a></li>
<li><a href="#category">分类</a></li>
<li><a href="#define">定义</a></li>
<li><a href="#sr">send &amp; respond_to?</a></li>
</ul>


<h1><h2 id="call">调用</h2></h1>

<ul>
<li>ruby 中，调用方法被称为 &ldquo;向对象发送消息 (message)"，调用结果就是 "对象接收 (receive) 了消息&rdquo;</li>
<li>调用方法时，<code>()</code> 是可以省略的</li>
</ul>


<pre><code class="ruby"># 1. 简单的方法调用
对象.方法名(参数1, 参数2, ...)

# 2. 带块的方法调用 (do ~ end 可替换为 { ~ })
#    - do ~ end 时，可以省略参数列表的 ()；{ ~ } 时，只在无参时才可省略
对象.方法名(参数1, 参数2, ...) do |变量1, 变量2, ...|
    块内容 
end

# 3. 运算符形式的方法调用
#    - ruby 中有些方法看起来很像运算符，四则运算等二元运算符，负号等一元运算符
#    - 指定数组、散列的元素下标的 [] 等，实际上都是方法
obj + arg1
obj =~ arg1
-obj
!obj
obj[arg1]
obj[arg1] = arg2
</code></pre>

<h1><h2 id="category">分类</h2></h1>

<ul>
<li>帮助文档中方法的标记

<ol>
<li>实例方法: <code>Array#each</code></li>
<li>类方法: <code>Array.new</code> 或 <code>Array::new</code></li>
</ol>
</li>
</ul>


<pre><code class="ruby"># 1. 实例方法
"abc".split(",")

# 2. 类方法
Array.new

# 3. 函数式方法 (没有接收者的)
print "hello"
sleep(10)
</code></pre>

<h1><h2 id="define">定义</h2></h1>

<pre><code class="ruby">def 方法名(参数1, 参数2, ...)
    code ...
end
</code></pre>

<pre><code class="ruby"># 1. 参数默认值 (需放参数列表末尾)
def func(a, b=1, c=2)
    # code ...
end
</code></pre>

<pre><code class="ruby"># 2. 返回值 (可以省略 return，方法体内部最后一个表达式的结果即为返回值)
# 无指定返回值的函数默认返回 nil
def func()
    return 123
end

def func2()
    123
end

def max(a, b)
    if a &gt; b
        a
    else
        b
    end
end

p max(10, 5) # 10
</code></pre>

<pre><code class="ruby"># 3. 定义带块的方法
def myloop
    while true
        yield  # 定义块
    end
end

num = 1

# 调用方法时通过块传进来的处理会在 yield 定义的地方执行
# yield 可携带参数
myloop do
    puts "num is #{num}"
    break if num &gt; 10
    num *= 2
end
</code></pre>

<pre><code class="ruby"># 4. 参数个数不确定的方法
def foo(arg, *args)
    [arg, args]
end

p foo(1)        # [1, []]
p foo(1, 2, 3)  # [1, [2, 3]]

def foo2(a, *b, c)
    [a, b, c]
end

p foo2(1, 2, 3, 4, 5)  # [1, [2, 3, 4], 5]
p foo2(1, 2)           # [1, [], 2]
</code></pre>

<pre><code class="ruby"># 5. 关键字参数 (可指定默认值)
def 方法名(参数1: 参数1的值, 参数2: 参数2的值, ...)
    code ...
end

def area(x: 0, y: 0, z: 0)
    xy = x * y
    yz = y * z
    zx = z * x
    (xy + yz + zx) * 2
end

p area(x: 2, y: 3, z: 4) # 52
p area(z: 4, y: 3, x: 2) # 52 (参数顺序可变)
p area(x: 2, z: 3)       # 12 (省略 y)

# 不需指定默认值时
def volume(x:, y: 2, z: 4)
    x * y * z
end

p volume(x: 2, y: 3) # 24
p volume(y: 3, z: 4) # ArgumentError
volume(foo: 0)       # unknow keyword

# 搜集关键字参数
def meth(x: 0, y: 0, z: 0, **args)
    [x, y, z, args]
end

p meth(z: 4, y: 3, x: 2)       # [2, 3, 4, {}]
p meth(x: 2, z: 3, v: 4, w: 5) # [2, 0, 3, {:v=&gt;4, :2=&gt;5}]

# 关键字参数与普通参数搭配使用
def func(a, b: 1, c: 2)
    code ...
end
func(1, b: 2, c: 3)

# 用散列传递参数
def area(x: 0, y: 0, z: 0)
    code ...
end

args1 = {x: 2, y: 3, z: 4}
p area(args1)
</code></pre>

<pre><code class="ruby"># 6. 把数组分解成参数
def foo(a, b, c)
    a + b + c
end

p foo(1, 2, 3)    # 6

args1 = [2, 3]
p foo(1, *args1)  # 6

args2 = [1, 2, 3]
p foo(*args2)     # 6
</code></pre>

<pre><code class="ruby"># 7. 把散列作为参数传递
#    - 散列作为参数传递给方法时，可省略 {}
def foo(arg)
    arg
end

p foo({"a"=&gt;1, "b"=&gt;2}) # {"a"=&gt;1, "b"=&gt;2}
p foo("a"=&gt;1, "b"=&gt;2)   # {"a"=&gt;1, "b"=&gt;2}
p foo(a: 1, b: 2)       # {:a=&gt;1, :b=&gt;2}

#    - 当作为最后一个参数传递时，也可使用这样的写法
def bar(arg1, arg2)
    [arg1, arg2]
end

p bar(100, {"a"=&gt;1, "b"=&gt;2})  # [100, {"a"=&gt;1, "b"=&gt;2}]
p bar(100, "a"=&gt;1, "b"=&gt;2)    # [100, {"a"=&gt;1, "b"=&gt;2}]
p bar(100, a: 1, b: 2)        # [100, {:a=&gt;1, :b=&gt;2}]
</code></pre>

<h1><h2 id="sr">send &amp; respond_to?</h2></h1>

<p>ruby 中所有实例都有该方法，可用于检测当前实例有无该方法</p>

<pre><code class="ruby">a = "hello world"

puts a.respond_to?(:length)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Control Flow]]></title>
    <link href="http://away0x.github.io/blog/2018/10/06/ruby-control/"/>
    <updated>2018-10-06T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/06/ruby-control</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#if">if</a></li>
<li><a href="#unless">unless</a></li>
<li><a href="#case">case</a></li>
<li><a href="#times">times</a></li>
<li><a href="#for">for</a></li>
<li><a href="#while">while</a></li>
<li><a href="#until">until</a></li>
<li><a href="#each">each</a></li>
<li><a href="#loop">loop</a></li>
<li><a href="#break">break</a></li>
<li><a href="#next">next</a></li>
<li><a href="#redo">redo</a></li>
</ul>


<h1><h2 id="if">if</h2></h1>

<pre><code class="ruby"># 可以省略 then

if expr then
    code ...
elsif expr2 then
    code ...
else expr2
    code ...
end

# if 表达式 (ruby 的 if 有返回值)
puts "a &gt; b" if a &gt; b
</code></pre>

<h1><h2 id="unless">unless</h2></h1>

<pre><code class="ruby"># unless 和 if 相反，条件为假时执行

unless expr
    条件1
else
    条件2

# 与上等价
if expr
    条件2
else 
    条件1

# unless 也有返回值，因此也可写成表达式形式
a = 2 unless defined?(b)
</code></pre>

<h1><h2 id="case">case</h2></h1>

<ul>
<li>case 语句在判断与 when 指定的值是否相等时，实际上是用 <code>===</code> 来判断的

<ul>
<li><code>===</code> 作用详见运算符笔记</li>
</ul>
</li>
</ul>


<pre><code class="ruby"># 可以省略 then

case 比较对象
when 值1 then
    code...
when 值2 then
    code...
else
    code...
end
</code></pre>

<ul>
<li>由于 case 内部是 <code>===</code> 所以不止可比较简单类型</li>
</ul>


<pre><code class="ruby">case a
when 1
    1
when /hello/
    "hello world"
when Array
    []
else
    'ok'
end
</code></pre>

<h1><h2 id="times">times</h2></h1>

<pre><code class="ruby"># do ~ end
7.times do
    puts "lalala"
end

# { ~ }
7.times {
    puts "lalala"
}

# 获取 index
7.times do |i|
    puts "第 #{i} 次的循环"
end
</code></pre>

<h1><h2 id="for">for</h2></h1>

<pre><code class="ruby"># do 可省略

for i in 1..5 do
    puts i
end

names = ["A", "B", "C"]
for name in names
    puts name
end
</code></pre>

<h1><h2 id="while">while&lt;/h2</h1>

<pre><code class="ruby"># do 可省略

i = 1
while i &lt; 3 do
    puts i
    i += 1
end
</code></pre>

<h1><h2 id="until">until</h2></h1>

<ul>
<li>until 是不满足条件才执行循环处理，满足则退出，和 while 相反</li>
</ul>


<pre><code class="ruby"># do 可省略

sum = 0
i = 1
until sum &gt;= 50
    sum += i
    i += 1
end
</code></pre>

<h1><h2 id="each">each</h2></h1>

<ul>
<li>可将对象集合中的对象逐个取出，类似 for&hellip;in</li>
<li>ruby 内部 for 实际是用 each 实现的</li>
</ul>


<pre><code class="ruby"># do ~ end 可换成 { ~ }

names = ["A", "B", "C"]
names.each do |name|
    puts name
end
</code></pre>

<h1><h2 id="loop">loop</h2></h1>

<ul>
<li>没用终止的循环，不断执行</li>
</ul>


<pre><code class="ruby">loop do
    print "lalala"
end
</code></pre>

<h1><h2 id="break">break</h2></h1>

<p>终止程序，跳出循环</p>

<h1><h2 id="next">next</h2></h1>

<p>跳到下一次循环</p>

<h1><h2 id="redo">redo</h2></h1>

<p>在相同的条件下重复刚才的处理</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Variable, Operator]]></title>
    <link href="http://away0x.github.io/blog/2018/10/05/ruby-variable-operator/"/>
    <updated>2018-10-05T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/05/ruby-variable-operator</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#variable">Variable</a></li>
<li><a href="#operator">Operator</a></li>
</ul>


<h1><h2 id="variable">Variable</h2></h1>

<p>Ruby 中有六种类型的变量</p>

<ol>
<li><strong>局部变量</strong> (local variable)

<ul>
<li>以英文小写字母或 <code>_</code> 开头</li>
</ul>
</li>
<li><strong>全局变量</strong> (global variable)

<ul>
<li>以 <code>$</code> 开头</li>
<li>作用域在整个程序中，即使运用在不同文件里</li>
</ul>
</li>
<li><strong>实例变量</strong> (instance variable)

<ul>
<li>以 <code>@</code> 开头</li>
</ul>
</li>
<li><strong>类变量</strong> (class variable)

<ul>
<li>以 <code>@@</code> 开头</li>
</ul>
</li>
<li><strong>伪变量</strong> (pseudo variable)

<ul>
<li>伪变量是 ruby 预先定义好的代表某特定值的特殊变量，因此即使在程序中给伪变量赋值，它的值也不会改变</li>
<li><code>nil、true、false、self</code> 等都是伪变量</li>
<li>它们表面上虽然看着像变量，但实际行为又与变量有差别，因此称为伪变量</li>
</ul>
</li>
<li><strong>预定义变量</strong></li>
</ol>


<pre><code class="ruby">a = "hello"
a.object_id # 70235952968400
# 内容变了，内存地址不变
a.replace("hello2")
a.object_id # 70238952968400

# 重新赋值，重新开辟内存
a = "hello"
a.object_id # 70238952968400
</code></pre>

<p>全局变量</p>

<pre><code class="ruby"># a.rb

$x = 0  # 定义了一个全局变量
x = 0   # 定义了属于自身的局部变量

require_relative "b"

p $x  # 全局变量 $x 在 b.rb 中被修改了
p x   # 0，a.rb 的 x 和 b.rb 的 x 不是同一个，所以不会被修改
</code></pre>

<pre><code class="ruby"># b.rb

$x = 1  # 修改了全局变量
x = 1   # 定义了属于自身的局部变量
</code></pre>

<h2>常量</h2>

<ul>
<li>常量以大写英文字母开头</li>
<li>ruby 的运行版本 (RUBY_VERSION)、运行平台 (RUBY_PLATFORM)、命令行参数数组 (ARGV) 等，都是 ruby 预定义好的常量</li>
<li>已赋值的常量重赋值会报警告</li>
</ul>


<pre><code class="ruby">TEST = 1
TEST = 2  # 报警告
</code></pre>

<h1><h2 id="operator">Operator</h2></h1>

<h2>算数运算符</h2>

<pre><code class="ruby">+ - * / % **

# ** 是指数运算
</code></pre>

<h2>赋值运算符</h2>

<pre><code class="ruby">=
+= -= *= /= %= **=
&amp;&amp;= ||= ^= &amp;= |= &lt;&lt;= &gt;&gt;=

# ruby 无 ++ --
</code></pre>

<pre><code class="ruby"># 并行赋值
a, b, c = 10, 20, 30

# 交换变量值
a, b = b, c

# 获取数组的值
ary = [1, 2]
a, b = ary
p a # 1
p b # 2

c, = ary
p c # 1
</code></pre>

<h2>逻辑运算符</h2>

<ul>
<li>表达式执行顺序从左到右</li>
<li>如逻辑表达式的真假已经可以确定，则不会再判断剩余的表达式 (短路)</li>
<li>最后一个表达式的值为整体逻辑表达式的值</li>
</ul>


<pre><code class="ruby">|| or
&amp;&amp; and
! not
</code></pre>

<pre><code class="ruby"># 变量默认值

item = item || 1  # 在 item 为 false 或 nil 时，才赋值 1

item ||= 1  # 效果同上
</code></pre>

<pre><code class="ruby"># 安全运算符 (ruby2.3.0+ 支持)

item = ary &amp;&amp; ary.first  # ary 安全才使用 ary.first

item = ary&amp;.first  # 效果同上 (ary 为 nil 时，表达式返回 nil)
</code></pre>

<h2>比较运算符</h2>

<pre><code class="ruby">== != &gt; &lt; &gt;= &lt;=
</code></pre>

<pre><code class="ruby">&lt;=&gt;
=begin
联合比较运算符 &lt;=&gt;

如果第一个操作数等于第二个操作数则返回 0
如果第一个操作数大于第二个操作数则返回 1
如果第一个操作数小于第二个操作数则返回 -1
=end
</code></pre>

<pre><code class="ruby"># 如果接收器和参数具有相同的类型和相等的值，则返回 true

.eql?

# 1 == 1.0 返回 true，但是 1.eql?(1.0) 返回 false
</code></pre>

<pre><code class="ruby"># 如果接收器和参数具有相同的对象 id，则返回 true

equal?

=begin
如果 aObj 是 bObj 的副本，那么 aObj == bObj 返回 true
a.equal?bObj 返回 false
但是 a.equal?aObj 返回 true
=end
</code></pre>

<pre><code class="ruby">===

# 1. 用于测试 case 语句的 when 子句内的相等
# 2. **左侧**是数值或字符串时，=== 与 == 的意义是一样的
# 3. === 还可和 =~ 一样来判断正则是否匹配
#    - p (/zz/ === "xyzzy")  # true
# 4. 或者判断右边的对象是否属于左边的类
#    - p ((1..3) === 2)  # true
</code></pre>

<h2>条件运算符</h2>

<pre><code class="ruby">max = (a &gt; b) ? a : b
</code></pre>

<h2>范围运算符</h2>

<ul>
<li>用于表示数值范围，返回一个 Range 对象</li>
<li><code>X..Y</code> (范围是 X 到 Y)</li>
<li><code>X...Y</code> (范围是 X 到 Y 的前一个元素)</li>
<li>对 Range 对象使用 to_a 方法，会返回范围中从开始到结束的值</li>
</ul>


<pre><code class="ruby"># 生成 1~10 的范围对象
Range.new(1, 10)

# 简化定义
1..10
</code></pre>

<pre><code class="ruby">p (5..10).to_a  # [5, 6, 7, 8, 9, 10]
p (5...10).to_a # [5, 6, 7, 8, 9]

p ("a".."f").to_a  # ["a", "b", "c", "d", "e", "f"]
p ("a"..."f").to_a  # ["a", "b", "c", "d", "e"]
</code></pre>

<pre><code class="ruby"># 在 Range 对象内部，可以调用 succ 方法根据
</code></pre>

<h2>位运算</h2>

<pre><code class="ruby">&amp; | ^ ~ &lt;&lt; &gt;&gt;
</code></pre>

<h2>defined? 运算符</h2>

<ul>
<li><code>defined?</code> 是一个特殊的运算符，以方法调用的形式来判断传递的表达式是否已定义</li>
<li>它返回表达式的描述字符串，如果表达式未定义则返回 nil</li>
</ul>


<h2>点运算符与双冒号运算符</h2>

<ul>
<li>可通过在方法名称前加上类或模块名称和 <code>.</code> 来调用类或模块中的方法</li>
<li>可以使用类或模块名称和两个冒号 <code>::</code> 来引用类或模块中的常量

<ul>
<li>如果 <code>::</code> 前的表达式为类或模块名称，则返回该类或模块内对应的常量值</li>
<li>如果 <code>::</code> 前未没有前缀表达式，则返回主 Object 类中对应的常量值</li>
</ul>
</li>
</ul>


<h2>运算符重载</h2>

<p>不能重载的运算符: <code>:: &amp;&amp; || .. ... ?: not = and or</code></p>

<h3>重载二元运算符</h3>

<pre><code class="ruby">class Point                     
    attr_accessor :x, :y

    def initialize(x=0, y=0)
        @x, @y = x, y
    end 

    def inspect  # 用 p 方法显示 (x, y)
        "(#{x}, #{y})"
    end 

    def +(other)  # x, y 分别进行加法运算
        self.class.new(x + other.x, y + other.y)
    end 

    def -(other)  # x, y 分别进行减法运算
        self.class.new(x - other.x, y - other.y)
    end 
end

point0 = Point.new(3, 6)
point1 = Point.new(1, 8)

p point0          # (3, 6)
p point1          # (1, 8)
p point0 + point1 # (4, 14)
p point0 - point1 # (2, -2)
</code></pre>

<h3>重载一元运算符</h3>

<ul>
<li>一元运算符: <code>+ - ~ !</code></li>
<li>对应的方法名为: <code>+@ -@ ~@ !@</code></li>
<li>一元运算符都是没有参数的</li>
</ul>


<pre><code class="ruby">class Point                     
    attr_accessor :x, :y
    def initialize(x=0, y=0)
        @x, @y = x, y
    end 
    def inspect  # 用 p 方法显示 (x, y)
        "(#{x}, #{y})"
    end 

    def +@  # 返回自己的副本
        dup
    end

    def -@  # 颠倒 x, y 的正负
        self.class.new(-x, -y)
    end

    def ~@  # 使坐标翻转 90 度
        self.class.new(-y, x)
    end
end

point = Point.new(3, 6)

p +point  # (3, 6)
p -point  # (-3, -6)
p ~point  # (-6, 3)
</code></pre>

<h3>重载下标方法</h3>

<ul>
<li>数组散列中 <code>obj[i]</code> 和 <code>obj[i] = x</code> 这样的方法，称为下标方法</li>
<li>对应的方法名为 <code>[]</code> 和 <code>[]=</code></li>
</ul>


<pre><code class="ruby">class Point                     
    attr_accessor :x, :y
    def initialize(x=0, y=0)
        @x, @y = x, y
    end 
    def inspect  # 用 p 方法显示 (x, y)
        "(#{x}, #{y})"
    end 

    def [](index)
        case index
        when 0
            x
        when 1
            y
        else
            raise ArgumentError, "out of range #{index}"
        end
    end

    def []=(index, val)
        case index
        when 0
            self.x = val
        wthen 1
            self.y = val
        else
            raise ArgumentError, "out of range #{index}"
        end
    end
end

point = Point.new(3, 6)

p point[0]      # 3
p point[1] = 2  # 2
p point[1]      # 2
p point[2]      # 错误 ArgumentError
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Install, Basic]]></title>
    <link href="http://away0x.github.io/blog/2018/10/04/ruby-install-basic/"/>
    <updated>2018-10-04T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2018/10/04/ruby-install-basic</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#rubygem">RubyGem</a></li>
<li><a href="#rvm">RVM</a></li>
<li><a href="#rbenv">RBENV</a></li>
<li><a href="#cl">命令行选项</a></li>
<li><a href="#const">预定义变量常量</a></li>
<li><a href="#basic">基础</a></li>
</ul>


<h1><h2 id="rubygem">RubyGem</h2></h1>

<p>RubyGems 是一个统一安装和管理 Ruby 的库、程序的 Ruby 标准工具</p>

<p>在 RubyGems 中， 每个单独的库称为 GEM。通过 RubyGems，我们可以搜索 GEM、显示 GEM 相关的信息、安装 或卸载 GEM、升级旧版本的 GEM，以及查看 GEM 的安装进度一览表，等等</p>

<pre><code class="bash"># 显示 GEM 的安装进度一览表
gem list

# 用于搜索 GEM 文件，没有指定选项时，会搜索远程仓库的 GEM 文件
gem search nokogiri
gem search -l nokogiri # 搜索本地已安装的 GEM

# 安装
gem install nokogiri
# 安装本地的 GEM 文件时，不是指定 GEM 名，而是指定 GEM 文件名
gem install nokogiri-1.6.6.2.GEM

# 把 GEM 更新为最新版本
gem update nokogiri

# 更新 RubyGems 自身
gem update --system

# 查看某个 gem 的源码
bundle show gem_name # 然后根据 path 打开源码
</code></pre>

<table>
<thead>
<tr>
<th>选项 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>build </td>
<td> 根据 gemspec 创建 GEM</td>
</tr>
<tr>
<td>cert </td>
<td> 管理、签署 RubyGems 的许可证时使用</td>
</tr>
<tr>
<td>check </td>
<td> 检查 GEM</td>
</tr>
<tr>
<td>cleanup </td>
<td> 整理已安装的旧版本的 GEM</td>
</tr>
<tr>
<td>contents </td>
<td> 显示已安装的 GEM 的内容</td>
</tr>
<tr>
<td>dependency </td>
<td> 显示已安装的 GEM 的依赖关系</td>
</tr>
<tr>
<td>environment </td>
<td> 显示 RubyGems、Ruby 等相关的环境信息</td>
</tr>
<tr>
<td>fetch </td>
<td> 把 GEM 文件下载到本地目录，但不安装</td>
</tr>
<tr>
<td>generate_index </td>
<td> 创建 GEM 服务器所需的索引文件</td>
</tr>
<tr>
<td>help </td>
<td> 显示 GEM 命令的帮助说明</td>
</tr>
<tr>
<td>install </td>
<td> 安装 GEM 至本地仓库</td>
</tr>
<tr>
<td>list </td>
<td> 显示 GEM 的一览表</td>
</tr>
<tr>
<td>lock </td>
<td> 锁定 GEM 版本，并输出锁定后的 GEM 列表</td>
</tr>
<tr>
<td>mirror </td>
<td> 创建 GEM 仓库的镜像</td>
</tr>
<tr>
<td>open </td>
<td> 用编辑器编辑已安装的 GEM</td>
</tr>
<tr>
<td>outdated </td>
<td> 显示所有需要更新的 GEM 列表</td>
</tr>
<tr>
<td>owner </td>
<td> 管理 GEM 所有者的资料</td>
</tr>
<tr>
<td>pristine </td>
<td> 从 GEM 缓存中获取已安装的 GEM，并将其恢复为初始状态</td>
</tr>
<tr>
<td>push </td>
<td> 向服务器上传 GEM</td>
</tr>
<tr>
<td>query </td>
<td> 搜索本地或者远程仓库的 GEM 信息</td>
</tr>
<tr>
<td>rdoc </td>
<td> 生成已安装的 GEM 的 RDoc 文件</td>
</tr>
<tr>
<td>regenerate_binstubs </td>
<td> 变更用 GEM 安装的命令的 shebang</td>
</tr>
<tr>
<td>search </td>
<td> 显示名字包含指定字符串的 GEM</td>
</tr>
<tr>
<td>server </td>
<td> 启动 HTTP 服务器，用于管理 GEM 的文档及仓库</td>
</tr>
<tr>
<td>sources </td>
<td> 管理搜索 GEM 时所需的 RubyGems 的源以及缓存</td>
</tr>
<tr>
<td>specification </td>
<td> 以 yaml 形式显示 GEM 的详细信息</td>
</tr>
<tr>
<td>stale </td>
<td> 按最后访问的时间顺序显示 GEM 的一览表</td>
</tr>
<tr>
<td>uninstall </td>
<td> 从本地卸载 GEM</td>
</tr>
<tr>
<td>unpack </td>
<td> 在本地目录解压已安装的 GEM</td>
</tr>
<tr>
<td>update </td>
<td> 更新指定的 GEM(或者全部 GEM)</td>
</tr>
<tr>
<td>which </td>
<td> 显示读取 GEM 时引用的类库</td>
</tr>
<tr>
<td>wrappers </td>
<td> regenerate_binstubs 的别名</td>
</tr>
<tr>
<td>yank </td>
<td> 撤回已上传到服务器的 GEM 文件</td>
</tr>
</tbody>
</table>


<h1><h2 id="rvm">RVM</h2></h1>

<ul>
<li>RVM 是一个命令行工具,可以提供一个便捷的多版本 Ruby 环境的管理和切换</li>
<li><a href="http://rvm.io/">安装方法</a></li>
<li><a href="https://ruby-china.org/wiki/rvm-guide">参考</a></li>
</ul>


<pre><code class="bash">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
\curl -sSL https://get.rvm.io | bash -s stable
:'
# 下载命令错误可试试
curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable
'
source ~/.bashrc
source ~/.bash_profile

# 修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器
echo "ruby_url=https://cache.ruby-china.org/pub/ruby" &gt; ~/.rvm/user/db
</code></pre>

<pre><code class="bash"># 列出已知的 Ruby 版本
rvm list known

# 安装一个 Ruby 版本
rvm install 2.2.0 --disable-binary

# 切换 Ruby 版本
rvm use 2.2.0

# 如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本
rvm use 2.2.0 --default 

# 查询已经安装的ruby
rvm list

# 卸载一个已安装版本
rvm remove 1.8.7
</code></pre>

<h2>gemset</h2>

<p>gemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的</p>

<pre><code class="bash"># 建立 gemset
rvm use 1.8.7
rvm gemset create rails23

# use 可以用来切换语言或者 gemset (前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。)
rvm use 1.8.7
rvm use 1.8.7@rails23

# 列出当前 Ruby 的 gemset
rvm gemset list

# 清空 gemset 中的 Gem
rvm gemset empty 1.8.7@rails23

# 删除一个 gemset
rvm gemset delete rails2-3

# 项目自动加载 gemset
:'
# 项目目录，建立一个 .rvmrc 文件，内容如下
rvm use 1.9.3@rails313

这样，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.
'
</code></pre>

<h1><h2 id="rbenv">RBENV</h2></h1>

<ul>
<li>类似 RVM，二者选其一即可</li>
<li><a href="https://ruby-china.org/wiki/rbenv-guide">参考</a></li>
</ul>


<pre><code class="bash">git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
# 用来编译安装 ruby
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
# 用来管理 gemset, 可选, 因为有 bundler 也没什么必要
git clone git://github.com/jamis/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset
# 通过 gem 命令安装完 gem 后无需手动输入 rbenv rehash 命令, 推荐
git clone git://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
# 通过 rbenv update 命令来更新 rbenv 以及所有插件, 推荐
git clone git://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update
# 使用 Ruby China 的镜像安装 Ruby, 国内用户推荐
git clone git://github.com/AndorChen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror
</code></pre>

<pre><code class="bash">echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>

<pre><code class="bash"># 安装 ruby
rbenv install --list         # 列出所有 ruby 版本
rbenv install 2.4.0          # 安装 2.4.0
rbenv install jruby-1.7.3    # 安装 jruby-1.7.3

# 列出版本
rbenv versions               # 列出安装的版本
rbenv version                # 列出正在使用的版本

# 设置版本
rbenv global 1.9.3-p392      # 默认使用 1.9.3-p392
rbenv shell 1.9.3-p392       # 当前的 shell 使用 1.9.3-p392, 会设置一个 `RBENV_VERSION` 环境变量
rbenv local jruby-1.7.3      # 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件

# 其他
rbenv rehash                 # 每当切换 ruby 版本和执行 bundle install 之后必须执行这个命令
rbenv which irb              # 列出 irb 这个命令的完整路径
rbenv whence irb             # 列出包含 irb 这个命令的版本
</code></pre>

<h2>gemset</h2>

<pre><code class="bash"># 创建
# 参数 1 是已安装的 ruby 版本，参数 2 是 gemset 的名字
rbenv gemset create 1.9.3-p392 ruby-china 

# 查看当前 gemset
rbenv gemset active

## 删除
rbenv gemset delete 1.9.3-p392 ruby-china 

# 使用
rbenv gemset init ruby-china

# 列出所有 gemset
rbenv gemset list
</code></pre>

<h1><h2 id="cl">命令行选项</h2></h1>

<pre><code class="ruby">ruby -v
</code></pre>

<table>
<thead>
<tr>
<th>选项 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-0octal </td>
<td> 用八进制指定 IO.gets 等识别的换行符</td>
</tr>
<tr>
<td>-a </td>
<td> 指定为自动分割模式 ( 与 -n 或者 -p 选项一起使用时则将 $F 设为 $_.split($;))</td>
</tr>
<tr>
<td>-c </td>
<td> 只检查脚本的语法</td>
</tr>
<tr>
<td>-Cdirectory </td>
<td> 在脚本执行前，先移动到 directory 目录下</td>
</tr>
<tr>
<td>-d、&ndash;debug </td>
<td> 使用 debug 模式(将 $DEBUG 设为 true)</td>
</tr>
<tr>
<td>-e &lsquo;command&rsquo; </td>
<td> 通过 command 指定一行代码的程序。本选项可指定多个</td>
</tr>
<tr>
<td>-Eex[:in]、&ndash;encoding=ex[:in] </td>
<td> 指定默认的外部编码(ex)以及默认的内部编码(in)</td>
</tr>
<tr>
<td>-Fpattern </td>
<td> 指定 String#split 方法使用的默认分隔符($;)</td>
</tr>
<tr>
<td>-i[extension] </td>
<td> 以替换形式编辑 ARGV 文件(指定 extension 时则会生成备份文件)</td>
</tr>
<tr>
<td>-Idirectory </td>
<td> 指定追加到 $LOAD_PATH 的目录。本选项可指定多个</td>
</tr>
<tr>
<td>-l </td>
<td> 删除 -n 或者 -p 选项中的 $_ 的换行符</td>
</tr>
<tr>
<td>-n </td>
<td> 使脚本整体被'while gets();&hellip; end'包围(将gets()的结果设定到$_中)</td>
</tr>
<tr>
<td>-p </td>
<td> 在 -n 选项的基础上，在每次循环结束时输出 $_</td>
</tr>
<tr>
<td>-rlibrary </td>
<td> 在执行脚本前通过 require 引用 library</td>
</tr>
<tr>
<td>-s </td>
<td> 要使脚本解析标志(flag)的功能有效(&lsquo;ruby -s script -abc'，则 $abc 为 true)</td>
</tr>
<tr>
<td>-S </td>
<td> 从环境变量 PATH 开始搜索可执行的脚本</td>
</tr>
<tr>
<td>-Tlevel </td>
<td> 指定不纯度检查模式</td>
</tr>
<tr>
<td>-U </td>
<td> 将内部编码的默认值(Encoding.default_internal)设为 UTF-8</td>
</tr>
<tr>
<td>-v、&ndash;verbose </td>
<td> 显示版本号，冗长模式设定为有效($VERBOSE 设定为 true)</td>
</tr>
<tr>
<td>-w </td>
<td> 冗长模式设定为有效</td>
</tr>
<tr>
<td>-Wlevel </td>
<td> 指定冗长模式的级别 [0= 不输出警告，1= 只输出重要警告，2= 输出全部警告 (默认值)]</td>
</tr>
<tr>
<td>-xdirectory </td>
<td> 忽略执行脚本中 #!ruby 之前的内容</td>
</tr>
<tr>
<td>&ndash;copyright </td>
<td> 显示版权信息</td>
</tr>
<tr>
<td>&ndash;enable=feature[, &hellip;] </td>
<td> 使 feature 有效</td>
</tr>
<tr>
<td>&ndash;disable=feature[, &hellip;] </td>
<td> 使 feature 无效</td>
</tr>
<tr>
<td>&ndash;external-encoding=encoding </td>
<td> 指定默认的外部编码</td>
</tr>
<tr>
<td>&ndash;internal-encoding=encoding </td>
<td> 指定默认的内部编码</td>
</tr>
<tr>
<td>&ndash;version </td>
<td> 显示版本信息</td>
</tr>
<tr>
<td>&ndash;help </td>
<td> 显示帮助信息</td>
</tr>
</tbody>
</table>


<blockquote><p>上表 &ndash;enable、&ndash;disable 选项可指定的功能名</p></blockquote>

<table>
<thead>
<tr>
<th>功能名 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>gems </td>
<td> RubyGems 是否有效(默认有效)</td>
</tr>
<tr>
<td>rubyopt </td>
<td> 是否引用环境变量 RUBYOPT(默认引用)</td>
</tr>
<tr>
<td>did_you_mean </td>
<td> 是否打开拼写检查功能(默认打开)</td>
</tr>
<tr>
<td>frozen-string-literal </td>
<td> 是否 freeze 所有字符串字面量(默认否)</td>
</tr>
<tr>
<td>all </td>
<td> 上述功能是否全部有效</td>
</tr>
</tbody>
</table>


<h1><h2 id="const">预定义变量常量</h2></h1>

<h2>预定义变量</h2>

<ul>
<li>预定义变量是指 Ruby 预先定义好的变量，全部都是以 $ 开头的变量，因此可以像全局变 量那样引用</li>
</ul>


<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>$! </td>
<td> 最后发生的异常的相关信息</td>
</tr>
<tr>
<td>$&ldquo; </td>
<td> $LOADED_FEATURES 的别名</td>
</tr>
<tr>
<td>$$ </td>
<td> 当前执行中的 Ruby 的进程 ID</td>
</tr>
<tr>
<td>$&amp; </td>
<td> 最后一次模式匹配后得到的字符串</td>
</tr>
<tr>
<td>$&lsquo; </td>
<td> 最后一次模式匹配中匹配部分之后的字符串</td>
</tr>
<tr>
<td>$* </td>
<td> ARGV 的别名</td>
</tr>
<tr>
<td>$+ </td>
<td> 最后一次模式匹配中最后一个 () 对应的字符串</td>
</tr>
<tr>
<td>$, </td>
<td> Array#join 的默认分割字符串(默认为 nil)</td>
</tr>
<tr>
<td>$. </td>
<td> 最后读取的文件的行号</td>
</tr>
<tr>
<td>$/ </td>
<td> 输入数据的分隔符(默认为 &ldquo;\n&rdquo;)</td>
</tr>
<tr>
<td>$0 </td>
<td> $PROGRAM_NAME 的别名</td>
</tr>
<tr>
<td>$1、$2&hellip;&hellip; </td>
<td> 最后一次模式匹配中与 () 匹配的字符串(第 n 个 () 对应 $n)</td>
</tr>
<tr>
<td>$: </td>
<td> $LOAD_PATH 的别名</td>
</tr>
<tr>
<td>$; </td>
<td> String#split 的默认分割字符串(默认为 nil)</td>
</tr>
<tr>
<td>$&lt; </td>
<td> ARGF 的别名</td>
</tr>
<tr>
<td>$> </td>
<td> print、puts、p 等的默认输出位置(默认为 STDOUT)</td>
</tr>
<tr>
<td>$? </td>
<td> 最后执行完毕的子进程的状态</td>
</tr>
<tr>
<td>$@ </td>
<td> 最后发生的异常的相关位置信息</td>
</tr>
<tr>
<td>$\ </td>
<td> 输出数据的分隔符(默认为 nil)</td>
</tr>
<tr>
<td>$_ </td>
<td> gets 方法最后读取的字符串</td>
</tr>
<tr>
<td>$` </td>
<td> 最后一次模式匹配中匹配部分之前的字符串</td>
</tr>
<tr>
<td>$~ </td>
<td> 最后一次模式匹配相关的信息</td>
</tr>
<tr>
<td>$DEBUG </td>
<td> 指定 debug 模式的标识(默认为 nil)</td>
</tr>
<tr>
<td>$FILENAME </td>
<td> ARGF 当前在读取的文件名</td>
</tr>
<tr>
<td>$LOADED_FEATURES </td>
<td> require 读取的类库名一览表</td>
</tr>
<tr>
<td>$LOAD_PATH </td>
<td> 执行 require 读取文件时搜索的目录名数组</td>
</tr>
<tr>
<td>$PROGRAM_NAME </td>
<td> 当前执行中的 Ruby 脚本的别名</td>
</tr>
<tr>
<td>$SAFE </td>
<td> 安全模式等级(默认 0)</td>
</tr>
<tr>
<td>$VERBOSE </td>
<td> 指定冗长模式的标识(默认为 nil)</td>
</tr>
<tr>
<td>$stdin </td>
<td> 标准输入(默认为 STDIN)</td>
</tr>
<tr>
<td>$stdout </td>
<td> 标准输出(默认为 STDOUT)</td>
</tr>
<tr>
<td>$stderr </td>
<td> 标准错误输出(默认为 STDERR)</td>
</tr>
</tbody>
</table>


<h2>预定义常量</h2>

<table>
<thead>
<tr>
<th>常量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>ARGF </td>
<td> 参数，或者从标准输入得到的虚拟文件对象</td>
</tr>
<tr>
<td>ARGV </td>
<td> 命令行参数数组</td>
</tr>
<tr>
<td>DATA </td>
<td> 访问 _ <em>END</em> _ 以后数据的文件对象</td>
</tr>
<tr>
<td>ENV </td>
<td> 环境变量</td>
</tr>
<tr>
<td>RUBY_COPYRIGHT </td>
<td> 版权信息</td>
</tr>
<tr>
<td>RUBY_DESCRIPTION </td>
<td> ruby -v 显示的版本信息</td>
</tr>
<tr>
<td>RUBY_ENGINE </td>
<td> Ruby 的处理引擎</td>
</tr>
<tr>
<td>RUBY_PATCHLEVEL </td>
<td> Ruby 的补丁级别</td>
</tr>
<tr>
<td>RUBY_PLATFORM </td>
<td> 运行环境的信息(OS、CPU)</td>
</tr>
<tr>
<td>RUBY_RELEASE_DATE </td>
<td> Ruby 的发布日期</td>
</tr>
<tr>
<td>RUBY_VERSION </td>
<td> Ruby 的版本</td>
</tr>
<tr>
<td>STDERR </td>
<td> 标准错误输出</td>
</tr>
<tr>
<td>STDIN </td>
<td> 标准输入</td>
</tr>
<tr>
<td>STDOUT </td>
<td> 标准输出</td>
</tr>
</tbody>
</table>


<h2>伪变量</h2>

<ul>
<li>伪变量虽然可以像变量那样引用，但是不能改变其本身的值，对其赋值会产生错误</li>
</ul>


<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>self </td>
<td> 默认的接收者</td>
</tr>
<tr>
<td>nil、true、false </td>
<td> nil、true、false</td>
</tr>
<tr>
<td><code>__FILE__</code> </td>
<td> 执行中的 Ruby 脚本的文件名</td>
</tr>
<tr>
<td><code>__LINE__</code> </td>
<td> 执行中的 Ruby 脚本的行编号</td>
</tr>
<tr>
<td><code>__ENCODING__</code> </td>
<td> 脚本的编码</td>
</tr>
</tbody>
</table>


<h2>环境变量</h2>

<table>
<thead>
<tr>
<th>变量名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>RUBYLIB </td>
<td> 追加到预定义变量 $LOAD_PATH 中的目录名(各目录间用 : 分隔)</td>
</tr>
<tr>
<td>RUBYOPT </td>
<td> 启动 Ruby 时的默认选项(RUBYOPT = &ldquo;-U -v&rdquo; 等)</td>
</tr>
<tr>
<td>RUBYPATH </td>
<td> -S 选项指定的、解析器启动时脚本的搜索路径</td>
</tr>
<tr>
<td>PATH </td>
<td> 外部命令的搜索路径</td>
</tr>
<tr>
<td>HOME </td>
<td> DIR.chdir 方法的默认移动位置</td>
</tr>
<tr>
<td>LOGDIR </td>
<td> 没有 HOME 时的 DIR.chdir 方法的默认移动位置</td>
</tr>
<tr>
<td>LC_ALL、LC_CTYPE、LANG </td>
<td> 决定默认编码的本地信息(平台依赖)</td>
</tr>
<tr>
<td>RUBYSHELL、COMSPEC </td>
<td> 执行外部命令时，shell 需要使用的解析器路径(平台依赖)</td>
</tr>
</tbody>
</table>


<h1><h2 id="basic">基础</h2></h1>

<h2>注释</h2>

<pre><code class="ruby"># 单行注释

=begin
多
行
注
释
=end
</code></pre>

<h2>变量</h2>

<pre><code class="ruby">a = 123
print a
</code></pre>

<h2>控制语句</h2>

<pre><code class="ruby"># then 可省略
if expr then
    ...
elseif expr2
    ...
else
    ...
end


while true
    ...
end

# 迭代器 times
3.times do
    ...
end
</code></pre>

<p>if while 碰到 false 或 nil，认为为假，其余都为真</p>

<pre><code class="ruby">names = ["小林", "林", "高野", "森岗"]
names.each do | name |
    if /林/ =~ name
        puts name
    end
end
# 小林
# 林
</code></pre>

<h2>字符串</h2>

<ul>
<li>单引号不转义 <code>'hello.\n'</code> 输出 <code>hello.\n</code>，且不能插值</li>
<li>双引号会转义 <code>"hello.\n"</code> 输出 <code>hello 并且有换行</code>，可插值 <code>"#{我是变量} aaaa"</code></li>
</ul>


<h2>数值</h2>

<pre><code class="ruby">1    # Fixnum 对象
3.14 # Float 对象

# 数学相关函数
Math.sin
Math.sqrt'
</code></pre>

<h2>symbol</h2>

<ul>
<li>与字符串对象类似，符号也是对象，一般作为名称标签使用，表示方法等的对象的名称</li>
<li>符号能实现的功能，大部分字符串也能实现。但在像散列的键这样只是单纯判断 &ldquo;是否相等&rdquo; 的处理中，使用符号会比字符串更加有效率</li>
</ul>


<pre><code class="ruby">sym = :foo
sym2 = :"foo"

# 符号转字符串
sym.to_s
# 字符串转符号
"foo".to_sym
</code></pre>

<h2>对象</h2>

<blockquote><p>ruby 中，一切皆对象。ruby 是强类型的</p></blockquote>

<pre><code class="ruby"># 数组
names = ["a", "b", "c"]
names[0] # "a"
names[0] = "aa"
names.size # 3

# each 方法返回值为 ["aa", "b", "c"]
names.each do | item |
    puts item
end
</code></pre>

<pre><code class="ruby"># 散列
# 散列的 key 是符号类型 symbol 或者字符串 在这种只是单纯判断相等的情况下，比字符串性能更好
sym = :foo
sym.to_s     # "foo"
"foo".to_sym # :foo

address1 = { :name =&gt; "wt", :id =&gt; 1 }
address2 = { name: "wt", id: 1 } # address1 的简写(key 为符号)

address3 = { "name" =&gt; "wt", "id" =&gt; 1 } # key 为字符串

address1[:name] # "wt"
address1[:id] = 2

# each 方法返回值为 { :name =&gt; "wt", :id =&gt; 2 }
address1.each do | key, val |
    puts "#{key}: #{val}"
end
</code></pre>

<pre><code class="ruby"># 正则
# /xxx/ 是正则，=~ 用于匹配正则和字符串
# i 表不区分大小写

/Ruby/ =~ "Ruby"    # 0
/Ruby/ =~ "Diamond" # nil
/Ruby/i =~ "RUBY"   # 0
</code></pre>

<h3>常用对象</h3>

<ul>
<li>数值对象

<ol>
<li><code>-10、3.1415</code> 还有表示矩阵、复数、质数、公式的对象</li>
</ol>
</li>
<li>字符串对象</li>
<li>数组对象、散列对象</li>
<li>正则对象</li>
<li>时间对象</li>
<li>文件对象</li>
<li>符号对象</li>
<li>范围对象</li>
<li>异常对象</li>
</ul>


<h3>类</h3>

<blockquote><p>ruby 中的类 (class) 表示的就是对象的种类</p></blockquote>

<ul>
<li>对象拥有什么特性等，都是由类决定的</li>
<li>XX 类的对象，一般也会说成 XX 类的实例 (instance)。所有 ruby 对象其实都是某个类的实例，所以 ruby 中对象和实例的意义几乎是一样的</li>
</ul>


<table>
<thead>
<tr>
<th> 对象 </th>
<th> 类 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 数值 </td>
<td> Numeric </td>
</tr>
<tr>
<td> 字符串 </td>
<td> String </td>
</tr>
<tr>
<td> 数组 </td>
<td> Array </td>
</tr>
<tr>
<td> 散列 </td>
<td> Hash </td>
</tr>
<tr>
<td> 正则表达式 </td>
<td> Regexp </td>
</tr>
<tr>
<td> 文件 </td>
<td> File </td>
</tr>
<tr>
<td> 符号 </td>
<td> Symbol </td>
</tr>
</tbody>
</table>


<h3>nil</h3>

<ul>
<li>nil 是个特殊的值，表示对象不存在, 在 ruby 中 nil 和 false 都是 &ldquo;否&rdquo; 的意思</li>
<li><strong>其他一切都为 true (空字符串也是 true)</strong></li>
<li>方法不能返回有意义的值时就会返回 nil</li>
<li>从数组或者散列中获取对象时，若指定不存在的索引或者键，则得到的返回值也是 nil</li>
</ul>


<pre><code class="ruby">a = nil # nil
a.nil?  # true
</code></pre>

<h2>方法</h2>

<p>ruby 在调用方法时可以省略 <code>()</code></p>

<pre><code class="`ruby">def foo
    puts 123
end

foo()
foo
</code></pre>

<pre><code class="ruby">print("hello, ruby.\n")
print "hello, ruby.\n"

print("hello, ", "ruby", ".", "\n")
print "hello, ", "ruby", ".", "\n"
</code></pre>

<h2>output</h2>

<p><code>print/puts/p/pp</code></p>

<ul>
<li>puts 在结尾会自动输出换行符</li>
<li>使用 p 方法时，数值结果和字符串结果会以不同的形式输出</li>
<li>pp 需要 <code>require "pp</code> 可以有格式的打印散列、数组</li>
</ul>


<h2>引用其他文件</h2>

<p>被其他程序引用的程序，称为库</p>

<ul>
<li>require 希望引用的库名

<ul>
<li>用 require 方法后，Ruby 会搜索参数指定的库，并读取库的所有内容。库内容读取完毕后，程序才会执行 require 方法后面的处理</li>
<li>require 方法用于引用已存在的库。只需要指定库名，程序就会在预先定义好的路径下查 找并读取与 Ruby 一起安装的库</li>
</ul>
</li>
</ul>


<pre><code class="ruby">require "date" # 引入标准库

days = Date.tody - Date.new(1993, 2, 24)
puts(days.to_i) # 8323
</code></pre>

<ul>
<li>require_relative 希望引用的库名

<ul>
<li>require_relative 方法在查找库时，则是根据执行中的程序目录(文件夹)来进行的</li>
</ul>
</li>
</ul>


<pre><code class="ruby"># fun.rb
def foo(a, b)
    puts a, b
end
</code></pre>

<pre><code class="ruby"># use_fun.rb
require_relative "fun"
foo()
</code></pre>

<h2>使用中文</h2>

<ul>
<li>在某些 ruby 运行环境中，执行包含中文的脚本时，有可能出错，可在程序首行添加魔法注释类指定编码格式</li>
<li>如没指定魔法注释，ruby 会默认使用 UTF-8 编码方式</li>
</ul>


<pre><code class="ruby"># encoding: GBK
</code></pre>

<p>此外，使用 p 方法输出中文时也可能会出现乱码，可用 <code>-E 编码方式</code> 来指定输出结果的编码方式</p>

<pre><code class="bash">ruby -E UTF-8
irb -E UTF-8
</code></pre>

<h2>文件读取</h2>

<pre><code class="ruby"># read_text.rb
# 执行命令 ruby read_text.rb test.txt

# 一次读取整个文件内容 1
# 使用 ARGV 这个内置变量可得到命令行传递来的参数数组
filename = ARGV[0]
file = File.open(filename)
text = file.read
print text
file.close

# ---------------------------------------
# 一次读取整个文件内容 2
print File.read(ARGV[0])

# 逐行读
filename = ARGV[0]
file = File.open(filename)
file.each_line do | line |
    print line
end
file.close

# --------------------------------------
# 文件中读取指定模式的内容并输出
# 命令 ruby read_text.rb 模式 文件名
pattern = Regexp.new(ARGV[0])
filename = ARGV[1]

file = File.open(filename)
file.each_line do | line |
    if pattern =~ line
        print line
    end
end
file.close
</code></pre>
]]></content>
  </entry>
  
</feed>
