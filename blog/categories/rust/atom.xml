<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rust | Away0x's Blog]]></title>
  <link href="http://away0x.github.io/blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://away0x.github.io/"/>
  <updated>2021-10-07T19:04:35+08:00</updated>
  <id>http://away0x.github.io/</id>
  <author>
    <name><![CDATA[TongWu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust - Install, Basic]]></title>
    <link href="http://away0x.github.io/blog/2021/10/01/rust-install/"/>
    <updated>2021-10-01T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2021/10/01/rust-install</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#install">Install</a></li>
<li><a href="#basic">Basic</a></li>
</ul>


<h1><h2 id="install">Install</h2></h1>

<blockquote><p>如安装困难, 可参考 <a href="https://rsproxy.cn/">https://rsproxy.cn/</a> 配置 proxy</p></blockquote>

<h2>rustup</h2>

<pre><code class="bash"># 安装 rustup
curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
# 验证是否安装成功
rustc --version 
# 更新 rust 版本
rustup update
# 更新 rustup
rustup self update
# 卸载 rust
rustup self uninstall
# 打开本地 rust 文档
rustup doc
</code></pre>

<h2>cargo</h2>

<ul>
<li><a href="https://crates.io/">crates.io</a></li>
</ul>


<pre><code class="bash">cargo --version
# 创建项目
# --lib 库项目
# --vcs=git 指定版本控制工具
cargo new demo
# 编译
# --release 发布时编译
cargo build
# 编译并运行
cargo run
# 检查代码 (不生成可执行文件)
cargo check
# 格式化代码
cargo fmt
# 发布 crate
cargo publish
cargo yank # 撤回版本
# 安装二进制文件
cargo install &lt;crate-name&gt; # 会安装到 ～/.cargo/bin
cargo install --force &lt;crate-name&gt; # 重新安装
# 生成文档并打开
cargo doc --open
</code></pre>

<h1><h2 id="basic">Basic</h2></h1>

<ul>
<li>函数和变量名使用 snake case 命名规范</li>
<li>trait、struct 使用 camel case 命名规范</li>
</ul>


<h2>注释</h2>

<pre><code class="rust">// 单行注释
/**
    多行注释
*/
</code></pre>

<pre><code class="rust">//! 这是一个模块级别的文档注释

/// 这是一个函数的文档注释 (可使用 markdown 语法)
/// 可以使用 cargo doc --open 生成文档
/// 
/// # Examples
/// ```
/// // 编写一些示例 (运行 cargo test 的时候，会把示例的代码作为测试来运行)
/// let arg = 5;
/// let answer = add_one(arg);
/// assert_eq!(6, answer);
/// ```
/// 
/// # Panics
/// 说明函数可能发生 panic 的场景
/// 
/// # Errors
/// 如果函数返回 Result，描述可能的错误种类，以及可导致错误的条件
/// 
/// # Safety
/// 如果函数处于 unsafe 调用，就应该解释 unsafe 的原因，以及调用者确保的使用前提
pub fn add_one(x: i32) -&gt; i32 {
    x + 1
}
</code></pre>

<h2>Print</h2>

<pre><code class="rust">// print!、println!、eprint!、eprintln!
println!("{}", 2);
println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");
println!("{a} {b} {c}", a="a", b="b", c="c");
</code></pre>

<h2>Variable</h2>

<ul>
<li>使用 let 声明变量，默认情况下变量是 Immutable 的</li>
<li>声明变量时，加上 mut，就可是变量可变</li>
<li>Shadowing

<ul>
<li>可以使用相同的名字声明新的变量，新的变量会 shadow 之前声明的同名变量</li>
</ul>
</li>
</ul>


<pre><code class="rust">let x: u32 = 5; // 在栈上分配一个类型为 u32 的变量, 变量名为 x
x = 6; // Error: cannot assign twice to immutable variable

let mut y = 5;
y = 6; // OK
y = "y"; // 类型错误
</code></pre>

<pre><code class="rust">// shadow
let x = 5;
let x = x + 1;
let x = "x";
</code></pre>

<pre><code class="rust">// 解构
let (mut a, mut b) = (1, 2);
let Point { x: ref a, y: ref b } = p;
</code></pre>

<h2>Constant</h2>

<ul>
<li>常量在绑定值后也是不可变的，但是它和不可变的变量有很多区别:

<ol>
<li>不可以使用 mut, 常量永远都是不可变的</li>
<li>声明常量使用 const 关键字，类型必须得被标注</li>
<li>常量可以在任何作用域内声明，包括全局作用域</li>
<li>常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行是才能计算出的值</li>
</ol>
</li>
<li>程序运行期间，常量在其声明的作用域内一直有效</li>
<li>命名规范: 使用全大写字母，单词之间用下划线分隔</li>
</ul>


<pre><code class="rust">const MAX_POINTS: u32 = 100_1000;
</code></pre>

<h2>Static Variable</h2>

<ul>
<li>与常量的区别

<ol>
<li>静态变量有固定的内存地址, 使用它的值总会访问同样的数据</li>
<li>常量允许使用它们的时候对数据进行复制</li>
<li>静态变量: 可以是可变的, 访问和修改静态可变变量是不安全的 (unsafe)</li>
</ol>
</li>
</ul>


<pre><code class="rust">// 全局变量
// 声明时必须初始化，且初始化必须为编译期可确定的常量
// 全局变量读写时需要用 unsafe 修饰
static GLOBAL: i32 = 0; // 生命周期('static)为整个程序运行期间
</code></pre>

<pre><code class="rust">// 使用静态变量时, 由于一些限制, 可以使用 lazy_static 工具
// https://github.com/rust-lang-nursery/lazy-static.rs
static MAP: HashMap&lt;String, String&gt; = HashMap::new(); // 无法编译通过, 需要用 lazy_static
</code></pre>

<pre><code class="rust">use lazy_static::lazy_static;
use std::collections::HashMap;
use std::sync::{Arc, Mutex};

lazy_static! {
    static ref HASHMAP: Arc&lt;Mutex&lt;HashMap&lt;u32, &amp;'static str&gt;&gt;&gt; = {
        let mut m = HashMap::new();
        m.insert(0, "foo");
        m.insert(1, "bar");
        m.insert(2, "baz");
        Arc::new(Mutex::new(m))
    };
}

fn main() {
    let mut map = HASHMAP.lock().unwrap();
    map.insert(3, "waz");

    println!("map: {:?}", map);
}
</code></pre>

<h2>Types</h2>

<ul>
<li>Rust 是静态编译语言，在编译时必须知道所有变量的类型

<ul>
<li>基于使用的值，编译器通常能够推断出它的具体类型</li>
<li>但如果可能的类型比较多(例如把 String 转为整数的 parse 方法)，就必须添加类型标注，否则编译会报错</li>
</ul>
</li>
</ul>


<pre><code class="rust">let guess: u32 = "42".parse().expect("Not a number");
</code></pre>

<h3>标量类型</h3>

<ul>
<li>一个标量类型代表一个单个的值</li>
</ul>


<h4>整数类型</h4>

<ul>
<li>整数类型没有小数部分

<ul>
<li>例如 u32 就是一个无符号的整数类型，占据 32 位的空间</li>
</ul>
</li>
<li>无符号整数类型以 u 开头</li>
<li>有符号整数类型以 i 开头</li>
</ul>


<table>
<thead>
<tr>
<th> Length </th>
<th> Signed </th>
<th> Unsigned </th>
</tr>
</thead>
<tbody>
<tr>
<td> 8-bit </td>
<td> i8 </td>
<td> u8 </td>
</tr>
<tr>
<td> 16-bit </td>
<td> i16 </td>
<td> u16 </td>
</tr>
<tr>
<td> 32-bit </td>
<td> i32 </td>
<td> u32 </td>
</tr>
<tr>
<td> 64-bit </td>
<td> i64 </td>
<td> u64 </td>
</tr>
<tr>
<td> 128-bit </td>
<td> i128 </td>
<td> u128 </td>
</tr>
<tr>
<td> arch </td>
<td> isize </td>
<td> usize </td>
</tr>
</tbody>
</table>


<ul>
<li>isize 和 usize 类型的位数由程序运行的计算机的架构决定

<ul>
<li>64 位计算机，那就是 64 位的</li>
</ul>
</li>
<li>使用 isize/usize 的主要场景是对某种集合进行索引操作</li>
</ul>


<h5>整数字面值</h5>

<ul>
<li>除了 byte 类型外，所有的数值字面值都允许使用类型后缀

<ul>
<li>例如: <code>57u8</code></li>
</ul>
</li>
<li>整数的默认类型就是 <strong>i32</strong></li>
</ul>


<table>
<thead>
<tr>
<th> Number Literals </th>
<th> Example </th>
</tr>
</thead>
<tbody>
<tr>
<td> Decimal </td>
<td> <code>98_222</code> </td>
</tr>
<tr>
<td> Hex </td>
<td> <code>0xff</code> </td>
</tr>
<tr>
<td> Octal </td>
<td> <code>0077</code> </td>
</tr>
<tr>
<td> Binary </td>
<td> <code>0b1111_0000</code> </td>
</tr>
<tr>
<td> Byte(u8 only) </td>
<td> <code>b'A'</code> </td>
</tr>
</tbody>
</table>


<h5>整数溢出</h5>

<ul>
<li>u8 范围是 0-255，如把 u8 变量的值设置为 256，那么:

<ol>
<li>调试模式下编译: Rust 会检查整数溢出，如发生, 程序运行时会 panic</li>
<li>release 模式下编译: Rust 不会检查可能导致 panic 的整数溢出，如溢出发生，会执行 &ldquo;环绕操作&rdquo;

<ul>
<li>256 变成 0，257 变成 1 &hellip;</li>
<li>但程序不会 panic</li>
</ul>
</li>
</ol>
</li>
</ul>


<h4>浮点类型</h4>

<ul>
<li><strong>f32</strong>: 32 位，单精度</li>
<li><strong>f64</strong>: 64 位，双精度</li>
<li>f64 是默认类型，因为现代 CPU 上 f64 和 f32 速度差不多，而且精度更高</li>
</ul>


<pre><code class="rust">let x = 2.0; // f64
let y: f32 = 3.0; // f32
</code></pre>

<h5>数值操作</h5>

<pre><code class="rust">let a = 5 + 10;
let b = 3.2 - 2.1;
let c = 2 * 3;
let d = 30 / 3;
let e = 54 % 5;
</code></pre>

<h4>字符类型</h4>

<ul>
<li>Rust 语言中 char 类型被用来描述语言中最基础的单个字符</li>
<li>字符类型的字面值使用单引号</li>
<li>占用 4 字节大小</li>
<li>是 Unicode 标量值，可以表示比 ASCII 多得多的字符内容: 拼音、中日韩文、零长度空白字符、emoji 表情&hellip;

<ul>
<li>Unicode 中并没字符的概念，所以直觉上认为的字符也许和 Rust 中的概念并不相符</li>
</ul>
</li>
</ul>


<pre><code class="rust">let x = 'z';
let y: char = '『';
let z = '😄';
</code></pre>

<h4>布尔类型</h4>

<ul>
<li>true/false</li>
</ul>


<h3>复合类型</h3>

<ul>
<li>复合类型可以将多个值放在一个类型里</li>
<li>Rust 提供了两种基础的复合类型: 元组(Tuple)、数组</li>
</ul>


<h4>Tuple</h4>

<ul>
<li>可以将多个类型的多个值放在一个类型里面，每个位置的类型不必相同</li>
<li>长度是固定的，一旦声明就无法更改</li>
</ul>


<pre><code class="rust">let tup: (i32, f64, u8) = (500, 6.4, 1);
println!("{} {} {}", tup.0, tup.1, tup.2);
// 使用模式匹配结构 tuple
let (x, y, z) = tup;

// Empty Tuple (Unit 类型)
let empty: () = (); // 空元组占用 0 内存空间
</code></pre>

<h4>数组</h4>

<ul>
<li>可以将多个类型的多个值放在一个类型里面，每个位置的类型必须相同</li>
<li>长度是固定的，一旦声明就无法更改</li>
<li>如想让数据存放在 stack 上而不是 heap 上，或者想保证有固定数量的元素，这时使用数组更有好处

<ul>
<li>数组是在 stack 上分配的单个块的内存</li>
</ul>
</li>
<li>数组没有 Vector 灵活</li>
</ul>


<pre><code class="rust">let a = [1, 2, 3];
// 数组的类型 [类型; 长度]
let b: [u32; 2] = [1, 2];

// 如果数组中每个元素值都相同可以这样声明
let c = [3; 5]; // 相当于 let c = [3, 3, 3, 3, 3];

// 访问数组元素
// - 如果索引超出数组范围，编译会报错
// - 如果索引是动态的，那么编译会通过，运行时会报错
let d = c[0];
</code></pre>

<h3>指针类型</h3>

<p>智能指针</p>

<table>
<thead>
<tr>
<th> 类型名 </th>
<th> 简介 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>Box&lt;T&gt;</code> </td>
<td> 指向类型 T 的、具有所有权的指针，有权释放内存 </td>
</tr>
<tr>
<td> <code>&amp;T</code> </td>
<td> 指向类型 T 的借用指针、也称为引用，无权释放内存，无权写数据 </td>
</tr>
<tr>
<td> <code>&amp;mut T</code> </td>
<td> 指向类型 T 的 mut 型借用指针，无权释放内存，有权写数据 </td>
</tr>
<tr>
<td> <code>*const T</code> </td>
<td> 指向类型 T 的只读裸指针，没有生命周期信息，无权写数据 </td>
</tr>
<tr>
<td> <code>*mut T</code> </td>
<td> 指向类型 T 的可读写裸指针，没有生命周期信息，有权写数据 </td>
</tr>
<tr>
<td> <code>Rc&lt;T&gt;</code> </td>
<td> 指向类型 T 的引用计数指针，共享所有权，线程不安全 </td>
</tr>
<tr>
<td> <code>Arc&lt;T&gt;</code> </td>
<td> 指向类型 T 的原子引用计数指针，共享所有权，线程安全 </td>
</tr>
<tr>
<td> <code>Cow&lt;'a, T&gt;</code> </td>
<td> Clone-on-write, 写时复制指针。可能是借用指针，也可能是具有所有权的指针 </td>
</tr>
</tbody>
</table>


<h3>Never 类型</h3>

<ul>
<li>名为 <code>!</code> 的特殊类型, 没有任何值, 在不返回值的函数中充当返回类型

<ul>
<li>不返回值的函数也被称为发散函数 (diverging function)</li>
<li>never 可强转为任何其他类型</li>
</ul>
</li>
</ul>


<pre><code class="rust">let guess: u32 = match guess.trim().parse() {
    Ok(num) =&gt; num,
    // continue 返回 never 类型, never 可强转为任何其他类型,
    // 所以该分支可以使用 continue 作为 u32 类型
    Err(_) =&gt; continue,
};
</code></pre>

<pre><code class="rust">fn bar() -&gt; ! {
    loop {} // 此处永远没有返回值, 所以类型为 never
}

impl&lt;T&gt; Option&lt;T&gt; {
    pub fn unwrap(self) -&gt; T {
        match self {
            Some(val) =&gt; val,
            // panic 是 never, 所以可以作为 T 使用
            None =&gt; panic!("called `Option::unwrap()` on a `None` value"),
        }
    }
}
</code></pre>

<h3>类型转换</h3>

<ul>
<li>Rust 不提供原生类型之间的隐式转换，得使用 <code>as</code> 关键字显式转换</li>
<li>相似类型的转换:

<ul>
<li><code>as</code></li>
<li><code>T.into()</code>: 变量需要显式标注类型</li>
</ul>
</li>
</ul>


<pre><code class="rust">let v1: i8 = 41;
let v2: i16 = v1 as i16; // 也可 v1.into()

let i = 42;
let p = &amp;i as *const i32 as *mut i32;
println!("{:?}", p);
</code></pre>

<h3>类型别名</h3>

<pre><code class="rust">type Age = u32;
type Double&lt;T&gt; = (T, Vec&lt;T&gt;);
</code></pre>

<h2>Function</h2>

<h3>表达式与语句</h3>

<ul>
<li>函数体由一系列语句组成，可选的由一个表达式结束</li>
<li>Rust 是一个基于表达式的语言

<ul>
<li>语句是执行一些动作的指令</li>
<li>表达式会计算产生一个值</li>
</ul>
</li>
<li>语句没有返回值，所以不可以使用 let 将一个语句赋值给一个变量</li>
</ul>


<pre><code class="rust">let y = 6; // 语句
let x = (let y = 6); // 报错

let y = {
    let x = 1;
    x + 3 // 表达式产生的值 (不加分号, 加分号产生的值位 unit type)
};
</code></pre>

<pre><code class="rust">// 声明函数 (函数的定义也是语句)
fn test() {
    println!("test");
}
fn test2(x: i32, y: i32) {}
test2(5, 6);

// 返回值是函数体里最后一个表达式的值
// 如想提前返回，可以使用 return 关键字，指定一个值
fn test3(x: i32) -&gt; i32 {
    x + 5
}
let x = test3(6); // 11
</code></pre>

<h2>Control Flow</h2>

<h3>if else</h3>

<ul>
<li>if 是表达式，会产生值，if 条件必须得是 bool 类型</li>
<li>如果程序中使用了多于一个的 else if，那么最好使用 match 来重构</li>
</ul>


<pre><code class="rust">let number = 6;
if number % 4 == 0 {
    println!("number is divisible by 4");
} else if number % 3 == 0 {
    println!("number is divisible by 3");
} else {
    println!("number is not divisible by 4 or 3");
}

// if 是表达式
let condition = true;
let number = if condition { 5 } else { 6 }; // 每个分支产生的值，类型必须一致
</code></pre>

<h3>loop</h3>

<pre><code class="rust">loop {
    println!("again!");
}

let mut counter = 0;
let result = loop {
    counter += 1;
    if counter == 10 {
        break counter * 2; // 作为表达式结果
    }
};

println!("The result is: {}", result); // The result is: 20
</code></pre>

<h3>while</h3>

<pre><code class="rust">let mut number = 3;
while number != 0 {
    println!("{}", number);
    number = number - 1;
}
</code></pre>

<h3>for</h3>

<blockquote><p>for 可以用于任何实现了 IntoIterator trait 的数据结构</p></blockquote>

<p>在执行过程中，IntoIterator 会生成一个迭代器，for 循环不断从迭代器中取值，直到迭代器返回 None 为止。因而，for 循环实际上只是一个语法糖，编译器会将其展开使用 loop 循环对迭代器进行循环访问，直至返回 None</p>

<pre><code class="rust">let a = [10, 20, 30, 40, 50];
for element in a {
    println!("the value is: {}", element);
}
</code></pre>

<pre><code class="rust">let v = vec![10, 42, 9, 8];
for item in v {
    println!("{}", item);
}

let v = vec![10, 42, 9, 8];
for (index, value) in v.iter().enumerate() {
    println!("index: {}, value: {}", index, value);
}
</code></pre>

<h4>for 搭配 range 使用</h4>

<pre><code class="rust">for number in (1..4).rev() {
    println!("{}", number);
}
// rev 倒序循环
// 依次输出 3 2 1
</code></pre>
]]></content>
  </entry>
  
</feed>
