<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Frontend | Away0x's Blog]]></title>
  <link href="http://away0x.github.io/blog/categories/frontend/atom.xml" rel="self"/>
  <link href="http://away0x.github.io/"/>
  <updated>2022-05-21T12:30:48+08:00</updated>
  <id>http://away0x.github.io/</id>
  <author>
    <name><![CDATA[TongWu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从零开始实现前端模板引擎]]></title>
    <link href="http://away0x.github.io/blog/2017/05/17/fd-template/"/>
    <updated>2017-05-17T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2017/05/17/fd-template</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>本文总结了 3 种实现模板引擎的方式，最后将编写一个 类似于 underscore.template 的模板插件</p></blockquote>

<ul>
<li><a href="#replace">replace</a></li>
<li><a href="#tplstr">模板字符串</a></li>
<li><a href="#function">new Function</a></li>
<li><a href="https://github.com/Away0x/learning-template">github</a></li>
</ul>


<h1><h2 id="replace">replace</h2></h1>

<h2>介绍</h2>

<p>replace 是字符串提供的一个超级强大的方法，这里只介绍简单的使用，更多详细的语法参见下面提供的链接</p>

<ul>
<li>一参可为 <code>字符串</code> 或 <code>正则</code>:

<ul>
<li>为正则时有两种情况: <code>普通匹配模式</code> 和 <code>全局匹配模式</code>:

<ul>
<li>全局匹配模式下，若二参为函数，则该函数在每次匹配时都会被调用</li>
</ul>
</li>
</ul>
</li>
<li>二参可为 <code>字符串</code> 或 <code>一个用于生成字符串的函数</code>:

<ul>
<li>当为字符串时:

<ul>
<li>可在字符串中使用 特殊替换字符 ($n &hellip;)</li>
</ul>
</li>
<li>当为函数时:

<ul>
<li>函数中不能用 特殊替换字符</li>
<li>一参为正则匹配的文本</li>
<li>倒数第二参为匹配到的子字符串在原字符串中的偏移量</li>
<li>最后一参为被匹配的原始字符串</li>
<li>其余参数为正则中每个分组匹配到的文本</li>
</ul>
</li>
</ul>
</li>
</ul>


<pre><code class="javascript">    function replacer(match, p1, p2, p3, offset, string) {
        // match 为 'abc12345#$*%'        : 正则匹配的文本
        // p1,p2,p3 分别为 abc 12345 #$*% : 即每个小组匹配到的文本, pn 表示有 n 个小组
        // offset 为 0                    : 匹配到的子字符串在原字符串中的偏移量。
        //      （比如，如果原字符串是'abcd'，匹配到的子字符串时'bc'，那么这个参数将是1）
        // string 为 'abc12345#$*%'       : 被匹配的原始字符串
        return [p1, p2, p3].join(' - ');
    }
    // 注意正则中的 括号 ，这里分有 3个组
    var newString = 'abc12345#$*%'.replace(/([^\d]*)(\d*)([^\w]*)/, replacer);
    // newString =&gt; 'abc - 12345 - #$*%'
</code></pre>

<p>以下是各种情况下的具体案例:</p>

<pre><code class="javascript">// 最基础的使用
'123'.replace('1', 'A') // 'A23'
'lalala 2Away0x2'.replace(/2(.*)2/, '$1') // 'lalala Away0x'

// trim
const trim = str =&gt; str.replace(/(^\s*)|(\s*$)/g, '')

trim('  abc    ') // 'abc'

// format
const format = str =&gt;
    (...args) =&gt;
        str.replace(/{(\d+)}/g, (match, p) =&gt; args[p] || '')

format('lalal{0}wowowo{1}hahah{2}')('-A-', '-B-', '-C') // lala-A-wowo-B-haha-C
</code></pre>

<h2>原理</h2>

<p>先在模板中预留占位(  )，再将对应的数据填入</p>

<h2>实现</h2>

<p>要求1: 可填充简单数据</p>

<pre><code class="javascript">const tpl = (str, data) =&gt; str.replace(//g, (match, p) =&gt; data[p])
tpl('&lt;div&gt;&lt;/div&gt;', {data: 'tpl'}) // '&lt;div&gt;tpl&lt;/div&gt;'
</code></pre>

<p>要求2: 可填充嵌套数据</p>

<pre><code class="javascript">// 可根据占位符  中的 "." 来获得数据的依赖路径，从而得到对应的数据
// 由于 使用 "." 连接，所以其前后应为合法的变量名，因此需重新构造正则
/* 合法变量名
*    - 开头可为字符和少量特殊字符: [a-zA-Z$_]
*    - 余部还可是数字:            [a-zA-Z$_0-9]
*/
// 除开头外还需匹配 连接符 "." ,因此最终正则为: //g
function tpl (str, data) {
    const reg = //g

    // 全局匹配模式下，replace 的回调在每次匹配时都会执行,
    // p 为占位符中的变量,该例为 data.a
    return str.replace(reg, (match, p) =&gt; {
        const paths = p.split('.') // ['data', 'a']
        let result  = data

        while (paths.length &gt; 0)
            result = result[ paths.shift() ] // 得到路径最末端的数据
        return String(result) || match // 需转成字符串，因为可能遇到 0, null 等数据
    })
}
tpl('&lt;div&gt;&lt;/div&gt;', {data: {a: 'tpl'}}) // '&lt;div&gt;tpl&lt;/div&gt;'
</code></pre>

<p>最终代码:</p>

<pre><code class="javascript">function tpl (str, data) {
    const reg = //g

    return str.replace(reg, (match, p) =&gt; {
        const paths = p.split('.')
        let result  = data

        while (paths.length &gt; 0)
            result = result[ paths.shift() ]
        return String(result) || match
    })
}
</code></pre>

<h3>优缺点</h3>

<ul>
<li>优点: 简单</li>
<li>缺点: 无法在模板中使用表达式，所有数据都得事先计算好再填入，且填充的数据应为基础类型，灵活性差，难以满足复杂的需求</li>
</ul>


<h3>资料</h3>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">详细语法</a></p>

<h1><h2 id="tplstr">模板字符串</h2></h1>

<h2>介绍</h2>

<ul>
<li>模板字符串包裹在 反引号(Esc按钮下面那个) 中，其中可通过 ${} 的语法进行插值</li>
</ul>


<pre><code class="javascript">// 特性一:多行
`123123
 23213`

// 特性二: 字符串中可插值
/* 作为一门伪函数式编程语言，js 的很多语法都可以返回数据:
*    - 表达式: 各种运算符表达式，三目(可用来替代简单的判断语句)
*    - 函数:  封装各种复杂的逻辑，最后返回一个值即可
*    - 方法:  如一些有返回值的数据方法
*       - 最强大的如数组的 map, filter ...
*/
// 以下字符串都等于 '123tpl456'
const str1 = `123${'tpl'}456`
const str2 = `123${false || 'tpl'}456`
const str3 = `123${true ? 'tpl' : ''}456`
const str4 = `123${ (function () {return 'tpl'}()) }456`
const fn = () =&gt; 'tpl'
const str5 = `123${ fn() }456`
const str6 = `123${
    ['T', 'P', 'L'].map(s =&gt; s.toLowerCase()).join('')
}456`
console.log([str1, str2, str3, str4, str5, str6].every(s =&gt; s === '123tpl456'))

// 特性三: 模板函数
var a = 5, b = 10
function tag (strArr, ...vals) {
    console.log(strArr, vals)
}
tag`Hello ${ a + b } world ${a * b}`
// strArr =&gt; ['Hello ', ' world ', '']
// vals   =&gt; [15, 30]  (${}里的值)
</code></pre>

<h2>案例</h2>

<ul>
<li>由于直接用模板字符串当模板引擎了，所以就直接写个组件吧

<ul>
<li><a href="http://codepen.io/Away0x/pen/dvEGpL">演示</a></li>
<li><a href="https://github.com/Away0x/learning-template/blob/master/src/tplstr.pagination/page.js">代码</a></li>
</ul>
</li>
<li>用这种方法写模板需注意的是一定要细分组件(很函数式，有种写 jsx 的既视感)</li>
</ul>


<h3>资料</h3>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings">详细语法</a></li>
<li><a href="http://www.pdosgk.com/index.php/home/news/show/id/80442.html">相关文章</a></li>
</ul>


<h1><h2 id="function">new Function</h2></h1>

<h2>介绍</h2>

<ul>
<li>Function 是 js 提供的一个用于构造 Function 对象的构造函数</li>
</ul>


<pre><code class="javascript">// 普通函数
function log (user, msg) {
    console.log(user, msg)
}
log('Away0x', 'lalala')
// Function 构造函数
const log = new Function('user', 'msg', 'console.log(user, msg)')
log('Away0x', 'lalala')
</code></pre>

<h2>实现</h2>

<ul>
<li>大多数前端模板引擎都是用这种方式实现的，其原理在于运用了 js Function 对象可将字符串解析为函数的能力。</li>
<li>一个普通模板引擎的工作步骤大致如下</li>
</ul>


<pre><code>// 1. 编写模板
{@ if( data.con &gt; 20 ) { @}
    &lt;p&gt;ifififififif&lt;/p&gt;
{@ } else { @}
    &lt;p&gt;elseelseelseelse&lt;/p&gt;
{@ } @}
</code></pre>

<pre><code class="javascript">// 2. 由模板生成函数体字符串
const functionbody = `
    var tpl = ''
    if (data.con &gt; 20) {
        tpl += '&lt;p&gt;ifififififif&lt;/p&gt;'
    } else {
        tpl += '&lt;p&gt;ifififififif&lt;/p&gt;'
    }
    return tpl
`
// 3. 通过 Function 解析字符串并生成函数
new Function('data', functionbody)(data)
</code></pre>

<ul>
<li>由此可见，只要将 {@  @} 里的字符串内容生成 js 语句，而其余内容之前加上 一个 &lsquo;tpl += &rsquo; 即可。</li>
</ul>


<p>实现代码如下</p>

<pre><code class="javascript">const tpl = (str, data) =&gt; {
    const tplStr = str.replace(/\n/g, '')
        .replace(//g, (match, p) =&gt; `'+(${p})+'`)
        .replace(/{@(.+?)@}/g, (match, p) =&gt; `'; ${p}; tpl += '`)
    return new Function('data', `var tpl='${tplStr}'; return tpl;`)(data)
}
// 测试
const str = `
    {@ if( data.con &gt; 20 ) { @}
        &lt;p&gt;ifififififif&lt;/p&gt;
    {@ } else { @}
        &lt;p&gt;elseelseelseelse&lt;/p&gt;
    {@ } @}

    {@ for(var i = 0; i &lt; data.list.length; i++) { @}
        &lt;p&gt; : &lt;/p&gt;
    {@ } @}
`
const data = {con:21, list: [1,2,3,4,5,76,87,8]}
console.log( tpl(str, data) )
// &lt;p&gt;ifififififif&lt;/p&gt;
// &lt;p&gt;0 : 1&lt;/p&gt;&lt;p&gt;1 : 2&lt;/p&gt;&lt;p&gt;2 : 3&lt;/p&gt;&lt;p&gt;3 : 4&lt;/p&gt;&lt;p&gt;4 : 5&lt;/p&gt;&lt;p&gt;5 : 76&lt;/p&gt;&lt;p&gt;6 : 87&lt;/p&gt;&lt;p&gt;7 : 8&lt;/p&gt;
</code></pre>

<p>ok, 一个最最简单的模板引擎就已经完成了，支持在模板中嵌入 js 语句，虽然只有不到10行，但还是挺强大的对不。</p>

<h2>拓展</h2>

<h3>实现模板类</h3>

<p>为了能够更好的使用，将前面的代码抽成一个类。</p>

<ul>
<li>需求:

<ul>
<li>标识符格式有可能和后端模板引擎冲突，因此应实现成可配置的</li>
<li><code>{@  @}</code>: 用于嵌套逻辑语句</li>
<li><code></code>: 用于嵌套变量或表达式</li>
<li>在模板中应能添加注释，注释有两种:

<ul>
<li><code>&lt;!-- --&gt;</code>: 会输出</li>
<li><code>{#  #}</code>: 这种注释会在编译时被忽略，即只在模板中可见</li>
</ul>
</li>
</ul>
</li>
</ul>


<pre><code class="javascript">class Tpl {
    constructor (config) {
        const defaultConfig = {
            signs: {
                varSign:       [', '],    // 变量/表达式
                evalSign:      ['{@', '@}'],    // 语句
                commentSign:   ['&lt;!--', '--&gt;'], // 普通注释
                noCommentSign: ['{#', '#}']     // 忽略注释
            }
        }
        // 可通过配置来修改标识符
        this.config = Object.assign({}, defaultConfig, config)
        // [', '] =&gt; //g 构造正则
        Object.keys(this.config.signs).forEach(key =&gt; {
            this.config.signs[key].splice(1, 0, '(.+?)')
            this.config.signs[key] = new RegExp(this.config.signs[key].join(''), 'g')
        })
    }
    // 模板解析
    _compile (str, data){
        const tpl = str.replace(/\n/g, '')
            // 注释
            .replace( this.config.signs.noCommentSign, () =&gt; '')
            .replace( this.config.signs.commentSign, (match, p) =&gt; `'+'&lt;!-- ${p} --&gt;'+'`)
            // 表达式/变量
            .replace( this.config.signs.varSign, (match, p) =&gt; `'+(${p})+'`)
            // 语句
            .replace( this.config.signs.evalSign, (match, p) =&gt; {
                let  exp = p.replace('&amp;gt;', '&gt;').replace('&amp;lt;', '&lt;')
                return `'; ${exp}; tpl += '`
            })

        return new Function('data', `var tpl='${tpl}'; return tpl;`)(data)
    }
    // 入口
    compile (tplStr, data) { return this._compile(tplStr, data) }
}

function tpl (config) {
    return new Tpl(config)
}

console.log( tpl().compile(str, data) ) // 得到
</code></pre>

<h3>注释的 BUG</h3>

<p>上面的代码在解析一些特殊模板注释(如下)时会出错 <code>&lt;!--  --&gt;</code> (由于注释中有标识符，因此会将 a 作为变量解析，会报未定义错误)</p>

<p>解决: 在解析注释时，如注释里有标识符，则将其先替换成其他符号，等语句变量的解析完成时，再替换回来</p>

<pre><code class="javascript">.replace( this.config.signs.commentSign, (match, p) =&gt; {
    const exp = p.replace(/[\{\&lt;\}\&gt;]/g, match =&gt; `&amp;*&amp;${match.charCodeAt()}&amp;*&amp;`)
    return `'+'&lt;!-- ${exp} --&gt;'+'`
})
// ... 解析变量和语句
.replace(/\&amp;\*\&amp;(.*?)\&amp;\*\&amp;/g, (match, p) =&gt;  String.fromCharCode(p))
</code></pre>

<h3>语法模式</h3>

<p>在模板里写 js 好烦呀，各种 &lsquo;{&rsquo; 乱飞，有些模板提供了更好看的语法：</p>

<pre><code class="html">{@ if data.con &gt; 20 @} // if (data.con &gt; 20) {
    &lt;p&gt;ifififififif&lt;/p&gt;
{@ elif data.con === 20 @} // } else if (data.con === 20) {
    &lt;p&gt;elseelseelseelseifififififif&lt;/p&gt;
{@ else @} // } else {
    &lt;p&gt;elseelseelseelse&lt;/p&gt;
{/@ if @} // }
// for (var index = 0; index &lt; data.list.length; index++) { var item = data.list[index]
{@ each data.list as item @}
    &lt;p&gt;循环  次: &lt;/p&gt;
{/@ each @}
</code></pre>

<p>其实就是在解析语句时多做一些处理而已:</p>

<pre><code class="javascript">// 配置中增加 syntax 属性，默认 false, 其为 true 是开启 语法模式
// 配置中增加语法模式结束语句的标识符: endEvalSign: ['{/@', '@}']
// 给 Tpl 类添加方法，用于 语法模式 的语句解析
_syntax (str) {
    const arr = str.trim().split(/\s+/)
    let exp = str

    if (arr[0] === 'if') {
        // if (xx) {
        exp = `if ( ${arr.slice(1).join(' ')} ) {`
    } else if (arr[0] === 'else') {
        // } else {
        exp = '} else {'
    } else if (arr[0] === 'elif') {
        // } else if (xx) {
        exp = `} else if ( ${arr.slice(1).join(' ')} ) {`
    } else if (arr[0] === 'each') {
        // for (var index = 0, len = xx.length; index &lt; len; index++) { var item = xx[index]
        exp = `for (var index = 0, len = ${arr[1]}.length; index &lt; len; index++) {var item = ${arr[1]}[index]`
    }

    return exp
}
// 修改 _compile 解析语句的 replace
.replace( this.config.signs.evalSign, (match, p) =&gt; {
    let  exp = p.replace('&amp;gt;', '&gt;').replace('&amp;lt;', '&lt;')
                               // 语法模式
    exp = this.config.syntax ? this._syntax(exp) : exp
    return `'; ${exp}; tpl += '`
})
// 增加结束标识的解析 {/@ if @}  {/@ each @}
.replace( this.config.signs.endEvalSign, () =&gt; "'} tpl += '")
</code></pre>

<h3>过滤器</h3>

<ul>
<li>很多模板引擎中都有提供很多好用的过滤器:

<ul>
<li>字符串转大写的过滤器: <code>&lt;p&gt;tpl&lt;/p&gt; =&gt; &lt;p&gt;TPL&lt;/p&gt;</code></li>
<li>字符串转大写的过滤器(支持流式): <code>&lt;p&gt;tpl&lt;/p&gt;</code></li>
</ul>
</li>
</ul>


<p>现在我们来编写这个拓展</p>

<pre><code class="javascript">// 由于过滤器是对于变量的操作，所以只需在解析变量标识符的过程中做一下处理即可
//  =&gt; 无过滤器直接返回，  有过滤器则调用 Filters 类中对应的过滤器函数

// 过滤器函数
const Filters = {
    upper: str =&gt; str.toUpperCase()
}

// 解析 
.replace( this.config.signs.varSign, (match, p) =&gt; {
    const filterIndex = p.indexOf('|')
    let val = p

    if (filterIndex !== -1) { // 有过滤器
        const
            arr     = val.split('|').map(s =&gt; s.trim()),
            filters = arr.slice(1) || [],
            oldVal  = arr[0]

        val = filters.reduce((curVal, filterName) =&gt; {
            if ( ! Filters[filterName] ) {
                throw new Error(`没有 ${filterName} 过滤器`)
                return
            }
            return `Filters['${filterName}'](${curVal})`
        }, oldVal)
    }

    return `'+(${val})+'`
})

// 使用
// &lt;h1&gt;tpl&lt;/h1&gt; // =&gt; 'LPT'
</code></pre>

<ul>
<li>至此该模板引擎就完成了，总结下功能:

<ul>
<li>支持在模板中使用 js 语句</li>
<li>支持自定义标识符</li>
<li>支持更简洁的语法模式</li>
<li>支持过滤器</li>
</ul>
</li>
</ul>


<h3>其他</h3>

<ul>
<li>虽然这个模板工具还是有点简陋，比如没有个很友善的报错机制，不支持 include 等功能，但日常跑跑小项目什么的已经足够强大了</li>
<li><a href="http://codepen.io/Away0x/pen/JWqgLw">演示</a></li>
<li><a href="https://github.com/Away0x/learning-template/blob/master/src/eval/tpl.js">代码</a></li>
</ul>


<h3>资料</h3>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">详细语法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始实现前端表单验证插件]]></title>
    <link href="http://away0x.github.io/blog/2017/03/11/fd-form-validator/"/>
    <updated>2017-03-11T08:00:00+08:00</updated>
    <id>http://away0x.github.io/blog/2017/03/11/fd-form-validator</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>本文使用 es6、不依赖任何第三方库实现一个简单的表单验证插件 <a href="https://github.com/Away0x/baidu-ife/blob/master/yaoyao/lesson_2/index.html">github</a></p></blockquote>

<h1>效果</h1>

<p>```html</p>

<div class="form_group tel">
  <label for="name">手机</label>
  <input type="tel" name="tel" id="tel">
  <p class="message"></p>
</div>


<p><code>
</code>javascript
// 配置
{
  target: &lsquo;#tel&rsquo;, // 验证目标
  message: { target: &lsquo;.tel p&rsquo;, success: &lsquo;手机格式正确&rsquo; }, // 验证信息显示的地方
  validators: [ // 验证规则数组
    { name: &lsquo;tel&rsquo;, args: { message: &lsquo;手机格式错误&rsquo; } }
  ]
}
```</p>

<h1>代码结构</h1>

<ul>
<li>验证插件分为 <code>验证类Validator</code>，和 <code>验证规则validators</code>

<ul>
<li><code>验证类Validator</code>: 为主逻辑，负责接受表单的配置并对表单执行相应的验证规则。</li>
<li><code>验证规则validators</code>: 其内封装了大量的验证规则，供表单选用。</li>
</ul>
</li>
</ul>


<p>每个验证规则有着相同的结构，它们接收 表单的 value 返回验证结果和报错信息。例子如下:</p>

<pre><code class="javascript">// 针对手机号的验证规则
const tel = (str='', {message=''}={}) =&gt;
({
  status: /^1[3|4|5|7|8][0-9]{9}$/.test(str), // 验证状态
  message // 报错信息
})
</code></pre>

<h2>验证类 Validator</h2>

<pre><code class="javascript">class Validator {
  // 接受配置 validatorConfig: 验证器配置, targetConfig: 针对于表单的配置
  /*
  * validatorConfig {}
  *   - error   每个表单验证失败时的函数   Function
  *   - success 每个表单验证成功时的函数   Function
  *   - reset   对表单执行重置操作时的函数 Function
  * targetConfig [{}, {}, ...] -&gt; 各个表单的配置
  *   - target        验证目标的选择器  String(Selector)
  *   - message       验证信息的配置  Object
  *     - target      验证信息显示位置的选择器  String(Selector)
  *     - placeholder 验证信息的默认值，重置时会显示该文本 String
  *     - success     验证成功时会显示该文本   String
  *     - validators    验证规则的配置  [{}, {}, ...] -&gt; 各个验证规则的配置
  *       - name        验证规则的名字 (validators[key])  String
  *       - args        验证规则的配置参数  Object
  *         - message   必有 该规则验证失败的显示文本  String
  *         - ...       该验证规则的其他配置参数  Any (各验证规则不同)
  */
  constructor (config) {}
  // 验证主逻辑
  _check () {}
  // 单个表单的验证 (只对单个表单执行 _check)
  run () {}
  // 执行全部表单的验证 (对所有要验证的表单执行 _check)
  runAll () {}
  // 重置表单为初始状态
  reset () {}
}
</code></pre>

<h3>验证主逻辑 _check</h3>

<p>其接受 验证表单的配置，并执行相应验证逻辑
如接受了以下配置:</p>

<pre><code class="javascript">{
  target:  '#tel', // 验证目标
  // 验证信息显示的地方
  message:  { target: '.tel p', success: '手机格式正确' }, 
  validators: [ // 验证规则数组
    { name: 'tel', args: { message: '手机格式错误' } }
  ]
}
</code></pre>

<p>需实现功能如下:</p>

<ol>
<li>对目标表单(target)执行配置中指定的验证规则 (validators: 此次配置中只有一个验证规则)</li>
<li>如验证规则中有 required ，则说明该表单为必填项，必须进行表单验证。</li>
<li>如验证规则中无 required ，则说明该表单为选填项，只在有输入时才进行表单验证。(该例配置为选填)</li>
<li>当验证成功时需在 message.target 处显示 message.success 的文本。</li>
<li>当验证失败时需在 message.target 处显示 验证规则中的指定 的文本。</li>
<li>失败文本显示优先级同验证规则配置的先后顺序。</li>
</ol>


<p>以下是具体实现:</p>

<pre><code class="javascript">_check (config) {
    const
      validatorCfg  = this._validatorConfig,    // 验证器配置
      $target       = $(config.target),         // 验证的表单
      val           = $target.value,            // 验证的 value
      $message      = $(config.message.target), // 验证信息显示的地方
      ownValidators = config.validators,        // 所有验证规则
      result        = []                        // 失败信息数组

    let required = false // 不是必填项的话，只在有输入内容时进行检查 (默认为不必填)

    // 遍历执行验证器
    ownValidators.forEach(validator =&gt; {
      if (validator.name == 'required') required = true // 必填

      const temp = Validators[validator.name](val, validator.args) // 执行验证器

      // 如验证失败，则存储失败信息
      if ( ! temp.status) result.push( temp.message )
    })

    if ( ! required &amp;&amp; val.length === 0) return // 可跳过检验

    if (result.length &gt; 0) { // 有错误信息
      validatorCfg.error &amp;&amp; validatorCfg.error($target) // 失败回调
      $message.textContent = result[0]
    }
    else { // 验证通过
      validatorCfg.success &amp;&amp; validatorCfg.success($target) // 成功回调
      $message.textContent = config.message.success || ''
    }
  }
</code></pre>

<pre><code class="javascript">// 单个验证 需传入要验证 input 的 id
run (target) {
  // 得到当前要验证的表单的配置
  const curConfig = this._targetConfig.filter(config =&gt; config.target === `#${target}`)[0]

  this._check(curConfig)
}
// 执行全局验证
runAll () {
  this._targetConfig.forEach(this._check.bind(this))
}
// 重置表单
reset () {
  this._targetConfig.forEach(config =&gt; {
    const
      $target  = $(config.target),
      $message = $(config.message.target)

    $target.value        = ''
    $message.textContent = config.message.placeholder || ''
  })
  this._validatorConfig.reset( this._allTarget ) // 重置回调
}
</code></pre>

<p>自此我们的验证插件就写完了，可自行在 validators 中编写更多的验证规则</p>

<h1>继续优化</h1>

<ul>
<li>提交表单时应需得到所有表单的验证状态，全通过则提交。</li>
<li>目前失败信息提示过于单一。</li>
<li>如表单验证中需与后台通信(如验证用户名是否注册),那么验证器应该支持异步的验证规则。</li>
<li>目前会执行所有验证规则，可选择在验证规则失败时，就不再往下继续验证了，以提高性能。</li>
</ul>

]]></content>
  </entry>
  
</feed>
